---
- !ruby/object:Change
  level: 2
  scope: "(global)"
  title: Multiple assignment allowed in conditional expression
  path:
  - Ruby 2.4
  - Language
  reason: It is not what typically considered good style, but multiple assignment in conditions is now consistent with outside of condition behavior.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #10617'
    url: https://bugs.ruby-lang.org/issues/10617
    comments:
  docs:
  - "—"
  code:
  - "  ```ruby"
  - "  points = []"
  - "  if (x, y = points.first) # in Ruby <2.4, will raise SyntaxError: multiple assignment in conditional"
  - "    p [x, y]"
  - "  end"
  - "  ```"
  notes: "  ```"
  kind: change
  release: 2.4
  section: Language Changes
- !ruby/object:Change
  level: 3
  scope: "(global)"
  title: Toplevel `return`
  path:
  - Ruby 2.4
  - Language
  summary: "`return` statement at the top level of any `.rb` file stops further execution of this file."
  reason: Useful for code that depends on platform, presence of third-party libraries and so on; `return unless some_condition` at the beginning of the file will allow writing the rest of the code in assumption that necessary condition satisfied.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #4840'
    url: https://bugs.ruby-lang.org/issues/4840
    comments:
  docs:
  - "—"
  code:
  - "  ```ruby"
  - "  # Some nokogiri_patch.rb"
  - ''
  - "  # In Ruby < 2.4:"
  - "  if defined? Nokogiri"
  - "    # the rest of the code should all be nested in the unless"
  - "  end"
  - ''
  - "  # Ruby 2.4"
  - "  return unless defined? Nokogiri"
  - ''
  - "  # The rest of the code can be written at the top level, now."
  - "  ```"
  kind: change
  release: 2.4
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: "(global)"
  title: Refinements are supported in `Symbol#to_proc` and `send`
  path:
  - Ruby 2.4
  - Language
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #9451'
    url: https://bugs.ruby-lang.org/issues/9451
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11476'
    url: https://bugs.ruby-lang.org/issues/11476
    comments:
  code:
  - "  ```ruby"
  - "  module Tests"
  - "    refine Numeric do"
  - "      def normalize100"
  - "        clamp(0, 100)"
  - "      end"
  - "    end"
  - "  end"
  - ''
  - "  using Tests"
  - ''
  - "  p [1, 700, 132].map(&:normalize100)"
  - "  # Ruby 2.3: undefined method `normalize100' for 1"
  - "  # Ruby 2.4: => [1, 100, 100]"
  - ''
  - "  p 123.send(:normalize100)"
  - "  # Ruby 2.3: undefined method `normalize100' for 1"
  - "  # Ruby 2.4: => 100"
  - "  ```"
  kind: addition
  release: 2.4
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: Module
  title: "`refine` can refine modules, too"
  path:
  - Ruby 2.4
  - Language
  summary: Previously, only classes could've been refined.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12534'
    url: https://bugs.ruby-lang.org/issues/12534
    comments:
  docs:
  - "[Module#refine](https://ruby-doc.org/core-2.4.0/Module.html#method-i-refine)"
  code:
  - "  ```ruby"
  - "  module Tests"
  - "    refine Enumerable do # in 2.3: wrong argument type Module (expected Class)"
  - "      def tally"
  - "        each_with_object(Hash.new(0)) { |el, counter| counter[el] += 1}"
  - "      end"
  - "    end"
  - "  end"
  - ''
  - "  using Tests"
  - "  p [1, 3, 1, 2, 1, 3].tally"
  - "  # => {1=>3, 3=>2, 2=>1}"
  - "  ```"
  kind: addition
  release: 2.4
  section: Language Changes
- !ruby/object:Change
  level: 1
  scope: Module
  title: "`Module.used_modules`"
  path:
  - Ruby 2.4
  - Language
  summary: Returns an array of all modules used in the current scope.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #7418'
    url: https://bugs.ruby-lang.org/issues/7418
    comments:
  docs:
  - "[Module.used_modules](https://ruby-doc.org/core-2.4.0/Module.html#method-c-used_modules)"
  code:
  - "  ```ruby"
  - "  module First"
  - "    refine Enumerable do"
  - "    end"
  - "  end"
  - ''
  - "  module Second"
  - "    refine Object do"
  - "    end"
  - "  end"
  - ''
  - "  module NoRefinements"
  - "  end"
  - ''
  - "  p Module.used_modules # => []"
  - ''
  - "  using First"
  - "  using Second"
  - "  using NoRefinements"
  - ''
  - "  p Module.used_modules # => [First, Second] -- note NoRefinements absence"
  - "  ```"
  - "  Note that order of modules in array returned is not guaranteed."
  kind: addition
  release: 2.4
  section: Language Changes
- !ruby/object:Change
  level: 3
  scope: Warning
  title: "`Warning` module added"
  path:
  - Ruby 2.4
  - Core
  summary: New single-method module was introduced, meant to be overridden in order to control warnings issued by Ruby.
  reason: ''
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12299'
    url: https://bugs.ruby-lang.org/issues/12299
    comments:
  docs:
  - _(introduced in 2.4, but documented in 2.5)_ [Warning](https://ruby-doc.org/core-2.5.0/Warning.html)
  code:
  - "  ```ruby"
  - "  def Warning.warn(msg)"
  - '    puts ".warn called with: #{msg.inspect}"'
  - "  end"
  - ''
  - "  X = 1"
  - "  X = 2"
  - "  # Prints:"
  - '  #   .warn called with: "<location>: warning: already initialized constant X\n"'
  - '  #   .warn called with: "<location>: warning: previous definition of X was here\n"'
  - "  ```"
  kind: addition
  followup: "  * In Ruby 3.0, category support [was improved](3.0.html#warningwarn-category-keyword-argument)."
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: Object
  title: "`Object#clone(freeze: false)` option"
  path:
  - Ruby 2.4
  - Core
  summary: Allows to receive unfrozen copy of a frozen object.
  reason: 'Previously, there was no way to receive an unfrozen copy of the frozen object, including its singleton class: `.dup` returns unfrozen object, but doesn''t copies the singleton class, while `.clone` copies both (singleton class & frozen state).'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12300'
    url: https://bugs.ruby-lang.org/issues/12300
    comments:
  docs:
  - "[Object#clone](https://ruby-doc.org/core-2.4.0/Object.html#method-i-clone)"
  code:
  - "  ```ruby"
  - "  h = {breed: 'Dog', name: 'Rex'}"
  - "  class << h"
  - "    def bark"
  - '      puts "Bark! Bark!"'
  - "    end"
  - "  end"
  - "  h.freeze"
  - '  h.bark    # "Bark! Bark!"'
  - ''
  - "  d = h.dup"
  - "  d.frozen? # => false"
  - "  d.bark    # NoMethodError: undefined method `bark'"
  - ''
  - "  h2 = h.clone(freeze: false)"
  - "  h2[:age] = 8"
  - '  h2.bark   # "Bark! Bark!"'
  - "  ```"
  notes: 'Surprisingly enough, `unfrozen_object.clone(freeze: true)` doesn''t make object frozen. See [discussion](https://bugs.ruby-lang.org/issues/16175).'
  kind: addition
  followup: "  * `freeze:` [argument is passed](3.0.html#objectclone-passes-freeze-argument-to-initialize_clone) to `initialize_clone` so the object could properly freeze/unfreeze its internal data."
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 3
  scope: Comparable
  title: "`Comparable#clamp`"
  path:
  - Ruby 2.4
  - Core
  summary: Method to limit any comparable value to `min`—`max` range
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #10594'
    url: https://bugs.ruby-lang.org/issues/10594
    comments:
  docs:
  - "[Comparable#clamp](https://ruby-doc.org/core-2.4.0/Comparable.html#method-i-clamp)"
  code:
  - "  ```ruby"
  - "  123.clamp(0, 20)  # => 20"
  - "  -123.clamp(0, 20) # => 0"
  - "  18.clamp(0, 20)   # => 18"
  - "  ```"
  kind: addition
  followup: "  ```"
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 3
  scope: "[Fixnum,Bignum,Integer]"
  title: "`Fixnum` and `Bignum` are unified into `Integer`"
  path:
  - Ruby 2.4
  - Core
  - Numerics
  summary: 'Historically, Ruby had two subclasses of `Integer`: `Fixnum` for numbers that fit into [machine word](https://en.wikipedia.org/wiki/Word_%28computer_architecture%29), and `Bignum` for larger numbers. Since Ruby 2.4, there is only one `Integer`; `Fixnum` and `Bignum` are defined as (deprecated) constants synonymous to it.'
  reason: "`Fixnum`/`Bignum` separation always been an implementation detail, which led to confusion and sudden bugs, now this detail is hidden by interpreter."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12005'
    url: https://bugs.ruby-lang.org/issues/12005
    comments:
  docs:
  - "[Integer](https://ruby-doc.org/core-2.4.0/Integer.html)"
  code:
  - "  ```ruby"
  - "  # Before 2.4.0"
  - "  10.class        # => Fixnum"
  - "  (10**100).class # => Bignum"
  - ''
  - "  # 2.4+"
  - "  10.class        # => Integer"
  - "  (10**100).class # => Integer"
  - "  Fixnum"
  - "  # warning: constant ::Fixnum is deprecated"
  - "  # => Integer"
  - "  ```"
  kind: change
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: Numeric
  title: "`Numeric#finite?` and `#infinite?`"
  path:
  - Ruby 2.4
  - Core
  - Numerics
  reason: The methods were present in `Float` and `BigDecimal`, but not in other numeric classes, which made it harder to write code uniformly processing numbers which may be integer/float/infinite.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12039'
    url: https://bugs.ruby-lang.org/issues/12039
    comments:
  docs:
  - "[Numeric#infinite?](https://ruby-doc.org/core-2.4.0/Numeric.html#method-i-infinite-3F), [Numeric#finite?](https://ruby-doc.org/core-2.4.0/Numeric.html#method-i-finite-3F)"
  code:
  - "  ```ruby"
  - "  1.infinite?  # => nil"
  - "  1.finite?    # => true"
  - "  ```"
  notes: Notice that `infinite?` returns `nil`/`-1`/`1` (always `nil` for integers), not `true`/`false` as most of other predicate methods. While unusual, it is convenient for checking both for infinity and its sign (+Infinity/-Infinity), and can be treated effectively as `true`/`false` in boolean context.
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: Integer
  title: "`Integer#digits`"
  path:
  - Ruby 2.4
  - Core
  - Numerics
  summary: Returns an array of digits of the number.
  reason: Useful for calculating checksums.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12447'
    url: https://bugs.ruby-lang.org/issues/12447
    comments:
  docs:
  - "[Integer.html#digits](https://ruby-doc.org/core-2.4.0/Integer.html#method-i-digits)"
  code:
  - "  ```ruby"
  - "  12345.digits      # => [5, 4, 3, 2, 1] -- digits are returned in lowest-position-first order"
  - "  0b11010.digits(2) # => [0, 1, 0, 1, 1] -- optional base can be passed"
  - "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: Numeric
  title: "`ndigits` optional argument for rounding methods"
  path:
  - Ruby 2.4
  - Core
  - Numerics
  summary: Rounding methods of numerics (`ceil`/`floor` etc.) now accept an optional argument to specify how many digits to truncate to. If argument is positive, it means decimal digits, and if it is negative, means tens (the same behavior `#round` had since Ruby 1.9).
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12245'
    url: https://bugs.ruby-lang.org/issues/12245
    comments:
  docs:
  - "[Numeric#ceil](https://ruby-doc.org/core-2.4.0/Numeric.html#method-i-ceil), [Numeric#floor](https://ruby-doc.org/core-2.4.0/Numeric.html#method-i-floor), [Numeric#truncate](https://ruby-doc.org/core-2.4.0/Numeric.html#method-i-truncate) (in fact, `Integer` and `Float` classes are affected, because `Rational` had the same option long ago)."
  code:
  - "  ```ruby"
  - "  123.4567.ceil(2)  # => 123.46"
  - "  123.4567.ceil(0)  # => 124"
  - "  123.4567.ceil(-1) # => 130"
  - "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: "[Float,Integer,Rational]"
  title: "`half:` option for `#round` method"
  path:
  - Ruby 2.4
  - Core
  - Numerics
  summary: 'For numbers that are exact half, there are several options provided how to round them: up, down, or to the nearest even number. The default behavior kept unchanged (always up).'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #12958'
    url: https://bugs.ruby-lang.org/issues/12958
    comments: discussion of rounding behavior
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12953'
    url: https://bugs.ruby-lang.org/issues/12953
    comments: additional rounding options
  docs:
  - "(feature introduced in 2.4, but comprehensive docs were written in 2.5) [Integer#round](https://ruby-doc.org/core-2.5.0/Integer.html#method-i-round), [Float#round](https://ruby-doc.org/core-2.5.0/Float.html#method-i-round), [Rational#round](https://ruby-doc.org/core-2.5.0/Rational.html#method-i-round)"
  code:
  - "  ```ruby"
  - "  2.5.round # => 3"
  - "  2.5.round(half: :down) # => 2"
  - "  2.5.round(half: :even) # => 2"
  - "  3.5.round(half: :even) # => 4"
  - ''
  - "  25.round(-1, half: :down) # => 20"
  - ''
  - "  (13/2r).round(half: :down) # => 6"
  - "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 3
  scope: String
  title: Unicode case conversions
  path:
  - Ruby 2.4
  - Core
  - Strings, symbols and regexps
  summary: All case-conversion methods for `String` and `Symbol` support full Unicode since 2.4.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #10085'
    url: https://bugs.ruby-lang.org/issues/10085
    comments:
  docs:
  - "[String#downcase](https://ruby-doc.org/core-2.4.0/String.html#method-i-downcase), [String#upcase](https://ruby-doc.org/core-2.4.0/String.html#method-i-upcase), [String#capitalize](https://ruby-doc.org/core-2.4.0/String.html#method-i-capitalize), [String#swapcase](https://ruby-doc.org/core-2.4.0/String.html#method-i-swapcase), [Symbol#downcase](https://ruby-doc.org/core-2.4.0/Symbol.html#method-i-downcase), [Symbol#upcase](https://ruby-doc.org/core-2.4.0/Symbol.html#method-i-upcase), [Symbol#capitalize](https://ruby-doc.org/core-2.4.0/Symbol.html#method-i-capitalize), [Symbol#swapcase](https://ruby-doc.org/core-2.4.0/Symbol.html#method-i-swapcase),"
  code:
  - "  ```ruby"
  - '  ''Мамо, ДИВИСЬ, Unicode''.downcase          # => "мамо, дивись, unicode"'
  - '  ''Мамо, ДИВИСЬ, Unicode''.downcase(:ascii)  # => "Мамо, ДИВИСЬ, unicode"  -- ASCII-only processing (old behavior)'
  - ''
  - '  ''Straße''.downcase                         # => "straße"'
  - '  ''Straße''.downcase(:fold)                  # => "strasse"  -- Unicode case folding'
  - ''
  - '  ''TURKIC''.downcase                         # => "turkic"'
  - '  ''TURKIC''.downcase(:turkic)                # => "turkıc" -- Turkic-specific "dotless i" conversion'
  - "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: String
  title: "`String.new(capacity: size)`"
  path:
  - Ruby 2.4
  - Core
  - Strings, symbols and regexps
  summary: When string is created for usage as a mutable buffer for some large textual data, now expected size could be specified, thus optimizing memory allocations.
  reason: Ruby's mutable strings, when used for sequential building of some large text, cause constant reallocations of bigger and bigger memory buffer. By specifying expected capacity beforehand, one can avoid this reallocations.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12024'
    url: https://bugs.ruby-lang.org/issues/12024
    comments:
  docs:
  - "[String.new](https://ruby-doc.org/core-2.4.0/String.html#method-c-new)"
  code:
  - "  ```ruby"
  - "  s = String.new(capacity: 10_000_000)"
  - '  # => "" -- it is still just an empty string, but internal buffer is already allocated large'
  - "  ```"
  notes: "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: "[String,Symbol]"
  title: "`#casecmp?`"
  path:
  - Ruby 2.4
  - Core
  - Strings, symbols and regexps
  summary: In addition to long-existing case-insensitive comparison method `String#casecmp(other)` (returning `-1`, `0`, `1` like `<=>`), new boolean `String#casecmp?` and `Symbol#casecmp?` were added.
  discussion: []
  docs:
  - "[String#casecmp?](https://ruby-doc.org/core-2.4.0/String.html#method-i-casecmp-3F), [Symbol#casecmp?](https://ruby-doc.org/core-2.4.0/Symbol.html#method-i-casecmp-3F)"
  code:
  - "  ```ruby"
  - "  'test'.casecmp?('Test') # => true"
  - "  'test'.casecmp?('Tset') # => false"
  - "  'test'.casecmp?(:Test)  # TypeError: no implicit conversion of Symbol into String"
  - "  ```"
  notes: "  ```"
  kind: addition
  followup: "  ```"
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: String
  title: "`String#concat` and `#prepend` accept multiple arguments"
  path:
  - Ruby 2.4
  - Core
  - Strings, symbols and regexps
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12333'
    url: https://bugs.ruby-lang.org/issues/12333
    comments:
  docs:
  - "[String#concat](https://ruby-doc.org/core-2.4.0/String.html#method-i-concat), [String#prepend](https://ruby-doc.org/core-2.4.0/String.html#method-i-prepend)"
  code:
  - "  ```ruby"
  - '  "Hello, ".concat(''Judy'', '', '', ''John'', '' and '', ''Paul'')'
  - '  # => "Hello, Judy, John and Paul"'
  - "  'file.mp3'.prepend('dir1/', 'dir2/')"
  - '  # => "dir1/dir2/file.mp3"'
  - "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: String
  title: "`String#unpack1`"
  path:
  - Ruby 2.4
  - Core
  - Strings, symbols and regexps
  summary: Just a shortcut for `unpack(...).first`
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12752'
    url: https://bugs.ruby-lang.org/issues/12752
    comments:
  docs:
  - "[String#unpack1](https://ruby-doc.org/core-2.4.0/String.html#method-i-unpack1)"
  code:
  - "  ```ruby"
  - "  # Previously, you only could've get an Array"
  - '  "\x80".unpack(''C'')  # => [128]'
  - ''
  - "  # Since 2.4"
  - '  "\x80".unpack1(''C'') # => 128'
  - "  ```"
  kind: addition
  followup: In Ruby 3.1, [a second argument was added](3.1.html#stringunpack-and-unpack1-offset-argument) to `unpack1` (and `unpack`) allowing to unpack values from the middle of the string.
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: "[String,Symbol,Regexp]"
  title: "`#match?` method for `String`, `Symbol`, and `Regexp`"
  path:
  - Ruby 2.4
  - Core
  - Strings, symbols and regexps
  summary: New boolean methods for checking if some pattern matches some string/symbol.
  reason: In the (frequent) situation when only "matches or not" is important, boolean `match?` is more readable; also, it is more effective because doesn't set global variables (in case of `Regexp#match?`) and doesn't construct `MatchData`.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #8110'
    url: https://bugs.ruby-lang.org/issues/8110
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12898'
    url: https://bugs.ruby-lang.org/issues/12898
    comments:
  docs:
  - "[Regexp#match?](https://ruby-doc.org/core-2.4.0/Regexp.html#method-i-match-3F), [String#match?](https://ruby-doc.org/core-2.4.0/String.html#method-i-match-3F), [Symbol#match?](https://ruby-doc.org/core-2.4.0/Symbol.html#method-i-match-3F)"
  code:
  - "  ```ruby"
  - "  # before 2.4"
  - "  if username =~ /^Admin/"
  - ''
  - "  # Ruby 2.4:"
  - "  if username.match?(/^Admin/)"
  - ''
  - "  # Also supports second parameter: position to search matches from:"
  - "  if username.match?(/:admin/, 3)"
  - "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: MatchData
  title: "`MatchData`: better support for named captures"
  path:
  - Ruby 2.4
  - Core
  - Strings, symbols and regexps
  summary: "`MatchData#named_captures` returns the hash of `{capture_name => captured string}`; `MatchData#values_at` supports named captures."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11999'
    url: https://bugs.ruby-lang.org/issues/11999
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #9179'
    url: https://bugs.ruby-lang.org/issues/9179
    comments:
  docs:
  - "[MatchData#named_captures](https://ruby-doc.org/core-2.4.0/MatchData.html#method-i-named_captures), [MatchData#values_at](https://ruby-doc.org/core-2.4.0/MatchData.html#method-i-values_at)"
  code:
  - "  ```ruby"
  - "  m = 'Serhii Zhadan'.match(/^((?<first>.+?) (?<last>.+?))$/)"
  - '  # => #<MatchData "Serhii Zhadan" first:"Serhii" last:"Zhadan">'
  - "  m.named_captures"
  - '  # => {"first"=>"Serhii", "last"=>"Zhadan"}'
  - "  m.values_at(:first, :last) # symbols are supported, too"
  - '  # => ["Serhii", "Zhadan"]'
  - "  m.values_at(0, :first, 2) # as well as a mix of named and numbered"
  - '  # => ["Serhii Zhadan", "Serhii", "Zhadan"]'
  - "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: Enumerable
  title: "`Enumerable#chunk` without a block returns an `Enumerator`"
  path:
  - Ruby 2.4
  - Core
  - Collections
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #2172'
    url: https://bugs.ruby-lang.org/issues/2172
    comments:
  docs:
  - "[Enumerable#chunk](https://ruby-doc.org/core-2.4.0/Enumerable.html#method-i-chunk)"
  code:
  - "  ```ruby"
  - "  ('a'..'k').chunk"
  - '  # => #<Enumerator: "a".."k":chunk>'
  - ''
  - "  # Example of usage:"
  - "  ('a'..'k').chunk.with_index { |e, i| (i % 3).zero? }.to_a"
  - "  # => ["
  - '  #  [true, ["a"]],'
  - '  #  [false, ["b", "c"]],'
  - '  #  [true, ["d"]],'
  - '  #  [false, ["e", "f"]], ...'
  - "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: Enumerable
  title: "`#sum`"
  path:
  - Ruby 2.4
  - Core
  - Collections
  summary: "`Enumerable#sum` was added as a core alternative of too common `reduce(:+)`. Also, provides more precise summation of floats by internally using Kahan's summation algorithm."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12217'
    url: https://bugs.ruby-lang.org/issues/12217
    comments:
  docs:
  - "[Enumerable#sum](https://ruby-doc.org/core-2.4.0/Enumerable.html#method-i-sum), [Array#sum](https://ruby-doc.org/core-2.4.0/Array.html#method-i-sum)"
  code:
  - "  ```ruby"
  - "  (1..5).sum # => 15"
  - "  (1..5).sum { |x| x ** 2} # => 55"
  - ''
  - "  # Unlike reduce(:+), initial value is implicitly 0, so..."
  - "  [].reduce(:+)  # => nil"
  - "  [].sum         # => 0"
  - ''
  - '  (''a''..''f'').reduce(:+) # => "abcdef"'
  - "  ('a'..'f').sum        # TypeError: String can't be coerced into Integer"
  - '  (''a''..''f'').sum('''')    # => "abcdef"'
  - "  ```"
  notes: "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: Enumerable
  title: "`#uniq`"
  path:
  - Ruby 2.4
  - Core
  - Collections
  summary: "`#uniq` method, previously present only in `Array`, now available for `Enumerable` and `Enumerator::Lazy`"
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11090'
    url: https://bugs.ruby-lang.org/issues/11090
    comments:
  docs:
  - "[Enumerable#iniq](https://ruby-doc.org/core-2.4.0/Enumerable.html#method-i-uniq), [Enumerator::Lazy#uniq](https://ruby-doc.org/core-2.4.0/Enumerator/Lazy.html#method-i-uniq)"
  code:
  - "  ```ruby"
  - "  {a: 1, b: 2, c: 1, d: 2, e: 1}.uniq { |k, v| v }"
  - "  #  => [[:a, 1], [:b, 2]]"
  - ''
  - "  File.open('very_large_log.log').each_line.lazy.uniq { |ln| ln.scan(/Date: (\\S+):/) }.take(10)"
  - "  # => first 10 of first-line-of-day"
  - "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: Array
  title: "`Array#max` and `#min`"
  path:
  - Ruby 2.4
  - Core
  - Collections
  summary: "`#max` and `#min` methods of `Enumerable` reimplemented in `Array` for speed."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12172'
    url: https://bugs.ruby-lang.org/issues/12172
    comments:
  docs:
  - "[Array#max](https://ruby-doc.org/core-2.4.0/Array.html#method-i-max), [Array#min](https://ruby-doc.org/core-2.4.0/Array.html#method-i-max)"
  notes: Beware that custom reimplementation of `Enumerable#max` and `#min` are now ignored for arrays; and that `Array`'s implementation doesn't use `#each` method.
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: Array
  title: "`Array#concat` accepts multiple arguments"
  path:
  - Ruby 2.4
  - Core
  - Collections
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12333'
    url: https://bugs.ruby-lang.org/issues/12333
    comments:
  docs:
  - "[Array#concat](https://ruby-doc.org/core-2.4.0/Array.html#method-i-concat)"
  code:
  - "  ```ruby"
  - "  a = [1, 2]"
  - "  a.concat([3, 4], [5, 6]) # => [1, 2, 3, 4, 5, 6]"
  - "  a # => [1, 2, 3, 4, 5, 6]"
  - "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: Array
  title: "`Array#pack` gains `buffer:` keyword argument"
  path:
  - Ruby 2.4
  - Core
  - Collections
  summary: When provided with optional `buffer:` keyword argument, `Array#pack` uses it as a receiver of data.
  reason: a) pre-allocate the memory for big packed data and b) use the same buffer as a target for several chunks of data
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12754'
    url: https://bugs.ruby-lang.org/issues/12754
    comments:
  docs:
  - "[Array#pack](https://ruby-doc.org/core-2.4.0/Array.html#method-i-pack)"
  code:
  - "  ```ruby"
  - "  # Old way"
  - '  [82, 117, 98, 121].pack(''C*'')        # => "Ruby"'
  - '  [32, 105, 115, 32, 99, 111, 111, 108, 33].pack(''C*'') # => " is cool!"'
  - ''
  - "  # New way"
  - "  buffer = String.new(capacity: 30)"
  - "  [82, 117, 98, 121].pack('C*', buffer: buffer)"
  - '  # => "Ruby"'
  - '  buffer # => "Ruby"'
  - "  [32, 105, 115, 32, 99, 111, 111, 108, 33].pack('@4C*', buffer: buffer)"
  - '  # => "Ruby is cool!"'
  - '  buffer # => "Ruby is cool!"'
  - ''
  - "  # Note that if the buffer already has content, the unpacked data is appended to it:"
  - "  [32, 73, 115, 32, 105, 116, 63].pack('C*', buffer: buffer)"
  - '  # => "Ruby is cool! Is it?"'
  - ''
  - "  # It can be rewritten with explicit offset 0 directive:"
  - "  [32, 73, 115, 32, 105, 116, 63].pack('@0C*', buffer: buffer)"
  - '  # => " Is it?"'
  - "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: Hash
  title: "`Hash#compact` and `#compact!`"
  path:
  - Ruby 2.4
  - Core
  - Collections
  summary: Removes key-value pairs when value is `nil`.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11818'
    url: https://bugs.ruby-lang.org/issues/11818
    comments:
  docs:
  - "[Hash#compact](https://ruby-doc.org/core-2.4.0/Hash.html#method-i-compact), [Hash#compact!](https://ruby-doc.org/core-2.4.0/Hash.html#method-i-compact-21)"
  code:
  - "  ```ruby"
  - "  data = {name: 'John', age: 34, occupation: nil}"
  - '  data.compact # => {:name=>"John", :age=>34}'
  - '  data # => {:name=>"John", :age=>34, :occupation=>nil} -- was not affected'
  - '  data.compact! # => {:name=>"John", :age=>34}'
  - '  data # => {:name=>"John", :age=>34}'
  - "  data.compact! # => nil -- if there were nothing to remove"
  - "  ```"
  notes: "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: Hash
  title: "`Hash#transform_values` and `#transform_values!`"
  path:
  - Ruby 2.4
  - Core
  - Collections
  summary: Accepts block to transform each value of the hash.
  reason: "  ```"
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12512'
    url: https://bugs.ruby-lang.org/issues/12512
    comments:
  docs:
  - "[Hash#transform_values](https://ruby-doc.org/core-2.4.0/Hash.html#method-i-transform_values), [Hash#transform_values!](https://ruby-doc.org/core-2.4.0/Hash.html#method-i-transform_values-21)"
  code:
  - "  ```ruby"
  - "  h = {x: '10', y: '12', z: '54'}"
  - "  h.transform_values(&:to_i) # => {:x=>10, :y=>12, :z=>54}"
  - "  h.transform_values!(&:to_i) # => {:x=>10, :y=>12, :z=>54}"
  - "  h # => {:x=>10, :y=>12, :z=>54}"
  - "  h.transform_values!(&:to_i) # => {:x=>10, :y=>12, :z=>54} -- unlike #compact!, always returns self"
  - ''
  - "  # Without block, returns Enumerator"
  - "  h.transform_values"
  - '  # => #<Enumerator: {:x=>"10", :y=>"12", :z=>"54"}:transform_values>'
  - ''
  - "  # Can be useful this way:"
  - "  h = {manager: 'Jane', reporter: 'John', qa: 'Jane', developer: 'Abraham'}"
  - '  h.transform_values.with_index(1) { |v, i| "#{i}: #{v}" }'
  - '  # => {:manager=>"1: Jane", :reporter=>"2: John", :qa=>"3: Jane", :developer=>"4: Abraham"}'
  - "  ```"
  kind: addition
  followup: Ruby 2.5 also [added](2.5.html#hashtransform_keys-and-transform_keys) `#transform_keys` and `#transform_keys!`
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: "[String,IO,StringIO]"
  title: "`chomp:` option for string splitting"
  path:
  - Ruby 2.4
  - Core
  - Filesystem and IO
  summary: Affects `String#each_line`, `String#lines`, `IO#gets`, `IO#readline`, `IO#readlines`, `IO.foreach`, `IO.readlines`, `StringIO#gets`, `StringIO#each_line`, and `StringIO#readlines`.
  reason: Before this change, all line-by-line operations should've included `chomp` as a separate operations when line ending is not needed, which turned out to be most of the cases.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12553'
    url: https://bugs.ruby-lang.org/issues/12553
    comments:
  docs:
  - "(feature introduced in 2.4, but comprehensive docs were written in 2.5-2.6):"
  - "  * [String#each_line](https://ruby-doc.org/core-2.5.0/String.html#method-i-each_line), [String#lines](https://ruby-doc.org/core-2.6/String.html#method-i-lines),"
  - "  * [IO#gets](https://ruby-doc.org/core-2.5.0/IO.html#method-i-gets), [IO#readline](https://ruby-doc.org/core-2.5.0/IO.html#method-i-readline), [IO#readlines](https://ruby-doc.org/core-2.5.0/IO.html#method-i-readline), [IO.foreach](https://ruby-doc.org/core-2.5.0/IO.html#method-c-foreach), [IO.readlines](https://ruby-doc.org/core-2.5.0/IO.html#method-c-readlines),"
  - "  * _Standard library: methods of the class affected, but no documentation for the change:_ [StringIO#gets](https://ruby-doc.org/stdlib-2.4.0/libdoc/stringio/rdoc/StringIO.html#method-i-gets), [StringIO#each_line](https://ruby-doc.org/stdlib-2.4.0/libdoc/stringio/rdoc/StringIO.html#method-i-each_line), [StringIO#readlines](https://ruby-doc.org/stdlib-2.4.0/libdoc/stringio/rdoc/StringIO.html#method-i-readlines)"
  code:
  - "  ```ruby"
  - "  # The effect is the same with String, IO and StringIO, so we are demonstrating just one example:"
  - "  require 'stringio'"
  - '  io = StringIO.new("foo\nbar\nbaz\n")'
  - '  io.gets              # => "foo\n"'
  - '  io.gets(chomp: true) # => "bar"'
  - "  ```"
  notes: "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: "[Dir,File,Pathname]"
  title: "`#empty?` method for filesystem objects"
  path:
  - Ruby 2.4
  - Core
  - Filesystem and IO
  summary: New method `empty?` was introduced into `Dir`, `File`, and `Pathname` classes to check if the file/directory is empty.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #10121'
    url: https://bugs.ruby-lang.org/issues/10121
    comments: "`Dir`"
  - !ruby/object:Change::RubyIssue
    label: 'Feature #9969'
    url: https://bugs.ruby-lang.org/issues/9969
    comments: "`File`"
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12596'
    url: https://bugs.ruby-lang.org/issues/12596
    comments: "`Pathname`"
  docs:
  - "[Dir#empty?](https://ruby-doc.org/core-2.4.0/Dir.html#method-c-empty-3F), [File#empty?](https://ruby-doc.org/core-2.4.0/File.html#method-c-empty-3F), _(stdlib)_ [Pathname#empty?](https://ruby-doc.org/stdlib-2.4.0/libdoc/pathname/rdoc/Pathname.html#method-i-empty-3F)"
  code:
  - "  ```ruby"
  - "  Dir.empty?('emptydir')    # => true"
  - "  Dir.empty?('nonemptydir') # => false"
  - "  Dir.empty?('nonexistent') # Errno::ENOENT (No such file or directory @ rb_dir_s_empty_p - nonexistent)"
  - "  Dir.empty?('file')        # => false"
  - ''
  - "  File.empty?('emptyfile')    # => true"
  - "  File.empty?('nonemptyfile') # => false"
  - "  File.empty?('nonexistent')  # => false -- unlike Dir.empty?"
  - "  File.empty?('dir')          # => false"
  - ''
  - "  require 'pathname'"
  - "  Pathname('emptydir').empty?    # => true"
  - "  Pathname('emptyfile').empty?   # => true"
  - "  Pathname('nonexistent').empty? # => false"
  - "  Pathname('nonempty').empty?    # => false"
  - "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: Thread
  title: "`Thread#report_on_exception` and `Thread.report_on_exception`"
  path:
  - Ruby 2.4
  - Core
  summary: 'Global and thread-local boolean flag to set what should the thread do when ended with exception: die silently (default, old behavior) or print the exception and backtrace to `$stderr`.'
  reason: Threads silently dying without any indication could be a lot of confusion, and before this feature top-level exception reporting for each thread should've been implemented manually.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #6647'
    url: https://bugs.ruby-lang.org/issues/6647
    comments:
  docs:
  - "[Thread.report_on_exception](https://ruby-doc.org/core-2.4.0/Thread.html#method-c-report_on_exception), [Thread.report_on_exception=](https://ruby-doc.org/core-2.4.0/Thread.html#method-c-report_on_exception-3D), [Thread#report_on_exception](https://ruby-doc.org/core-2.4.0/Thread.html#method-i-report_on_exception), [Thread#report_on_exception](https://ruby-doc.org/core-2.4.0/Thread.html#method-i-report_on_exception-3D)"
  code:
  - "  ```ruby"
  - "  Thread.new { puts 1 / 0 }"
  - "  sleep(1)"
  - "  # => nothing happens, thread is dead"
  - "  Thread.report_on_exception = true"
  - "  Thread.new { puts 1 / 0 }"
  - "  sleep(1)"
  - "  # #<Thread:0x0055b070475fb0> terminated with exception:"
  - "  # in `/': divided by 0 (ZeroDivisionError)"
  - ''
  - "  # Or instance-level method:"
  - "  t = Thread.new { sleep(1); puts 1 / 0 }"
  - "  t.report_on_exception = false # silence it again"
  - "  sleep(1)"
  - "  # => Thread dies in a sad silence."
  - "  ```"
  kind: addition
  followup: Since 2.5, `Thread.report_on_exception` is `true` by default.
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: TracePoint
  title: "`TracePoint#callee_id`"
  path:
  - Ruby 2.4
  - Core
  summary: Returns an actual name of the method being called, even if aliased.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12747'
    url: https://bugs.ruby-lang.org/issues/12747
    comments:
  docs:
  - "[TracePoint#callee_id](https://ruby-doc.org/core-2.4.0/TracePoint.html#method-i-callee_id)"
  code:
  - "  ```ruby"
  - "  tp = TracePoint.new(:call) { |point| p [point.method_id, point.callee_id]}"
  - ''
  - "  def real"
  - "  end"
  - ''
  - "  alias aliased real"
  - ''
  - "  tp.enable { aliased } # prints method id and callee id: [:real, :aliased]"
  - "  ```"
  kind: addition
  release: 2.4
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: "(global)"
  title: Top-level constant look-up is removed.
  path:
  - Ruby 2.5
  - Language
  summary: "`Foo::Bar` doesn't fallback to `::Bar` anymore, when `Foo::Bar` is not found"
  reason: The behavior was considered to be bringing more problems and bugs than benefits for a long time, and always issued a warning.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11547'
    url: https://bugs.ruby-lang.org/issues/11547
    comments:
  code:
  - "  ```ruby"
  - "  Hash::String"
  - "  # Ruby 2.4:"
  - "  #   (irb):1: warning: toplevel constant String referenced by Hash::String"
  - "  #    => String"
  - "  # Ruby 2.5:"
  - "  #   NameError (uninitialized constant Hash::String)"
  - "  ```"
  kind: change
  release: 2.5
  section: Language Changes
- !ruby/object:Change
  level: 3
  scope: "(global)"
  title: "`rescue`/`else`/`ensure` are allowed inside blocks"
  path:
  - Ruby 2.5
  - Language
  reason: for consistency with other `something` / `end` constructs (class and method bodies), which allowed `rescue` without wrapping in additional `begin`/`end`
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12906'
    url: https://bugs.ruby-lang.org/issues/12906
    comments:
  code:
  - "  ```ruby"
  - "  (0..5).map do |val|"
  - "    puts 100 / val"
  - "  rescue ZeroDivisionError"
  - "    puts '<undividable>'"
  - "  end"
  - "  # prints:"
  - "  #  <undividable>"
  - "  #  100"
  - "  #  50"
  - "  #  33"
  - "  #  25"
  - "  #  20"
  - "  ```"
  notes: The syntax is not available for `{}` blocks, even multiline ones.
  kind: change
  release: 2.5
  section: Language Changes
- !ruby/object:Change
  level: 1
  scope: "(global)"
  title: Refinements work in string interpolations
  path:
  - Ruby 2.5
  - Language
  reason: Step in a consistent effort to make refinements more useful and consistent, working everywhere regular methods work
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13812'
    url: https://bugs.ruby-lang.org/issues/13812
    comments: Japanese
  code:
  - "  ```ruby"
  - "  module Ref"
  - "    refine Time do"
  - "      def to_s"
  - '        "#{hour}:#{min} at #{month}/#{day}/#{year}"'
  - "      end"
  - "    end"
  - "  end"
  - ''
  - "  using Ref"
  - ''
  - '  puts "Now is #{Time.now}"'
  - '  # Ruby 2.4: "Now is 2019-05-27 17:49:27 +0300" -- default to_s'
  - '  # Ruby 2.5: "Now is 17:51 at 5/27/2019" -- refined to_s'
  - "  ```"
  kind: change
  followup: Ruby 2.6 added [more features](https://rubyreferences.github.io/rubychanges/2.6.html#refinements-improved-visibility) making refinements available in various contexts.
  release: 2.5
  section: Language Changes
- !ruby/object:Change
  level: 3
  scope: Object
  title: "`Object#yield_self`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - "`Kernel`"
  reason: Chaining singular value processing the same way `Enumerable` allows chaining of sequence processing methods.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #6721'
    url: https://bugs.ruby-lang.org/issues/6721
    comments:
  docs:
  - "[Object#yield_self](https://ruby-doc.org/core-2.5.0/Object.html#method-i-yield_self)"
  code:
  - "  ```ruby"
  - "  [BASE_URL, path].join('/')"
  - "      .yield_self { |url| open(url).read }"
  - "      .yield_self { |body| JSON.parse(body, symbolyze_names: true) }"
  - "      .dig(:data, :items)"
  - "      .yield_self { |items| File.write('response.yml', items.to_yaml) }"
  - "  ```"
  kind: addition
  followup: Ruby 2.6 [renamed (aliased)](https://rubyreferences.github.io/rubychanges/2.6.html#then-as-an-alias-for-yield_self) the unfortunate method name to `#then`
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: Kernel
  title: "`#pp`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - "`Kernel`"
  summary: "`pp` standard library is now automatically required on the first call to `Kernel#pp`"
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14123'
    url: https://bugs.ruby-lang.org/issues/14123
    comments:
  kind: change
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: Kernel
  title: "`#warn` gains `uplevel:` keyword argument"
  path:
  - Ruby 2.5
  - Core classes and modules
  - "`Kernel`"
  summary: 'When `uplevel: N` provided to `Kernel#warn`, the warning message includes the file and line of the call `N` steps up in the callstack.'
  reason: It is sometimes hard to understand exactly what code caused a warning. This feature helps identify the offending caller.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12882'
    url: https://bugs.ruby-lang.org/issues/12882
    comments:
  docs:
  - "[Kernel#warn](https://ruby-doc.org/core-2.6/Kernel.html#method-i-warn) (it became somewhat documented at Ruby 2.6, but the feature itself has been available since 2.5)"
  code:
  - "  ```ruby"
  - "  def that_bad_function"
  - "    warn('do not call me')"
  - "    warn('I am talking to YOU', uplevel: 1)"
  - "    warn('and tell all your clients!', uplevel: 2)"
  - "  end"
  - ''
  - "  def try_using_it"
  - "    that_bad_function # line 8"
  - "  end"
  - ''
  - "  try_using_it # line 11"
  - ''
  - "  # Prints:"
  - "  #  do not call me"
  - "  #  test.rb:8: warning: I am talking to YOU"
  - "  #  test.rb:11: warning: and tell all your clients!"
  - "  ```"
  kind: addition
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: Kernel
  title: "`Kernel#warn` now calls `Warning.warn`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - "`Kernel`"
  summary: Ruby 2.4 introduced redefinable `Warning.warn` method, which allowed to control how warnings are handled. But `warn` method wasn't calling it, so initially only warnings issued from C code could've been handled. 2.5 fixes that. <small>(Was not mentioned in NEWS-2.5.0)</small>
  discussion: []
  docs:
  - "—"
  code:
  - "  ```ruby"
  - "  def Warning.warn(msg)"
  - '    puts ".warn called with: #{msg.inspect}"'
  - "  end"
  - ''
  - "  warn 'foo', 'bar'"
  - "  # Ruby 2.4 prints:"
  - "  #  foo"
  - "  #  bar"
  - "  # Ruby 2.5 prints:"
  - '  #  .warn called with: "foo\nbar\n"'
  - "  ```"
  notes: '`Kernel#warn` accepts multiple arguments, and joins them with `"\n"` to pass to `Warning#warn` as a single string.'
  kind: change
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: Module
  title: "`Module` methods for defining methods and accessors became public"
  path:
  - Ruby 2.5
  - Core classes and modules
  summary: Applies to `#attr`, `#attr_accessor`, `#attr_reader` `#attr_writer`, `#define_method`, `#alias_method`, `#undef_method`, `#remove_method`.
  reason: The methods affected are frequently used in metaprogramming, which prior to 2.5 required reopening classes/modules or using `send`
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14132'
    url: https://bugs.ruby-lang.org/issues/14132
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14133'
    url: https://bugs.ruby-lang.org/issues/14133
    comments:
  code:
  - "  ```ruby"
  - "  Array.define_method(:half_size) { size.to_f / 2 }"
  - "  # => :half_size"
  - "  [1, 2, 3].half_size"
  - "  # => 1.5"
  - "  ```"
  kind: change
  affects:
  - "`#attr`, `#attr_accessor`, `#attr_reader` `#attr_writer`, `#define_method`, `#alias_method`, `#undef_method`, `#remove_method`."
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: Method
  title: "`Method#===` added"
  path:
  - Ruby 2.5
  - Core classes and modules
  reason: "`Method` object can be used in a lot of contexts where the `Proc` can be used, and this one context (case equality) was lacking."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14142'
    url: https://bugs.ruby-lang.org/issues/14142
    comments:
  docs:
  - "[Method#===](https://ruby-doc.org/core-2.5.0/Method.html#method-i-3D-3D-3D)"
  code:
  - "  ```ruby"
  - "  require 'prime'"
  - ''
  - "  case 137"
  - "  when Prime.method(:prime?)"
  - "    puts 'prime'"
  - "  else"
  - "    puts 'not!'"
  - "  end"
  - "  # prints 'prime' in Ruby 2.5+, 'not' in Ruby 2.4"
  - "  ```"
  kind: addition
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: Integer
  title: "`Integer#pow` added to perform modular exponentiation"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Integer
  summary: "`a.pow(b, m)` is the same as `(a**b) % m` while avoiding huge temporary values"
  reason: "[Modular exponentiation](https://en.wikipedia.org/wiki/Modular_exponentiation) is a useful concept, especially in cryptography, and can be vastly ineffective if performed as to sequential operations."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12508'
    url: https://bugs.ruby-lang.org/issues/12508
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11003'
    url: https://bugs.ruby-lang.org/issues/11003
    comments:
  docs:
  - "[Integer#pow](https://ruby-doc.org/core-2.5.0/Integer.html#method-i-pow)"
  code:
  - "  ```ruby"
  - "  2120078484650058507891187874713297895455."
  - "    pow(5478118174010360425845660566650432540723,"
  - "        5263488859030795548286226023720904036518)"
  - "  # => 4481650795473624846969600733813414725093"
  - "  ```"
  kind: addition
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: Integer
  title: "`#allbits?`, `#anybits?`, `#nobits?`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Integer
  summary: New methods inspect which bits are set for an integer within a masked range.
  reason: 'It is noted that testing values against bitmasks in Ruby is _a bit_ non-atomic: first, calculate `value & flags`, and then compare result with zero (no common flags / at least one common flag), or original value (all common flags); the new methods should make the tests clearer'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12753'
    url: https://bugs.ruby-lang.org/issues/12753
    comments:
  docs:
  - "[Integer#allbits?](https://ruby-doc.org/core-2.5.0/Integer.html#method-i-allbits-3F), [Integer#anybits?](https://ruby-doc.org/core-2.5.0/Integer.html#method-i-allbits-3F), [Integer#nobits?](https://ruby-doc.org/core-2.5.0/Integer.html#method-i-allbits-3F)"
  code:
  - "  ```ruby"
  - "  CARNIVOROUS = 0b001"
  - "  MAMMAL = 0b010"
  - "  TERRASTRIAL = 0b100"
  - "  lizard = 0b101"
  - "  lizard.allbits?(CARNIVOROUS | MAMMAL) # => false"
  - "  lizard.anybits?(CARNIVOROUS | MAMMAL) # => true"
  - "  lizard.nobits?(CARNIVOROUS | MAMMAL)  # => false"
  - "  ```"
  kind: addition
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 1
  scope: Integer
  title: "`Integer.sqrt` added"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Integer
  reason: "`Math.sqrt(x).to_i` for large numbers loses precision, so `Integer.sqrt` implements effective and precise _integer_ square root algorithm"
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13219'
    url: https://bugs.ruby-lang.org/issues/13219
    comments:
  docs:
  - "[Integer.sqrt](https://ruby-doc.org/core-2.5.0/Integer.html#method-c-sqrt)"
  code:
  - "  ```ruby"
  - "  Integer.sqrt(10**33)"
  - "  # => 31622776601683793"
  - "  Integer.sqrt(10**33)**2"
  - "  # => 999999999999999979762122758866849"
  - "  Math.sqrt(10**33).to_i"
  - "  # => 31622776601683792"
  - "  Math.sqrt(10**33).to_i**2"
  - "  # => 999999999999999916516569555499264"
  - "  ```"
  kind: addition
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: String
  title: "`String#delete_prefix`, `#delete_prefix!`, `#delete_suffix`, `#delete_suffix!`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - "`String`"
  summary: Methods to remove leading or trailing string content
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12694'
    url: https://bugs.ruby-lang.org/issues/12694
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13665'
    url: https://bugs.ruby-lang.org/issues/13665
    comments:
  docs:
  - "[String#delete_prefix](https://ruby-doc.org/core-2.5.0/String.html#method-i-delete_prefix), [String#delete_suffix](https://ruby-doc.org/core-2.5.0/String.html#method-i-delete_suffix)"
  code:
  - "  ```ruby"
  - "  'foo'.delete_prefix('fo') # => 'o'"
  - "  'bar'.delete_suffix('r') # => 'ba'"
  - ''
  - "  # Notice that bang-meethods return nil if they've deleted nothing:"
  - "  'foo'.delete_prefix!('ba') # => nil"
  - "  # This allows to use the methods in ifs:"
  - '  descr = RUBY_DESCRIPTION.dup # => "ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]"'
  - "  if descr.delete_prefix!('ruby ')"
  - '    puts "We are running on MRI #{descr}" # => "We are running on MRI 2.5.1p57 ...."'
  - "  end"
  - "  ```"
  kind: addition
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: String
  title: "`#each_grapheme_cluster` and `#grapheme_clusters`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - "`String`"
  reason: In modern Unicode, lots of on-screen characters (graphemes) are represented by several characters, which are logically combined into "grapheme clusters"; now Ruby has a proper way to work with those concepts.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13780'
    url: https://bugs.ruby-lang.org/issues/13780
    comments:
  docs:
  - "[String#each_grapheme_cluster](https://ruby-doc.org/core-2.5.0/String.html#method-i-each_grapheme_cluster), [String#grapheme_clusters](https://ruby-doc.org/core-2.5.0/String.html#method-i-grapheme_clusters)"
  code:
  - "  ```ruby"
  - "  \"\U0001F3F3️‍\U0001F308\".length"
  - "  # => 4"
  - "  \"\U0001F3F3️‍\U0001F308\".chars"
  - "  # => [\"\U0001F3F3\", \"️\", \"‍\", \"\U0001F308\"]"
  - "  \"\U0001F3F3️‍\U0001F308\".grapheme_clusters"
  - "  # => [\"\U0001F3F3️‍\U0001F308\"]"
  - "  \"\U0001F3F3️‍\U0001F308\".each_grapheme_cluster.map { |s| CGI.escape(s) }"
  - '  # => ["%F0%9F%8F%B3%EF%B8%8F%E2%80%8D%F0%9F%8C%88"]'
  - "  ```"
  kind: addition
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#undump`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - "`String`"
  summary: The inverse of [String#dump](https://ruby-doc.org/core-2.5.0/String.html#method-i-dump) which escapes all non-printable and special characters.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12275'
    url: https://bugs.ruby-lang.org/issues/12275
    comments:
  docs:
  - "[String#undump](https://ruby-doc.org/core-2.5.0/String.html#method-i-undump)"
  code:
  - "  ```ruby"
  - "  p <<~STR"
  - '    This is "fine".'
  - "    Or is it?"
  - "  STR"
  - '  # Prints "This is \"fine\".\nOr is it?\n"'
  - "  # ^ Now, this is dumped string, including quotes around."
  - '  # How to get back to "nice" string?'
  - '  puts ''"This is \"fine\".\nOr is it?\n"''.undump'
  - "  # Prints"
  - '  #  This is "fine".'
  - "  #  Or is it?"
  - "  ```"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#casecmp` and `#casecmp?` return `nil` for non-string arguments"
  path:
  - Ruby 2.5
  - Core classes and modules
  - "`String`"
  summary: Previously, those methods raised `TypeError` on arguments that can't be coerced to `String`, now they just return `nil`
  reason: 'The behavior made consistent with `==` and `<=>`, as the methods are case-agnostic versions of those operators: when you compare incomparable things, you just get no result at all.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13312'
    url: https://bugs.ruby-lang.org/issues/13312
    comments:
  docs:
  - "[String#casecmp](https://ruby-doc.org/core-2.5.0/String.html#method-i-casecmp), [String#casecmp?](https://ruby-doc.org/core-2.5.0/String.html#method-i-casecmp-3F)"
  code:
  - "  ```ruby"
  - '  "Foo".casecmp?(:foo)'
  - "  # Ruby 2.4: TypeError: no implicit conversion of Symbol into String"
  - "  # Ruby 2.5: nil"
  - "  ```"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#start_with?` accepts a regexp"
  path:
  - Ruby 2.5
  - Core classes and modules
  - "`String`"
  summary: "`string.start_with?(/foo/)` is an equivalent of `string.match?(/\\Afoo/)`"
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13712'
    url: https://bugs.ruby-lang.org/issues/13712
    comments:
  docs:
  - "[String#start_with?](https://ruby-doc.org/core-2.6/String.html#method-i-start_with-3F) (introduced in 2.5, but documented in 2.6)"
  notes: ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`String#-@` optimized for memory preserving"
  path:
  - Ruby 2.5
  - Core classes and modules
  - "`String`"
  summary: "`String#-` (freezing the string) is optimized to deduplicate frozen object"
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13077'
    url: https://bugs.ruby-lang.org/issues/13077
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13295'
    url: https://bugs.ruby-lang.org/issues/13295
    comments:
  docs:
  - "[String#-@](https://ruby-doc.org/core-2.5.0/String.html#method-i-2D-40)"
  code:
  - "  ```ruby"
  - "  str = String.new('not frozen')"
  - "  10.times.map { -str }.map(&:object_id)"
  - "  # Ruby 2.4: 10 different ids => 10 different frozen string objects"
  - "  # Ruby 2.5: 10 same ids => always the same frozen object"
  - ''
  - "  5.times.map { -'test' }.map(&:object_id)"
  - "  # Ruby 2.4: 5 different ids => 5 different frozen string objects"
  - "  # Ruby 2.5: 5 same ids => always the same frozen object"
  - "  ```"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Regexp`: absence operator"
  path:
  - Ruby 2.5
  - Core classes and modules
  summary: 'The underlying [Onigmo](https://github.com/k-takata/Onigmo) Regexp library was updated, which brought new operator: `(?~foo)` means "match any string that **do not** ends with `foo`"'
  docs:
  - "—"
  code:
  - "  ```ruby"
  - "  # Classic example of usefulness: matching C comments:"
  - "  code = <<~C"
  - "    /* This is a comment."
  - "    It ends here: */"
  - "    // And not here: */"
  - "  C"
  - "  code.scan(%r{/\\*.+\\*/}m)"
  - '  # => ["/* This is a comment.\nIt ends here: */\n// And not here: */"]'
  - "  code.scan(%r{/\\*(?~\\*/)\\*/})"
  - '  # => ["/* This is a comment.\nIt ends here: */"]'
  - "  ```"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Struct` with keyword arguments"
  path:
  - Ruby 2.5
  - Core classes and modules
  summary: "`Struct` can be created with `keyword_init: true`, and then its instance will require keyword arguments to initialize"
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11925'
    url: https://bugs.ruby-lang.org/issues/11925
    comments:
  docs:
  - "[Struct.new](https://ruby-doc.org/core-2.5.0/Struct.html#method-c-new)"
  code:
  - "  ```ruby"
  - "  Person = Struct.new(:first, :last, :age)"
  - "  ModernPerson = Struct.new(:first, :last, :age, keyword_init: true)"
  - ''
  - "  Person.new('Bob', 'Jones', 40)"
  - '  # => #<struct Person first="Bob", last="Jones", age=40>'
  - "  ModernPerson.new(first: 'Meredith', last: 'Williams', age: 28)"
  - '  # => #<struct ModernPerson first="Meredith", last="Williams", age=28>'
  - "  ModernPerson.new('Meredith', 'Williams', 28)"
  - "  # ArgumentError (wrong number of arguments (given 3, expected 0))"
  - "  ```"
  followup: ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Time.at`: units"
  path:
  - Ruby 2.5
  - Core classes and modules
  summary: "`Time.at` second argument was meant to be microseconds, but in 2.5+ it can be micro-, milli- or nano-seconds, specified by third argument: `:millisecond`, `:usec` or `:microsecond` (default), `:nanosecond`"
  reason: It was noted that when you have nanoseconds value (available as `Time#nsec`) and want to pass it to `.at`, it is inconvenient to divide it by `1000`.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13919'
    url: https://bugs.ruby-lang.org/issues/13919
    comments:
  docs:
  - "[Time.at](https://ruby-doc.org/core-2.5.0/Time.html#method-c-at)"
  code:
  - "  ```ruby"
  - "  nanoseconds = 123456789"
  - "  # The only way previously to create time with nsec value"
  - "  Time.at(946684800, nanoseconds / 1000.0).nsec # => 123456789"
  - "  # New way"
  - "  Time.at(946684800, nanoseconds, :nanosecond).nsec # => 123456789"
  - "  # Also convenient for some contexts: .123 seconds"
  - "  Time.at(946684800, 123, :millisecond).usec"
  - "  # => 123000"
  - "  ```"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Enumerable#any?`, `#all?`, `#none?`, and `#one?` accept patterns"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Collections
  summary: Any argument that responds to `#===` may now be passed (akin to `grep`)
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11286'
    url: https://bugs.ruby-lang.org/issues/11286
    comments:
  docs:
  - "[Enumerable#all?](https://ruby-doc.org/core-2.5.0/Enumerable.html#method-i-all-3F), [Enumerable#any?](https://ruby-doc.org/core-2.5.0/Enumerable.html#method-i-any-3F), [Enumerable#none?](https://ruby-doc.org/core-2.5.0/Enumerable.html#method-i-none-3F), [Enumerable#one?](https://ruby-doc.org/core-2.5.0/Enumerable.html#method-i-one-3F)"
  code:
  - "  ```ruby"
  - "  [1, 2, nil].all?(Numeric) # => false"
  - "  ['America', 'Europe', 'Africa', 'Asia'].any?(/^E/) # => true"
  - "  (1..20).one?(20..30) # => true"
  - "  require 'set'"
  - "  [:foo, :bar, :baz].none?(Set[:foo, :test]) # => false"
  - "  ```"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Array#append` and `#prepend`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Collections
  summary: Just aliases for `#push` and `#unshift`
  reason: The old methods are symmetric with `#pop` and `#shift`, respectively, but asymmetric with each other and (especially `#unshift`) hard to guess and remember
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12746'
    url: https://bugs.ruby-lang.org/issues/12746
    comments:
  docs:
  - "[Array#append](https://ruby-doc.org/core-2.5.0/Array.html#method-i-append), [Array#prepend](https://ruby-doc.org/core-2.5.0/Array.html#method-i-prepend)"
  code:
  - "  ```ruby"
  - "  ary = [1, 2, 3]"
  - "  ary.append(4)"
  - "  # => [1, 2, 3, 4]"
  - "  ary.prepend(0)"
  - "  # => [0, 1, 2, 3, 4]"
  - "  ary"
  - "  # => [0, 1, 2, 3, 4]"
  - "  ```"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Hash#transform_keys` and `#transform_keys!`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Collections
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13583'
    url: https://bugs.ruby-lang.org/issues/13583
    comments:
  docs:
  - "[Hash#transform_keys](https://ruby-doc.org/core-2.5.0/Hash.html#method-i-transform_keys), [Hash#transform_keys!](https://ruby-doc.org/core-2.5.0/Hash.html#method-i-transform_keys-21)"
  code:
  - "  ```ruby"
  - "  {a: 1, b: 2}.transform_keys { |sym| sym.to_s.capitalize }"
  - '  # => {"A"=>1, "B"=>2}'
  - "  {a: 1, b: 2}.transform_keys(&:to_s)"
  - '  # => {"a"=>1, "b"=>2}'
  - "  {a: 1, b: 2}.transform_keys(&:length) # non-unique - the last value is taken"
  - "  # => {1=>2}"
  - "  {a: 1, b: 2}.transform_keys           # without block - returns enumerator"
  - "  # => #<Enumerator: {:a=>1, :b=>2}:transform_keys>"
  - "  # The latter can be useful when modified by .with_index"
  - '  {a: 1, b: 2}.transform_keys.with_index(1) { |k, i| "#{i}: #{k}" }'
  - '  # => {"1: a"=>1, "2: b"=>2}'
  - "  ```"
  followup: ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Hash#slice`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Collections
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13563'
    url: https://bugs.ruby-lang.org/issues/13563
    comments:
  docs:
  - "[Hash#slice](https://ruby-doc.org/core-2.5.0/Hash.html#method-i-slice)"
  code:
  - "  ```ruby"
  - "  h = { a: 100, b: 200, c: 300 }"
  - "  h.slice(:a)           #=> {:a=>100}"
  - "  h.slice(:b, :c, :d)   #=> {:b=>200, :c=>300}"
  - "  ```"
  followup: ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: Backtrace and error message in reverse order
  path:
  - Ruby 2.5
  - Core classes and modules
  - Exceptions
  summary: New behavior is activated if `STDERR` is TTY
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #8661'
    url: https://bugs.ruby-lang.org/issues/8661
    comments:
  code:
  - "  ```"
  - "  $ cat test.rb"
  - "  {a: 1}.fetch(:b)"
  - "  $ ruby test.rb"
  - "  # Ruby 2.4:"
  - "  test.rb:1:in `fetch': key not found: :b (KeyError)"
  - "    from test.rb:1:in `<main>'"
  - ''
  - "  # Ruby 2.5:"
  - "  Traceback (most recent call last):"
  - "    1: from test.rb:1:in `<main>'"
  - "  test.rb:1:in `fetch': key not found: :b (KeyError)"
  - "  ```"
  followup: ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Exception#full_message`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Exceptions
  summary: "`Exception#full_message` provides the same string Ruby will print if exception is not caught."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14141'
    url: https://bugs.ruby-lang.org/issues/14141
    comments:
  docs:
  - "[Exception#full_message](https://ruby-doc.org/core-2.5.0/Exception.html#method-i-full_message)"
  code:
  - "  ```ruby"
  - "  # test.rb"
  - "  begin"
  - "    {a: 1}.fetch(:b)"
  - "  rescue => e"
  - "    puts e.full_message"
  - "  end"
  - "  # `ruby test.rb` prints:"
  - "  #   Traceback (most recent call last):"
  - "  #     1: from test.rb:2:in `<main>'"
  - "  #   test.rb:2:in `fetch': key not found: :b (KeyError)"
  - "  #"
  - "  # `ruby test.rb 2>err.log` prints:"
  - "  #   test.rb:2:in `fetch': key not found: :b (KeyError)"
  - "  #     from test.rb:2:in `<main>"
  - "  ```"
  notes: The format is different depending of whether **`STDERR`** is TTY or not (even if you printing the returned string to `STDOUT` or just storing it in the variable)
  followup: ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`KeyError#receiver` and `#key`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Exceptions
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12063'
    url: https://bugs.ruby-lang.org/issues/12063
    comments:
  docs:
  - "[KeyError](https://ruby-doc.org/core-2.5.0/KeyError.html)"
  code:
  - "  ```ruby"
  - "  begin"
  - "    {a: 1}.fetch(:b)"
  - "  rescue => e"
  - "    p e.receiver # => {:a=>1}"
  - "    p e.key      # => :b"
  - "  end"
  - "  ```"
  followup: ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: 'New class: `FrozenError`'
  path:
  - Ruby 2.5
  - Core classes and modules
  - Exceptions
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13224'
    url: https://bugs.ruby-lang.org/issues/13224
    comments:
  docs:
  - "[FrozenError](https://ruby-doc.org/core-2.5.0/FrozenError.html)"
  code:
  - "  ```ruby"
  - "  a = [1, 2, 3].freeze"
  - "  a << 4"
  - "  # Ruby 2.4: RuntimeError: can't modify frozen Array"
  - "  # Ruby 2.5: FrozenError (can't modify frozen Array)"
  - "  ```"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: Don't hide coercion errors
  path:
  - Ruby 2.5
  - Core classes and modules
  - Exceptions
  summary: Previously, some `Numeric` and `Range` methods caught errors when the provided values were incompatible, and thrown their own. This was hard to debug, so now the original error is thrown instead.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #7688'
    url: https://bugs.ruby-lang.org/issues/7688
    comments:
  code:
  - "  ```ruby"
  - "  class MyString"
  - "    def initialize(str)"
  - "      @str = str"
  - "    end"
  - ''
  - "    def <=>(other)"
  - "      # This will fail: we forgot to define attr_reader :str"
  - "      str <=> other.str"
  - "    end"
  - ''
  - "    include Comparable"
  - "  end"
  - ''
  - "  'bar'..MyString.new('foo')"
  - "  # Ruby 2.4: test.rb:13:in `<main>': bad value for range (ArgumentError)"
  - '  # Ruby 2.5: test.rb:7:in `<=>'': undefined local variable or method `str'' for #<MyString:0x0000556d024e7b08 @str="bar"> (NameError)'
  - "  ```"
  - ''
  affects:
  - "`Numeric#step`, `#<`, `#>`, `#>=`, `#<=` (when `other.coerce` method fails), `Range#initialize` (when `<=>` method of range's ends fail)"
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`IO#pread` and `#pwrite`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Filesystem and IO
  summary: Two atomic methods utilize corresponding system calls to read or write file at specified offset, instead of `#seek` + `#read`/`#write`
  reason: ''
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #4532'
    url: https://bugs.ruby-lang.org/issues/4532
    comments:
  docs:
  - "[IO#pread](https://ruby-doc.org/core-2.5.0/IO.html#method-i-pread), [IO#pwrite](https://ruby-doc.org/core-2.5.0/IO.html#method-i-pwrite)"
  code:
  - "  ```ruby"
  - "  File.write('tmp.txt', 'test me please')"
  - "  f = File.open('tmp.txt')"
  - '  f.pread(2, 5) # => "me"'
  - "  f.pos         # => 0, unchanged"
  - "  ```"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`IO#write` accepts multiple arguments"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Filesystem and IO
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #9323'
    url: https://bugs.ruby-lang.org/issues/9323
    comments:
  docs:
  - "[IO#write](https://ruby-doc.org/core-2.5.0/IO.html#method-i-write)"
  code:
  - "  ```ruby"
  - "  $stdout.write('test ', 'me ', 'please')"
  - "  # Prints: test me please"
  - "  ```"
  notes: ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`File.open` better supports `newline:` option"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Filesystem and IO
  summary: Somewhat obscurely present `IO.new`/`IO.read`/`File.open` and similar methods options for converting newlines now properly switches file reading to text mode.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #13350'
    url: https://bugs.ruby-lang.org/issues/13350
    comments:
  docs:
  - "— (it is _almost_ documented by referring from [IO.new](https://ruby-doc.org/core-2.5.0/IO.html#method-c-new) docs to [String#encode](https://ruby-doc.org/core-2.5.0/String.html#method-i-encode) docs, where at least longer form `newline_universal: true` is mentioned)"
  code:
  - "  ```ruby"
  - '  File.write("crlf.txt", "a\nb\nc", newline: :crlf) # option to convert newlines to Windows format'
  - "  File.binread('crlf.txt')"
  - '  # => "a\r\nb\r\nc" -- what it really wrote'
  - "  File.read('crlf.txt', newline: :universal)"
  - "  # Ruby 2.4:"
  - '  #   => "a\r\nb\r\nc" -- newline option is ignored unless encodings passed too'
  - "  # Ruby 2.5:"
  - '  #   => "a\nb\nc" -- newline option is respected, file read in text mode & newlines converted'
  - "  ```"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`File#path` raises when opened with `File::Constants::TMPFILE` option."
  path:
  - Ruby 2.5
  - Core classes and modules
  - Filesystem and IO
  summary: The constant `TMPFILE` is [documented](https://ruby-doc.org/core-2.5.0/File/Constants.html#TMPFILE) as "Create an unnamed temporary file", but before Ruby 2.5, it was still possible to request this file's path.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13568'
    url: https://bugs.ruby-lang.org/issues/13568
    comments:
  docs:
  - "[File#path](https://ruby-doc.org/core-2.5.0/File.html#method-c-path)"
  code:
  - "  ```ruby"
  - "  f = File.open('/tmp', File::RDWR | File::TMPFILE)"
  - "  f.path"
  - '  # Ruby 2.4: => "/tmp" -- what???'
  - "  # Ruby 2.5: IOError (File is unnamed (TMPFILE?))"
  - "  ```"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`File.lutime`"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Filesystem and IO
  summary: Same as `utime`, but for symlinks sets modification time of link itself, not the referred object
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #4052'
    url: https://bugs.ruby-lang.org/issues/4052
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11302'
    url: https://bugs.ruby-lang.org/issues/11302
    comments:
  docs:
  - "[File.lutime](https://ruby-doc.org/core-2.5.0/File.html#method-c-lutime)"
  - ''
  - "####  `Dir.children` and `.each_child`"
  - ''
  - "[Dir.children](https://ruby-doc.org/core-2.5.0/Dir.html#method-c-children), [Dir.each_child](https://ruby-doc.org/core-2.5.0/Dir.html#method-c-each_child)"
  code:
  - "  ```ruby"
  - "  Dir.children('.')"
  - '  # => ["_layouts", ".gitignore", "README.md", "_data", "_src", "_site", "Contributing.md", "_config.yml", "2.6.md", "js", "404.html", ".git", "images", "Gemfile", "css", "Gemfile.lock"]'
  - "  ```"
  followup: ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Dir.glob`: `base:` argument"
  path:
  - Ruby 2.5
  - Core classes and modules
  - Filesystem and IO
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13056'
    url: https://bugs.ruby-lang.org/issues/13056
    comments:
  docs:
  - "[Dir.glob](https://ruby-doc.org/core-2.5.0/Dir.html#method-c-glob)"
  code:
  - "  ```ruby"
  - "  Dir.glob('*')"
  - '  # => ["_layouts", "README.md", "err.log", "_data", "_src", "_site", "Contributing.md", "_config.yml", "2.6.md", "js", "404.html", "images", "Gemfile", "css", "Gemfile.lock"]'
  - "  Dir.glob('*', base: '_src')"
  - '  # => ["2.5.md", "script", "tmp", "2.6.md"]'
  - "  ```"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Process.last_status` as an alias of `$?`"
  path:
  - Ruby 2.5
  - Core classes and modules
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14043'
    url: https://bugs.ruby-lang.org/issues/14043
    comments:
  docs:
  - "[Process.last_status](https://ruby-doc.org/core-2.5.0/Process.html#method-c-last_status)"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Thread#fetch`"
  path:
  - Ruby 2.5
  - Core classes and modules
  summary: Much akin to `Hash#fetch`, allows to fetch thread-local variable or provide default value
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13009'
    url: https://bugs.ruby-lang.org/issues/13009
    comments:
  docs:
  - "[Thread#fetch](https://ruby-doc.org/core-2.6/Thread.html#method-i-fetch) (feature is present since Ruby 2.5, but explanations added later)"
  code:
  - "  ```ruby"
  - '  threads = [Thread.new { Thread.current[:name] = "first" }, Thread.new {}]'
  - "  threads.each(&:join)"
  - "  threads.map { |t| t.fetch(:name, '<not set>') }"
  - '  # => ["first", "<not set>"]'
  - "  threads.last.fetch(:name)"
  - "  # KeyError (key not found: :name)"
  - '  threads.last.fetch(:name) { |key| "#{key} not set at #{Time.now}" }'
  - '  # => "name not set at 2019-05-30 16:50:44 +0300"'
  - "  ```"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`RubyVM::InstructionSequence` new methods"
  path:
  - Ruby 2.5
  - Core classes and modules
  docs:
  - "[RubyVM::InstructionSequence#each_child](https://ruby-doc.org/core-2.5.0/RubyVM/InstructionSequence.html#method-i-each_child), [RubyVM::InstructionSequence#trace_points](https://ruby-doc.org/core-2.5.0/RubyVM/InstructionSequence.html#method-i-trace_points)"
  - ''
  release: 2.5
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: 'Endless range: `(1..)`'
  path:
  - Ruby 2.6
  - Language
  reason: More convenient `Array` slicing, and idiomatic open-ended `case` conditions
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12912'
    url: https://bugs.ruby-lang.org/issues/12912
    comments:
  docs:
  - "[Range: Endless ranges](https://ruby-doc.org/core-2.6/Range.html#class-Range-label-Endless+Ranges)"
  code:
  - "  ```ruby"
  - "  # Usage"
  - "  ary = %w[List of words]"
  - '  ary[2..] # => ["words"]'
  - ''
  - "  case indicator"
  - "  when 1...8 then # ..."
  - "  when 8...15 then # ..."
  - "  when 15.. then # ..."
  - "  end"
  - ''
  - "  years.grep(2017...)"
  - ''
  - "  # Details of behavior:"
  - "  (1..).end         # => nil"
  - "  (1..).to_a        # RangeError (cannot convert endless range to an array)"
  - "  (1..).each { }    # hangs forever"
  - "  (1..) == (1...)   # => false"
  - "  (1..).size        # => Infinity"
  - "  ```"
  followup: ''
  release: 2.6
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: Non-ASCII constant names
  path:
  - Ruby 2.6
  - Language
  summary: Constant names may start with a non-ASCII capital letter.
  reason: ''
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13770'
    url: https://bugs.ruby-lang.org/issues/13770
    comments:
  release: 2.6
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`else` in exception-handling context"
  path:
  - Ruby 2.6
  - Language
  summary: In exception-handling context, `else` without any `rescue` is now a syntax error
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14606'
    url: https://bugs.ruby-lang.org/issues/14606
    comments:
  code:
  - "  ```ruby"
  - "  # In Ruby 2.6 it would be SyntaxError: else without rescue is useless"
  - "  [1,2,3].each do"
  - "    p :foo"
  - "  else"
  - "    p :bar"
  - "  end"
  - "  ```"
  - '  The code above obviously contains some error (omitted `if` or something), but before Ruby 2.6 the interpreter would not complain, interpreting it as "begin → perform code that might raise → else (if nothing was raised) performing something", due to lesser-used Ruby feature of allowing `else` in an exception-handling construct.'
  - ''
  release: 2.6
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: 'Refinements: improved visibility'
  path:
  - Ruby 2.6
  - Language
  summary: Refinements are now compatible with `#public_send` and `#respond_to?`, and implicit `#to_proc`.
  reason: This is part of the effort to make great yet neglected feature of refinements behave more naturally;
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14223'
    url: https://bugs.ruby-lang.org/issues/14223
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15326'
    url: https://bugs.ruby-lang.org/issues/15326
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15327'
    url: https://bugs.ruby-lang.org/issues/15327
    comments:
  code:
  - "  ```ruby"
  - "  module StringExt"
  - "    refine String do"
  - "      def surround(before, after = before)"
  - "        after + self + before"
  - "      end"
  - ''
  - "      def to_proc"
  - "        proc { |val| self % val }"
  - "      end"
  - "    end"
  - "  end"
  - ''
  - "  using StringExt"
  - "  'foo'.respond_to?(:surround) # => true in 2.6, false in 2.5"
  - '  ''foo''.public_send(:surround, ''|'') # => "|foo|" in 2.6, NoMethodError in 2.5'
  - '  (1..3).map(&''%02i'') # => ["01", "02", "03"] in 2.6;  wrong argument type String (expected Proc) in 2.5'
  - "  ```"
  followup: ''
  release: 2.6
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#then` as an alias for `#yield_self`"
  path:
  - Ruby 2.6
  - Core classes and modules
  - "`Kernel`"
  reason: Since the introduction of `Kernel#yield_self` at Ruby 2.5, it was pointed out that the name chosen is too long for this basic method, and, unlike most of other core methods, says "how it is implemented" not the intention; after lots of discussion it was decided `#then` corresponds best to the method's goal.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14594'
    url: https://bugs.ruby-lang.org/issues/14594
    comments:
  code:
  - "  ```ruby"
  - "  [BASE_URL, path].join('/')"
  - "      .then { |url| open(url).read }"
  - "      .then { |body| JSON.parse(body, symbolyze_names: true) }"
  - "      .dig(:data, :items)"
  - "      .then { |items| File.write('response.yml', items.to_yaml) }"
  - "  ```"
  - ''
  notes: There is a controversy in the community about this alias, pointing out the fact that `#then` is a typical method name for promises.
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`<Numeric>()` methods have `exception:` argument"
  path:
  - Ruby 2.6
  - Core classes and modules
  - "`Kernel`"
  reason: 'As of Ruby 2.5, `Integer(''x'')` will raise `ArgumentError (invalid value for Integer(): x)`, but in a lot of cases a sane thing to desire is "convert it, if possible"'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12732'
    url: https://bugs.ruby-lang.org/issues/12732
    comments:
  docs:
  - "[Kernel#Integer](https://ruby-doc.org/core-2.6/Kernel.html#method-i-Integer), [Kernel#Float](https://ruby-doc.org/core-2.6/Kernel.html#method-i-Float), [Kernel#Rational](https://ruby-doc.org/core-2.6/Kernel.html#method-i-Rational), [Kernel#Complex](https://ruby-doc.org/core-2.6/Kernel.html#method-i-Complex), [Kernel#BigDecimal](https://ruby-doc.org/stdlib-2.6/libdoc/bigdecimal/rdoc/Kernel.html#method-i-BigDecimal)"
  code:
  - "  ```ruby"
  - '  Integer(''x'') # => ArgumentError (invalid value for Integer(): "x")'
  - "  Integer('x', exception: false) # => nil"
  - "  ```"
  - ''
  affects:
  - "`#Integer`, `#Float`, `#Rational`, `#Complex` and `#BigDecimal` (stdlib; previously known as `BigDecimal.new`)"
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#system` has `exception:` argument"
  path:
  - Ruby 2.6
  - Core classes and modules
  - "`Kernel`"
  summary: 'With `exception: true`, the method raises instead of returning `false` on non-0 exit code, or `nil` on command execution failure.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14386'
    url: https://bugs.ruby-lang.org/issues/14386
    comments:
  docs:
  - "[Kernel#system](https://ruby-doc.org/core-2.6/Kernel.html#method-i-system) (unfortunately, seems documentation haven't been updated with new feature)"
  code:
  - "  ```ruby"
  - "  system('cat nonexistent.txt')  # => false"
  - "  system('ctat nonexistent.txt') # => nil"
  - ''
  - "  system('cat nonexistent.txt', exception: true)  # RuntimeError (Command failed with exit 1: cat)"
  - "  system('ctat nonexistent.txt', exception: true) # Errno::ENOENT (No such file or directory - ctat)"
  - ''
  - "  ```"
  - ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Module#method_defined?`: `inherit` argument"
  path:
  - Ruby 2.6
  - Core classes and modules
  summary: "`Module#method_defined?` and similar methods accept an optional second argument. If it is `false`, only module's own methods would be returned."
  reason: Other module introspection methods, like `#methods`, already have similar arguments. It may be important for meta-programming; like "when this module is included, it will redefine some host's methods, but only those that belong to host", or "test that all descendants of some abstract class redefine required methods".
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14944'
    url: https://bugs.ruby-lang.org/issues/14944
    comments:
  docs:
  - "[Module#method_defined?](https://ruby-doc.org/core-2.6/Module.html#method-i-method_defined-3F), [Module#private_method_defined?](https://ruby-doc.org/core-2.6/Module.html#method-i-private_method_defined-3F), [Module#protected_method_defined?](https://ruby-doc.org/core-2.6/Module.html#method-i-protected_method_defined-3F), [Module#public_method_defined?](https://ruby-doc.org/core-2.6/Module.html#method-i-public_method_defined-3F)"
  code:
  - "  ```ruby"
  - "  Array.method_defined?(:chunk)"
  - "  # => true"
  - "  Array.method_defined?(:chunk, false)"
  - "  # => false -- it is Enumerable's method"
  - "  Array.method_defined?(:to_h, false)"
  - "  # => true  -- despite inheriting from Enumerable, Array redefines it for performance"
  - "  ```"
  followup: ''
  affects:
  - "`#method_defined?`, `#private_method_defined?`, `#protected_method_defined?`, `#public_method_defined?`."
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`String#split` with block"
  path:
  - Ruby 2.6
  - Core classes and modules
  reason: When parsing a huge string, and each substring is used exactly once, it could be ineffective to first create the whole array of parts, and only then iterate through it; with block form, parts are just yielded one by one;
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #4780'
    url: https://bugs.ruby-lang.org/issues/4780
    comments:
  docs:
  - "[String#split](https://ruby-doc.org/core-2.6/String.html#method-i-split)"
  code:
  - "  ```ruby"
  - '  "several\nlong\nlines".split("\n") { |part| puts part if part.start_with?(''l'') }'
  - "  # prints:"
  - "  #   long"
  - "  #   lines"
  - '  # => "several\nlong\nlines"'
  - "  ```"
  - "  Note that in block form, the _original string_ will be returned, not the result of processing parts with block. To work with split results in a method-chaining style, one can utilize `Object#to_enum`:"
  - "  ```ruby"
  - '  "several\nlong\nlines"'
  - '    .to_enum(:split, "\n")  # => Makes a enumerator, yielding each entry from split("\n")'
  - "    .each_with_object(Hash.new(0)) { |ln, h| h[ln.length] += 1 }"
  - "    # => {7=>1, 4=>1, 5=>1}"
  - "  ```"
  - ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Time`: support for timezones"
  path:
  - Ruby 2.6
  - Core classes and modules
  summary: "> A timezone argument must have `local_to_utc` and `utc_to_local` methods, and may have `name` and `abbr` methods."
  reason: Named timezones are more complicated than just "offset from UTC". Going over DST date, or between different years in country history, time could have the same timezone, but different UTC offset.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14850'
    url: https://bugs.ruby-lang.org/issues/14850
    comments:
  docs:
  - "[Time: Timezone argument](https://ruby-doc.org/core-2.6/Time.html#class-Time-label-Timezone+argument)"
  code:
  - "  ```ruby"
  - "  zone = TZInfo::Timezone.get('America/New_York')"
  - "  time = Time.new(2018, 6, 1, 0, 0, 0, zone)"
  - "  time.zone                 # => #<TZInfo::DataTimezone: America/New_York>"
  - '  time.strftime(''%H:%M %Z'') # => "00:00 EDT"'
  - "  time.utc_offset           # => -14400 = -4 hours"
  - "  time += 180 * 24*60*60    # + 180 days, summery->winter transition"
  - "  time.utc_offset           # => -18000, -5 hours -- daylight saving handled by timezone"
  - "  ```"
  followup: ''
  affects:
  - ''
  - "  * `.new` (timezone may be passed as a last argument, which previously accepted only raw UTC offsets)"
  - "  * `.at` (new keyword `in:` argument)"
  - "  * `#getlocal` (accepts timezone where previously only UTC offset was accepted)"
  - "  * `#+`, `#-`, `#succ` (no new argument, but preserve timezone of the source)"
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Proc` composition"
  path:
  - Ruby 2.6
  - Core classes and modules
  summary: "`Proc` and `Method` classes now have `#>>` and `#<<` methods for functional composition."
  reason: This was a long-anticipated feature for moving Ruby towards more functional code.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #6284'
    url: https://bugs.ruby-lang.org/issues/6284
    comments:
  code:
  - "  ```ruby"
  - "  plus = ->(x, y) { x + y }"
  - "  mul2 = ->(x) { x * 2 }"
  - "  stringify = :to_s.to_proc"
  - ''
  - "  (plus >> mul2).call(5, 6)"
  - "  # => 22"
  - "  (mul2 >> stringify).call(5) # (5 * 2).to_s"
  - '  # => "10"'
  - "  (mul2 << stringify).call(5) # 5.to_s * 2"
  - '  # => "55"'
  - ''
  - "  # Realistic examples:"
  - ''
  - "  # 1. Providing chain of functions instead of chaining map's:"
  - "  URLS.map(&Faraday.method(:get) >> :body.to_proc >> JSON.method(:parse) >> ->(data) { data.dig('response', 'items')})"
  - ''
  - "  # 2. Storing chain of processings in constant:"
  - "  RESPONSE_PROCESSOR = Faraday.method(:get) >>"
  - "                      :body.to_proc >>"
  - "                      JSON.method(:parse) >>"
  - "                      ->(data) { data.dig('response', 'items')}"
  - ''
  - "  # ...later..."
  - "  URLS.map(&RESPONSE_PROCESSOR)"
  - ''
  - "  # 3. Utilizing block-based DSLs (Sinatra-alike)"
  - "  get '/my_endpoint', &parse_params >> perform_business_action >> render_response"
  - "  ```"
  - '* **Important notice**: Unlike any other places in Ruby (where objects are coerced into procs with `#to_proc` method), "what can be chained" is decided by existence of `#call` method; this means you CAN''T chain symbols (notice `:body.to_proc` above), but CAN chain some "command pattern" classes with `MyClass.call` API.'
  - ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Array#union` and `Array#difference`"
  path:
  - Ruby 2.6
  - Core classes and modules
  summary: "`Array#union` is like `|`, but also accepts multiple arguments; `Array#difference` is like `-`, but accepts multiple arguments."
  reason: Multiple-argument methods are more effective, and better chainable than operator form
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14097'
    url: https://bugs.ruby-lang.org/issues/14097
    comments:
  docs:
  - "[Array#union](https://ruby-doc.org/core-2.6/Array.html#method-i-union), [Array#difference](https://ruby-doc.org/core-2.6/Array.html#method-i-difference)"
  code:
  - "  ```ruby"
  - "  [1, 2, 3].union([3, 4], [4, 5])"
  - "  # => [1, 2, 3, 4, 5]"
  - "  [1, 2, 3, 4].difference([3, 4], [1])"
  - "  # => [2]"
  - "  ```"
  notes: There are also plans (discussed in the same ticket above) to introduce mutating `union!` form.
  followup: ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Hash#merge` with multiple arguments"
  path:
  - Ruby 2.6
  - Core classes and modules
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15111'
    url: https://bugs.ruby-lang.org/issues/15111
    comments:
  docs:
  - "[Hash#merge](https://ruby-doc.org/core-2.6/Hash.html#method-i-merge)"
  code:
  - "  ```ruby"
  - "  {a: 1, b: 2}.merge({b: 3, c: 4}, {c: 5, b: 6}) # => {a: 1, b: 6, c: 5}"
  - ''
  - "  {a: 1, b: 2}.merge({b: 3, c: 4}, {c: 5, b: 6}) { |key, oldval, newval| [oldval, newval] }"
  - "  # => {a: 1, b: [[2, 3], 6], c: [4, 5]}"
  - "  ```"
  - "  Note the last example: if the block is provided for conflict resolution, it is called repeatedly for **each pair** of values provided for the conflicting key (not `|key, *all_conflicting_values|` as one may expect)."
  - ''
  affects:
  - "`Hash#merge`, `Hash#merge!`, `Hash#update` (alias for `#merge!`)"
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#filter`/`#filter!`"
  path:
  - Ruby 2.6
  - Core classes and modules
  - Enumerables
  summary: "`#select` is aliased as `#filter` (and `#select!` as `#filter!`, where applicable)."
  reason: It was argued for a long time that most of other languages name the concept "filter", so the new alias was added to lessen the confusion for newcomers.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13784'
    url: https://bugs.ruby-lang.org/issues/13784
    comments:
  affects:
  - "`Enumerable`, `Enumerator`, `Enumerator::Lazy`, `Struct` (only `#filter`), `Array`, `Hash`, and `Set` of standard library (`#filter` and `#filter!`)."
  - ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#to_h` with a block"
  path:
  - Ruby 2.6
  - Core classes and modules
  - Enumerables
  reason: It was noted that `.map { |...| [some_key, some_value] }.to_h` is a very common pattern and should be made DRY;
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15143'
    url: https://bugs.ruby-lang.org/issues/15143
    comments:
  docs:
  - "[Enumerable#to_h](https://ruby-doc.org/core-2.6/Enumerable.html#method-i-to_h), [Array#to_h](https://ruby-doc.org/core-2.6/Array.html#method-i-to_h), [ENV.to_h](https://ruby-doc.org/core-2.6/ENV.html#method-c-to_h), [Hash#to_h](https://ruby-doc.org/core-2.6/Hash.html#method-i-to_h), [Struct#to_h](https://ruby-doc.org/core-2.6/Struct.html#method-i-to_h)"
  code:
  - "  ```ruby"
  - "  {a: 1, b: 2, c: 3}.to_h { |k, v| [k.to_s, -v] } # => {'a' => -1, 'b' => -2, 'c' => -3}"
  - "  File.readlines('test.txt').each_with_index.to_h { |l, i| [i, l] }"
  - "  # => {0 => 'first line', 1 => 'second line', 2 => 'third line'}"
  - "  ```"
  - ''
  affects:
  - "`Enumerable` and everything that includes it;"
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Enumerator::ArithmeticSequence`"
  path:
  - Ruby 2.6
  - Core classes and modules
  - Enumerables
  summary: "`Range#step` and `Numeric#step` are now returning not an instance of `Enumerator`, but `Enumerator::ArithmeticSequence` instead."
  reason: This feature was added by request of scientific Ruby community; it is useful for reusing results of `(from..to).step(s)` as a value object for idiomatic slicing of custom collections, see also `Range#%`.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13904'
    url: https://bugs.ruby-lang.org/issues/13904
    comments:
  docs:
  - "[Enumerator::ArithmeticSequence](https://ruby-doc.org/core-2.6.0.preview2/Enumerator/ArithmeticSequence.html), [Range#step](https://ruby-doc.org/core-2.6/Range.html#method-i-step), [Numeric#step](https://ruby-doc.org/core-2.6/Numeric.html#method-i-step)"
  code:
  - "  ```ruby"
  - "  # Basic usage remains the same:"
  - "  (1..10).step(2).to_a"
  - "  # => [1, 3, 5, 7, 9]"
  - ''
  - "  enum = (1..10).step(2)"
  - "  # => ((1..10).step(2))"
  - "  enum.class"
  - "  # => Enumerator::ArithmeticSequence"
  - "  enum.class.ancestors"
  - "  # => [Enumerator::ArithmeticSequence, Enumerator, Enumerable ...]"
  - "  # So, it is just a specialized subclass of enumerator, adding this methods:"
  - "  enum.begin  # => 1"
  - "  enum.end    # => 10"
  - "  enum.step   # => 2"
  - "  ```"
  followup: ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Enumerator` chaining"
  path:
  - Ruby 2.6
  - Core classes and modules
  - Enumerables
  summary: Several enumerators can now be chained into one with `Enumerator#+(other)` or `Enumerable#chain(list, of, enumerators)`. The result of the operation is `Enumerator::Chain` (specialized subclass of `Enumerator`).
  reason: Cleaner expression of chaining enumeration for several sequences, especially for lazy enumerators
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15144'
    url: https://bugs.ruby-lang.org/issues/15144
    comments:
  docs:
  - "[Enumerator#+](https://ruby-doc.org/core-2.6/Enumerator.html#method-i-2B), [Enumerable#chain](https://ruby-doc.org/core-2.6/Enumerable.html#method-i-chain), [Enumerator::Chain](https://ruby-doc.org/core-2.6/Enumerator/Chain.html)"
  code:
  - "  ```ruby"
  - "  [1, 2, 3].chain"
  - "  # => #<Enumerator::Chain: [[1, 2, 3]]>"
  - "  [1, 2, 3].each + [4, 5, 6].each"
  - "  # => #<Enumerator::Chain: [#<Enumerator: [1, 2, 3]:each>, #<Enumerator: [4, 5, 6]:each>]>"
  - "  [1, 2, 3].chain([4, 5, 6])"
  - "  # => #<Enumerator::Chain: [[1, 2, 3], [4, 5, 6]]>"
  - ''
  - "  # Realistic use-case:"
  - ''
  - "  # Take data from several sources, abstracted into enumerator, fetching it on demand"
  - "  sources = URLS.lazy.map { |url| open(url).read }"
  - "    .chain(LOCAL_FILES.lazy.map { |path| File.read(path) })"
  - ''
  - "  # ...then uniformely search several sources (lazy-loading them) for some value"
  - "  sources.detect { |body| body.include?('Ruby 2.6') }"
  - "  ```"
  - ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Range#===` uses `#cover?` instead of `#include?`"
  path:
  - Ruby 2.6
  - Core classes and modules
  - "`Range`"
  reason: Previously, case equality operator used `#include?`, which underneath iterates through entire range (except for Numerics). With objects other than numbers it could be ineffective (creating thousands of objects), impossible (if there is no notion of "next object", but exists notion of order) or imprecise.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14575'
    url: https://bugs.ruby-lang.org/issues/14575
    comments:
  code:
  - "  ```ruby"
  - "  case DateTime.now"
  - "  when Date.today..Date.today + 1"
  - "    # this would've not been reached before Ruby 2.6"
  - "  end"
  - ''
  - '  # this would raise "can''t iterate from Gem::Version" before Ruby 2.6'
  - "  case Gem::Version.new('2.4')"
  - "  when Gem::Version.new('1.8.7')..Gem::Version.new('2.5')"
  - "  end"
  - ''
  - "  gem 'ruby-ip'"
  - "  require 'ip'"
  - "  # this would perform ~0.5 sec before Ruby 2.6, iterating over 65536-elt sequence"
  - "  case IP.new('192.168.10.4')"
  - "  when IP.new('192.168.0.0')..IP.new('192.168.255.255')"
  - "  end"
  - "  ```"
  notes: For `String` ranges, behavior left unchanged, so example with versions above would NOT work with pure-`String` versions.
  followup: ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Range#cover?` accepts range argument"
  path:
  - Ruby 2.6
  - Core classes and modules
  - "`Range`"
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14473'
    url: https://bugs.ruby-lang.org/issues/14473
    comments:
  code:
  - "  ```ruby"
  - "  (1..5).cover?(2..3) # => true"
  - "  ```"
  - ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Range#%` alias"
  path:
  - Ruby 2.6
  - Core classes and modules
  - "`Range`"
  reason: It was proposed to have short syntax of complex array slicing, usable for math algorithms; see also `Enumerable::ArithmeticSequence`.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14697'
    url: https://bugs.ruby-lang.org/issues/14697
    comments:
  code:
  - "  ```ruby"
  - "  (5..20) % 2"
  - "  # => ((5..20).%(2)) -- an instance of Enumerable::ArithmeticSequencee"
  - ''
  - "  some_fancy_collection[(5..20) % 2] # each second element in 5..20 range"
  - "  ```"
  - "  Note that `()` around the range is mandatory here, because `5..20 % 2` will be parsed as `(5)..(20 % 2)`"
  notes: Ruby's `Array` doesn't support slicing with `Enumerable::ArithmeticSequencee` as of 2.6.
  followup: ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: 'New arguments: `receiver:` and `key:`'
  path:
  - Ruby 2.6
  - Core classes and modules
  - Exceptions
  summary: "`NameError`, `NoMethodError` accept `:receiver` on creation; `KeyError` accepts `:receiver` and `:key`."
  reason: 'Since Ruby 2.5, these exception classes were "introspectable": when you catch them, you can fetch the object that caused the problem and (in case of `KeyError`) problematic key; but there were no way to add that helpful data when raising an exception in your own code.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14313'
    url: https://bugs.ruby-lang.org/issues/14313
    comments:
  docs:
  - "[NameError.new](https://ruby-doc.org/core-2.6/NameError.html#method-c-new), [NoMethodError.new](https://ruby-doc.org/core-2.6/NoMethodError.html#method-c-new) _(docs not updated)_, [KeyError.new](https://ruby-doc.org/core-2.6/KeyError.html#method-c-new)"
  code:
  - "  ```ruby"
  - "  class MyFancyCollection"
  - "    def [](key)"
  - "      # ..."
  - '      raise KeyError.new("don''t have this: #{key}", receiver: self, key: key)'
  - "      # ..."
  - "    end"
  - "  end"
  - "  ```"
  notes: "  ```"
  followup: ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Exception#full_message` options"
  path:
  - Ruby 2.6
  - Core classes and modules
  - Exceptions
  summary: '`Exception#full_message` (which returns "exceptions how they are printed by Ruby", including message, class and backtrace) takes `:highlight` and `:order` options. This means client code can fine-tune which result it wants to achieve.'
  reason: Since introduction of new way for printing exceptions to STDERR (backtrace in reverse order and message is highlighted in bold), there were some improvements proposed to handle different contexts of exception printing.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #14324'
    url: https://bugs.ruby-lang.org/issues/14324
    comments:
  docs:
  - "[Exception#full_message](https://ruby-doc.org/core-2.6/Exception.html#method-i-full_message)"
  code:
  - "  ```ruby"
  - "  begin"
  - "    {a: 1}.fetch(:b)"
  - "  rescue => e"
  - "    # highlight: true/false, order: :top/:bottom"
  - "    p e.full_message(highlight: false, order: :top)"
  - '    # "t.rb:2:in `fetch'': key not found: :b (KeyError)\n\tfrom t.rb:2:in `<main>''\n"'
  - "    p e.full_message(highlight: true, order: :bottom)"
  - '    # "\e[1mTraceback\e[m (most recent call last):\n\t1: from t.rb:2:in `<main>''\nt.rb:2:in `fetch'': \e[1mkey not found: :b (\e[1;4mKeyError\e[m\e[1m)\e[m\n"'
  - "    p e.full_message"
  - "    # Output could be either of two above, depending on whether STDERR is terminal"
  - "    # or redirected with `ruby test.rb 2> err.log"
  - "  end"
  - "  ```"
  - ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Dir#each_child` and `Dir#children`"
  path:
  - Ruby 2.6
  - Core classes and modules
  - Filesystem and IO
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13969'
    url: https://bugs.ruby-lang.org/issues/13969
    comments:
  docs:
  - "[Dir#each_child](https://ruby-doc.org/core-2.6/Dir.html#method-i-each_child), [Dir#children](https://ruby-doc.org/core-2.6/Dir.html#method-i-children)"
  code:
  - "  ```ruby"
  - "  Dir.new('.').children"
  - '  # => ["_layouts", ".gitignore", "README.md", "_data", "_src", "_site", "_config.yml", "2.6.md", "js", "404.html", ".git", "images", "Gemfile", "css", "Gemfile.lock"]'
  - ''
  - "  ```"
  - ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: 'IO open mode: `''x''`'
  path:
  - Ruby 2.6
  - Core classes and modules
  - Filesystem and IO
  summary: When opening a new file for writing, `'wx'` can be specified to request the file does not exist before opening.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11258'
    url: https://bugs.ruby-lang.org/issues/11258
    comments:
  docs:
  - "[IO: Open mode](https://ruby-doc.org/core-2.6/IO.html#method-c-new-label-IO+Open+Mode)"
  code:
  - "  ```ruby"
  - "  f1 = File.open('temp.txt', 'wx')"
  - "  # => #<File:temp.txt>"
  - "  f2 = File.open('temp.txt', 'wx') # it is already created by previous statement"
  - "  # Errno::EEXIST (File exists @ rb_sysopen - temp.txt)"
  - "  ```"
  - ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Binding#source_location`"
  path:
  - Ruby 2.6
  - Core classes and modules
  - Introspection
  reason: 'Important usage for this new feature is proper reporting in block-based DSL usage: if something was inconsistent in the passed block, library code may use `block.binding.source_location` to report _where exactly_ problematic code came from.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14230'
    url: https://bugs.ruby-lang.org/issues/14230
    comments:
  docs:
  - "[Binding#source_location](https://ruby-doc.org/core-2.6/Binding.html#method-i-source_location)"
  code:
  - "  ```ruby"
  - "  binding.source_location"
  - '  # => ["(irb)", 114]'
  - ''
  - "  def my_dsl(&block)"
  - '    puts "Evaluating block from #{block.binding.source_location.join('':'')}"'
  - "  end"
  - ''
  - '  my_dsl { ... } # Prints "Evaluating block from (irb):118"'
  - "  ```"
  - ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`RubyVM.resolve_feature_path`"
  path:
  - Ruby 2.6
  - Core classes and modules
  - Introspection
  summary: For string `name`, returns what path `require(name)` will load (without actually loading it).
  reason: Static analysis of the program (finding the code it will use without really loading it); understanding where dependencies are coming from.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15230'
    url: https://bugs.ruby-lang.org/issues/15230
    comments:
  docs:
  - "—"
  code:
  - "  ```ruby"
  - "  RubyVM.resolve_feature_path('net/http')"
  - '  # => [:rb, "<...>/ruby-2.6.0/lib/ruby/2.6.0/net/http.rb"]'
  - "  RubyVM.resolve_feature_path('syslog')"
  - '  # => [:so, "<...>/ruby-2.6.0/lib/ruby/2.6.0/x86_64-linux/syslog.so"]'
  - "  RubyVM.resolve_feature_path('garbage')"
  - "  # LoadError (cannot load such file -- garbage)"
  - "  require 'net/http'"
  - "  RubyVM.resolve_feature_path('net/http')"
  - "  # => [:rb, false]  -- for already loaded libraries, the path would not be returned"
  - ''
  - "  # For gems:"
  - "  RubyVM.resolve_feature_path('faraday')"
  - "  # LoadError (cannot load such file -- faraday)"
  - "  gem 'faraday' # without this, gems can not be deduced"
  - "  RubyVM.resolve_feature_path('faraday')"
  - '  # => [:rb, "<...>/gems/faraday-0.15.4/lib/faraday.rb"]'
  - "  ```"
  followup: ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`RubyVM::AbstractSyntaxTree`"
  path:
  - Ruby 2.6
  - Core classes and modules
  - Introspection
  summary: The new module provides an "official" Ruby parser, replacing stdlib Ripper (and third-party parsers). The module is considered experimental, and its API can change in the future versions.
  docs:
  - "[RubyVM::AbstractSyntaxTree](https://ruby-doc.org/core-2.6/RubyVM/AbstractSyntaxTree.html)"
  code:
  - "  ```ruby"
  - "  tree = RubyVM::AbstractSyntaxTree.parse('1+2')"
  - "  # => #<RubyVM::AbstractSyntaxTree::Node(SCOPE(0) 1:0, 1:3): >"
  - "  tree.type"
  - "  # => :SCOPE"
  - "  tree.children"
  - "  # => [[], nil, #<RubyVM::AbstractSyntaxTree::Node(OPCALL(36) 1:0, 1:3): >]"
  - "  tree.children[2].type"
  - "  # => :OPCALL"
  - "  tree.children[2].children"
  - "  # => [#<RubyVM::AbstractSyntaxTree::Node(LIT(59) 1:0, 1:1): >, :+, #<RubyVM::AbstractSyntaxTree::Node(ARRAY(42) 1:2, 1:3): >]"
  - "  tree.children[2].children[0].children"
  - "  # => [1]"
  - "  ```"
  notes: ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#parameters`"
  path:
  - Ruby 2.6
  - Core classes and modules
  - "`TracePoint` improvements"
  summary: On `:b_call` and `:c_call` (block and method call events), `TracePoint` now provides `#parameters` method to fetch call params definitions.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14694'
    url: https://bugs.ruby-lang.org/issues/14694
    comments:
  docs:
  - "[TracePoint#parameters](https://ruby-doc.org/core-2.6/TracePoint.html#method-i-parameters)"
  code:
  - "  ```ruby"
  - "  t = TracePoint.new(:b_call) { |tp| p [tp.event, tp.parameters] }"
  - "  t.enable"
  - ''
  - "  [1, 2, 3].map { |x| x.to_s }"
  - "  # [:b_call, [[:opt, :x]]]"
  - "  # [:b_call, [[:opt, :x]]]"
  - "  # [:b_call, [[:opt, :x]]]"
  - "  ```"
  notes: ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`:script_compiled` event"
  path:
  - Ruby 2.6
  - Core classes and modules
  - "`TracePoint` improvements"
  summary: Event fired when a new piece of Ruby code is loaded (through `eval`, `require` or `load`). `#instruction_sequence` on this event will return compiled [RubyVM::InstructionSequence](https://ruby-doc.org/core-2.6/RubyVM/InstructionSequence.html) object, and `#eval_script` will return the text of the script sent to `eval`.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15287'
    url: https://bugs.ruby-lang.org/issues/15287
    comments:
  docs:
  - "[TracePoint: Events](https://ruby-doc.org/core-2.6/TracePoint.html#class-TracePoint-label-Events) (though new event seems to be omitted), [TracePoint#instruction_sequence](https://ruby-doc.org/core-2.6/TracePoint.html#method-i-instruction_sequence), [TracePoint#eval_script](https://ruby-doc.org/core-2.6/TracePoint.html#method-i-eval_script)"
  code:
  - "  ```ruby"
  - "  t = TracePoint.new(:script_compiled) { |tp| p [tp.event, tp.instruction_sequence, tp.eval_script] }"
  - "  t.enable"
  - ''
  - "  eval('p 1')"
  - '  # [:script_compiled, <RubyVM::InstructionSequence:<main>@(eval):1>, "p 1"]'
  - "  require 'net/http'"
  - "  # [:script_compiled, <RubyVM::InstructionSequence:<top (required)>@.../ruby-2.6.0/lib/ruby/2.6.0/net/http.rb:0>, nil]"
  - "  # [:script_compiled, <RubyVM::InstructionSequence:<top (required)>@.../ruby-2.6.0/lib/ruby/2.6.0/net/protocol.rb:0>, nil]"
  - "  # [:script_compiled, <RubyVM::InstructionSequence:<top (required)>@.../ruby-2.6.0/lib/ruby/2.6.0/socket.rb:0>, nil]"
  - "  # ....."
  - "  ```"
  - ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#enable`: new params `target:` and `target_line:`"
  path:
  - Ruby 2.6
  - Core classes and modules
  - "`TracePoint` improvements"
  summary: With new parameters provided, you can fine-tune for what methods or specific lines to catch events.
  reason: Less trace garbage and performance footprint on tracing in complex codebase, allowing very specific tracepoints to be enabled even in production.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15289'
    url: https://bugs.ruby-lang.org/issues/15289
    comments:
  docs:
  - "[TracePoint#enable](https://ruby-doc.org/core-2.6/TracePoint.html#method-i-enable) (not much, though...)"
  code:
  - "  ```ruby"
  - "  t = TracePoint.new(:line) { |tp| p tp }"
  - ''
  - "  def m1"
  - "    p 1"
  - "  end"
  - ''
  - "  def m2"
  - "    p 2"
  - "  end"
  - ''
  - "  t.enable(target: method(:m1))"
  - ''
  - "  m1"
  - "  # prints #<TracePoint:line@test.rb:5 in `m1'>"
  - "  m2"
  - "  # prints nothing"
  - "  ```"
  notes: ''
  release: 2.6
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: Standard library
  path:
  - Ruby 2.6
  summary: "* `URI` now can open `file://` URIs, `URI::File` class added."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14035'
    url: https://bugs.ruby-lang.org/issues/14035
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #13396'
    url: https://bugs.ruby-lang.org/issues/13396
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #14688'
    url: https://bugs.ruby-lang.org/issues/14688
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #4189'
    url: https://bugs.ruby-lang.org/issues/4189
    comments:
  docs:
  - "[URI::File](https://ruby-doc.org/stdlib-2.6/libdoc/uri/rdoc/URI/File.html)"
  - "[Net::HTTP#write_timeout=](https://ruby-doc.org/stdlib-2.6/libdoc/net/http/rdoc/Net/HTTP.html#method-i-write_timeout-3D)"
  - "[FileUtils.cp_lr](https://ruby-doc.org/stdlib-2.6/libdoc/fileutils/rdoc/FileUtils.html#method-c-cp_lr)"
  release: 2.6
  section: Standard Library
- !ruby/object:Change
  level: 2
  scope: ''
  title: Numbered block parameters
  path:
  - Ruby 2.7
  - Language
  summary: In block without explicitly specified parameters, variables `_1` through `_9` can be used to reference parameters.
  reason: It is one of the approaches to make short blocks DRY-er and easier to read. E.g. in `filenames.each { |f| File.read(f) }`, repetition of `f` and extra syntax needed for it can be considered an unnecessary verbosity, so `each { File.read(_1) }` could be now used instead.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #4475'
    url: https://bugs.ruby-lang.org/issues/4475
    comments: initial discussion, started 9 years ago, and finished with accepting of `@0`—`@9`
  - !ruby/object:Change::RubyIssue
    label: 'Bug #16178'
    url: https://bugs.ruby-lang.org/issues/16178
    comments: dropping of `_0`, and changing semantics of `_1`
  docs:
  - "[Proc#Numbered parameters](https://docs.ruby-lang.org/en/2.7.0/Proc.html#class-Proc-label-Numbered+parameters)"
  code:
  - "  ```ruby"
  - "  # Simplest usage:"
  - "  [10, 20, 30].map { _1**2 }"
  - "  # => [100, 400, 900]"
  - ''
  - "  # Multiple block parameters can be accessed as subsequent numbers"
  - "  [10, 20, 30].zip([40, 50, 60], [70, 80, 90]).map { _1 + _2 + _3 }"
  - "  # => [120, 150, 180]"
  - ''
  - "  # If only _1 is used for multi-argument block, it contains all arguments"
  - "  [10, 20, 30].zip([40, 50, 60], [70, 80, 90]).map { _1.join(',') }"
  - '  # => ["10,40,70", "20,50,80", "30,60,90"]'
  - ''
  - "  # If the block has explicit parameters, numbered one is SyntaxError"
  - "  [10, 20, 30].map { |x| _1**2 }"
  - "  # SyntaxError ((irb):1: ordinary parameter is defined)"
  - ''
  - "  # Outside the block, usage is warned:"
  - "  _1 = 'test'"
  - "  # warning: `_1' is reserved as numbered parameter"
  - ''
  - "  # But after that, _1 references local variable:"
  - "  [10].each { p _1 }"
  - '  # prints "test"'
  - ''
  - "  # Numbered parameters are reflected in Proc's parameters and arity"
  - "  p = proc { _1 + _2 }"
  - "  l = lambda { _1 + _2 }"
  - "  p.parameters"
  - "  # => [[:opt, :_1], [:opt, :_2]]"
  - "  p.arity"
  - "  # => 2"
  - "  l.parameters"
  - "  # => [[:req, :_1], [:req, :_2]]"
  - "  l.arity"
  - "  # => 2"
  - ''
  - "  # Nested blocks with numbered parameters are not allowed:"
  - "  %w[test me].each { _1.each_char { p _1 } }"
  - "  # SyntaxError (numbered parameter is already used in outer block here)"
  - "  # %w[test me].each { _1.each_char { p _1 } }"
  - "  #                    ^~"
  - "  ```"
  followup: ''
  release: 2.7
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: Beginless range
  path:
  - Ruby 2.7
  - Language
  summary: 'In addition to [endless range in Ruby 2.6](2.6.html#endless-range-1): `(start..)`, Ruby 2.7 introduces beginless one: `(..end)`.'
  reason: Array slicing (initial justification for endless ranges) turned out to be not the only usage for semi-open ranges. Another ones, like `case`/`grep`, DSLs and constants and [`Comparable#clamp`](#comparableclamp-with-range), can gain from the symmetry of "range without end"/"range without beginning".
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14799'
    url: https://bugs.ruby-lang.org/issues/14799
    comments:
  docs:
  - "[doc/syntax/literals.rdoc#Ranges](https://ruby-doc.org/core-2.7.0/doc/syntax/literals_rdoc.html#label-Ranges)"
  code:
  - "  ```ruby"
  - "  # Usage examples"
  - "  %w[a b c][..1] # same as [0..1], not really useful"
  - ''
  - "  case creation_time"
  - "  when ...1.year.ago then 'ancient'"
  - "  when 1.year.ago...1.month.ago then 'old'"
  - "  when 1.month.ago...1.day.ago then 'recent'"
  - "  when 1.day.ago... then 'new'"
  - "  end"
  - ''
  - "  users.map(&:age).any?(...18)"
  - ''
  - "  # Properties:"
  - "  r = ..10"
  - "  r.begin # => nil"
  - "  r.count # TypeError (can't iterate from NilClass), same with any other Enumerable methods"
  - "  r.size  # => Infinity"
  - "  ```"
  notes: ''
  release: 2.7
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: Warnings/deprecations
  path:
  - Ruby 2.7
  - Language
  summary: '* Contrastingly, the flip-flop syntax deprecation, [introduced](2.6.html#misc) in 2.6, **is reverted**. It turned out that for brevity in text-processing scrips (including one-liners run as `ruby -e "print <something>"`) the feature, however esoteric it may seem, has a justified usage.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #5400'
    url: https://bugs.ruby-lang.org/issues/5400
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16131'
    url: https://bugs.ruby-lang.org/issues/16131
    comments:
  docs:
  - "[doc/syntax/control_expressions.rdoc#Flip-Flop](https://ruby-doc.org/core-2.6.5/doc/syntax/control_expressions_rdoc.html#label-Flip-Flop)"
  code:
  - "    ```ruby"
  - '    # Imagine we are working with some data file where real data starts with "<<<"" line and end with ">>>>"'
  - "    File.each_line('data.txt', chomp: true).filter_map { |ln| ln if ln == '<<<'..ln == '>>>' }"
  - "    # => gets lines starting from <<<, and ending with >>>."
  - '    #   The condition "flips on" when the first part is true, and then "flips off" when the second is true'
  - ''
  - "    # Flip-flop-less version would be something like this (with the difference: it ignores last >>>):"
  - "    lines.drop_while { |ln| ln != '<<<' }.take_while { |ln| ln != '>>>' }"
  - "    ```"
  notes: ''
  release: 2.7
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`self.<private_method>`"
  path:
  - Ruby 2.7
  - Language
  summary: Calling a private method with a literal `self` as the receiver is now allowed.
  reason: '"`anything.method` is always disallowed for private methods" seemed like a simple and unambiguous rule, but produced some ugly edge cases (for example, `self.foo = something` for private `attr_accessor` _was_ allowed). It turned out "allow literal `self.`" makes things much clearer.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11297'
    url: https://bugs.ruby-lang.org/issues/11297
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16123'
    url: https://bugs.ruby-lang.org/issues/16123
    comments:
  docs:
  - "[doc/syntax/modules_and_classes.rdoc#Visibility](https://ruby-doc.org/core-2.7.0/doc/syntax/modules_and_classes_rdoc.html#label-Visibility)"
  code:
  - "  ```ruby"
  - "  class A"
  - "    def update"
  - "      self.a = 42 # works even in Ruby 2.6, because there was no other way to call private setter"
  - '      self.a += 42 # "private method `a'' called" in 2.6, works in 2.7'
  - ''
  - '      self + 42 # "private method `+'' called" in 2.6, works in 2.7'
  - ''
  - "      x = self"
  - '      x.a = 42 # "private method `a='' called" even in 2.7, not a literal self'
  - "    end"
  - ''
  - "    private"
  - ''
  - "    attr_accessor :a"
  - ''
  - "    def +(other)"
  - '      puts "+ called"'
  - "    end"
  - "  end"
  - "  ```"
  - ''
  release: 2.7
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: Refinements in `#method`/`#instance_method`
  path:
  - Ruby 2.7
  - Language
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15373'
    url: https://bugs.ruby-lang.org/issues/15373
    comments:
  code:
  - "  ```ruby"
  - "  module StringExt"
  - "    refine String do"
  - "      def wrap(what)"
  - "        before, after = self.split('|', 2)"
  - '        "#{before}#{what}#{after}"'
  - "      end"
  - "    end"
  - "  end"
  - ''
  - "  using StringExt"
  - ''
  - "  '<<|>>'.method(:wrap)"
  - "  # => #<Method: String(#<refinement:String@StringExt>)#wrap(what) refinement_test.rb:3>"
  - ''
  - "  %w[test me please].map(&'<<|>>'.method(:wrap))"
  - "  # 2.6: undefined method `wrap' for class `String'"
  - '  # 2.7: => ["<<test>>", "<<me>>", "<<please>>"]'
  - "  ```"
  - ''
  release: 2.7
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: Better `Method#inspect`
  path:
  - Ruby 2.7
  - Core classes and modules
  summary: "`Method#inspect` now shows method's arguments and source location (if available)."
  reason: As there are more code style approaches that operate `Method` objects, making them better identifiable and informative seemed necessary.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14145'
    url: https://bugs.ruby-lang.org/issues/14145
    comments:
  docs:
  - "[Method#inspect](https://ruby-doc.org/core-2.7.0/Method.html#method-i-inspect)"
  code:
  - "  ```ruby"
  - "  p CSV.method(:read)"
  - "  # Ruby 2.6:"
  - "  #   => #<Method: CSV.read>"
  - "  # Ruby 2.7:"
  - "  #   => #<Method: CSV.read(path, **options) <...>/lib/ruby/2.7.0/csv.rb:714>"
  - ''
  - "  # For methods defined in C, path and param names aren't available, but at least generic signature is:"
  - "  [].method(:at)"
  - "  # => #<Method: Array#at(_)>"
  - ''
  - "  # Convention: unknown param name is displayed as _, param has default value -- as ..."
  - "  def m(a, b=nil, *c, d:, e: nil, **rest, &block)"
  - "  end"
  - ''
  - "  p method(:m)"
  - "  #=> #<Method: m(a, b=..., *c, d:, e: ..., **rest, &block) ...skip...>"
  - "  ```"
  notes: ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`UnboundMethod#bind_call`"
  path:
  - Ruby 2.7
  - Core classes and modules
  summary: Binds `UnboundMethod` to a receiver and calls it. Semantically equivalent to `unbound_method.bind(receiver).call(arguments)`, but doesn't produce intermediate `Method` object (which `bind` does).
  reason: "  In such cases (for example, code reloaders), overhead of producing new `Method` object on each `bind().call` is pretty significant, and `bind_call` allows to avoid it."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15955'
    url: https://bugs.ruby-lang.org/issues/15955
    comments:
  docs:
  - "[UnboundMethod#bind_call](https://ruby-doc.org/core-2.7.0/UnboundMethod.html#method-i-bind_call)"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#const_source_location`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - "`Module`"
  summary: Returns the location of the _first_ definition of the specified constant.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #10771'
    url: https://bugs.ruby-lang.org/issues/10771
    comments:
  docs:
  - "[Module#const_source_location](https://ruby-doc.org/core-2.7.0/Module.html#method-i-const_source_location)"
  code:
  - "  ```ruby"
  - "  # Assuming test.rb:"
  - "  class A"
  - "    C1 = 1"
  - "  end"
  - ''
  - "  module M"
  - "    C2 = 2"
  - "  end"
  - ''
  - "  class B < A"
  - "    include M"
  - "    C3 = 3"
  - "  end"
  - ''
  - "  class A # continuation of A definition"
  - "  end"
  - ''
  - '  p B.const_source_location(''C3'')           # => ["test.rb", 11]'
  - '  p B.const_source_location(''C2'')           # => ["test.rb", 6]'
  - '  p B.const_source_location(''C1'')           # => ["test.rb", 2]'
  - "  p B.const_source_location('C4')           # => nil  -- constant is not defined"
  - ''
  - "  p B.const_source_location('C2', false)    # => nil  -- don't lookup in ancestors"
  - ''
  - '  p Object.const_source_location(''B'')       # => ["test.rb", 9]'
  - '  p Object.const_source_location(''A'')       # => ["test.rb", 1]  -- note it is first entry, not "continuation"'
  - ''
  - '  p B.const_source_location(''A'')            # => ["test.rb", 1]  -- because Object is in ancestors'
  - '  p M.const_source_location(''A'')            # => ["test.rb", 1]  -- Object is not ancestor, but additionally checked for modules'
  - ''
  - '  p Object.const_source_location(''A::C1'')   # => ["test.rb", 2]  -- nesting is supported'
  - "  p Object.const_source_location('String')  # => []  -- constant is defined in C code"
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#autoload?`: `inherit` argument"
  path:
  - Ruby 2.7
  - Core classes and modules
  - "`Module`"
  reason: More granular checking "if something is marked to be autoloaded directly or through ancestry chain" is necessary for advanced code reloaders (requested by author of [zeitwerk](https://github.com/fxn/zeitwerk)).
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15777'
    url: https://bugs.ruby-lang.org/issues/15777
    comments:
  docs:
  - "[Module#autoload?](https://ruby-doc.org/core-2.7.0/Module.html#method-i-autoload-3F)"
  code:
  - "  ```ruby"
  - "  class Parent"
  - "    autoload :Feature1, 'feature1.rb'"
  - "  end"
  - ''
  - "  module Mixin"
  - "    autoload :Feature2, 'feature2.rb'"
  - "  end"
  - ''
  - "  class Child < Parent"
  - "    include Mixin"
  - "  end"
  - ''
  - '  Child.autoload?(:Feature1)        # => "feature1.rb"'
  - "  Child.autoload?(:Feature1, false) # => nil"
  - '  Child.autoload?(:Feature2)        # => "feature2.rb"'
  - "  Child.autoload?(:Feature2, false) # => nil"
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Comparable#clamp` with `Range`"
  path:
  - Ruby 2.7
  - Core classes and modules
  summary: "`Comparable#clamp` now can accept `Range` as its only argument, including beginless and endless ranges."
  reason: First, ranges can be seen as more "natural" to specify _a range_ of acceptable values. Second, with introduction of beginless and endless ranges, `#clamp` now can be used for one-sided value limitation, too.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14784'
    url: https://bugs.ruby-lang.org/issues/14784
    comments:
  docs:
  - "[Comparable#clamp](https://ruby-doc.org/core-2.7.0/Comparable.html#method-i-clamp)"
  code:
  - "  ```ruby"
  - "  123.clamp(0..100) # => 100"
  - "  -20.clamp(0..100) # => 0"
  - "  15.clamp(0..100) # => 15"
  - ''
  - "  # With semi-open ranges:"
  - "  123.clamp(150..) # => 150"
  - "  123.clamp(..120) # => 120"
  - ''
  - "  # Range with excluding end is not allowed"
  - "  123.clamp(0...150) # ArgumentError (cannot clamp with an exclusive range)"
  - ''
  - "  # Old two-argument form still works:"
  - "  123.clamp(0, 150)"
  - "  # => 123"
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Integer[]` with range"
  path:
  - Ruby 2.7
  - Core classes and modules
  summary: Allows to get several bits at once.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #8842'
    url: https://bugs.ruby-lang.org/issues/8842
    comments:
  docs:
  - "[Integer#[]](https://ruby-doc.org/core-2.7.0/Integer.html#method-i-5B-5D)"
  code:
  - "  ```ruby"
  - "  #    4---0"
  - "  #    v   v"
  - "  0b10101001[0..4] # => 9"
  - "  0b10101001[0..4].to_s(2)"
  - '  # => "1001"'
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Complex#<=>`"
  path:
  - Ruby 2.7
  - Core classes and modules
  summary: "`Complex#<=>(other)` now returns `nil` if the number has imaginary part, and behaves like `Numeric#<=>` if it does not."
  reason: Method `#<=>` was explicitly undefined in `Complex` to underline the fact that linear order of complex numbers can't be established, but it was inconsistent with most of the other objects implementations (which return `nil` for impossible/incompatible comparison instead of raising)
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #15857'
    url: https://bugs.ruby-lang.org/issues/15857
    comments:
  docs:
  - "[Complex#<=>](https://ruby-doc.org/core-2.7.0/Complex.html#method-i-3C-3D-3E)"
  code:
  - "  ```ruby"
  - "  1 + 2i <=> 1 # => nil"
  - "  1 + 2i <=> 1 + 2i # => nil, even if numbers are equal"
  - "  1 + 0i <=> 2 # => -1"
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: Core methods returning frozen strings
  path:
  - Ruby 2.7
  - Core classes and modules
  - Strings, symbols and regexps
  summary: Several core methods now return frozen, deduplicated `String` instead of generating it every time the string is requested.
  reason: Avoiding allocations of new strings for each `#to_s` of primitive objects can save dramatic amounts of memory.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16150'
    url: https://bugs.ruby-lang.org/issues/16150
    comments:
  code:
  - "  ```ruby"
  - "  # Ruby 2.6"
  - "  true.to_s.frozen? # => false"
  - "  3.times.map { true.to_s.object_id }"
  - "  # => [47224710953060, 47224710953040, 47224710953000] -- every time new object"
  - ''
  - "  # Ruby 2.7"
  - "  true.to_s.frozen? # => true"
  - "  3.times.map { true.to_s.object_id }"
  - "  # => [180, 180, 180] -- frozen special string"
  - "  ```"
  notes: "  * The same change was proposed for `Symbol#to_s` (and could've been a dramatic improvement in some kinds of code), but the change turned out to be too disruptive."
  followup: ''
  affects:
  - "[NilClass#to_s](https://ruby-doc.org/core-2.7.0/NilClass.html#method-i-to_s), [TrueClass#to_s](https://ruby-doc.org/core-2.7.0/TrueClass.html#method-i-to_s), [FalseClass#to_s](https://ruby-doc.org/core-2.7.0/TrueClass.html#method-i-to_s), [Module#name](https://ruby-doc.org/core-2.7.0/Module.html#method-i-name)"
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Symbol#start_with?` and `#end_with?`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Strings, symbols and regexps
  reason: Symbol was once thought as "just immutable names" with any of "string-y" operations not making sense for them, but as `Symbol#match` was always present, and `Symbol#match?` [implemented in 2.4](2.4.html#match-method), it turns out that other content inspection methods are also useful.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16348'
    url: https://bugs.ruby-lang.org/issues/16348
    comments:
  docs:
  - "[Symbol#end_with?](https://ruby-doc.org/core-2.7.0/Symbol.html#method-i-end_with-3F), [Symbol#start_with?](https://ruby-doc.org/core-2.7.0/Symbol.html#method-i-start_with-3F)"
  code:
  - "  ```ruby"
  - "  :table_name.end_with?('name', 'value')"
  - "  # => true"
  - "  :table_name.start_with?('table', 'index')"
  - "  # => true"
  - ''
  - "  # Somewhat confusingly, Symbol arguments are not supported"
  - "  :table_name.end_with?(:name, 'value')"
  - "  # TypeError (no implicit conversion of Symbol into String)"
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#floor` and `#ceil`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - "`Time`"
  summary: Rounds Time's nanoseconds down or up to a specified number of digits (0 by default, e.g. round to whole seconds).
  reason: Rounding of nanoseconds important in a test code, when comparing `Time` instances from a different sources (stored in DB, passed through third-party libraries, etc.). Having better control on truncation comparing to `Time#round` (which existed since 1.9.2)
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15653'
    url: https://bugs.ruby-lang.org/issues/15653
    comments: floor, Japanese
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15772'
    url: https://bugs.ruby-lang.org/issues/15772
    comments: ceil
  docs:
  - "[Time#floor](https://ruby-doc.org/core-2.7.0/Time.html#method-i-floor), [Time#ceil](https://ruby-doc.org/core-2.7.0/Time.html#method-i-ceil)"
  code:
  - "  ```ruby"
  - "  t = Time.utc(2019, 12, 24, 5, 43, 25.8765432r)"
  - "  t.floor     # => 2019-12-24 05:43:25 UTC"
  - "  t.floor(2)  # => 2019-12-24 05:43:25.87 UTC"
  - ''
  - "  t.ceil      # => 2019-12-24 05:43:26 UTC"
  - "  t.ceil(2)   # => 2019-12-24 05:43:25.88 UTC"
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#inspect` includes subseconds"
  path:
  - Ruby 2.7
  - Core classes and modules
  - "`Time`"
  reason: 'Losing subseconds in `#inspect` always made debugging and testing harder, producing test failures like "Expected: 2019-12-21 16:11:08 +0200, got 2019-12-21 16:11:08 +0200" (which are visually the same, but one of them, probably going through some serialization or DB storage, has different value for subseconds).'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15958'
    url: https://bugs.ruby-lang.org/issues/15958
    comments:
  docs:
  - "[Time#inspect](https://ruby-doc.org/core-2.7.0/Time.html#method-i-inspect)"
  code:
  - "  ```ruby"
  - "  t = Time.utc(2019, 12, 24, 5, 43, 25.8765432r)"
  - "  p t"
  - '  # Ruby 2.6: prints "2019-12-24 05:43:25 UTC"'
  - '  # Ruby 2.7: prints "2019-12-24 05:43:25.8765432 UTC"'
  - "  puts t"
  - '  # always prints "2019-12-24 05:43:25 UTC"'
  - ''
  - "  # Note that sometimes representation falls back to Rational fractions:"
  - "  t2 = Time.utc(2019,12,31, 23,59,59) + 1.4"
  - "  p t2"
  - "  # => 2020-01-01 00:00:00 900719925474099/2251799813685248 UTC"
  - "  # That's when subseconds can't be represented as 9-digit whole number:"
  - "  (t.subsec * 10**9).to_f"
  - "  # => 876543200.0"
  - "  (t2.subsec * 10**9).to_f"
  - "  # => 399999999.99999994"
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Enumerable#filter_map`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Enumerables and collections
  summary: Transforms elements of enumerable with provided block, and drops falsy results, in one pass.
  reason: Filter suitable elements, then process them somehow is a common flow of sequence processing, yet with `filter { ... }.map { ... }` additional intermediate `Array` is produced, which is not always desirable. Also, some processing can indicate "can't be processed" by returning `false` or `nil`, which requires code like `map { ... }.compact` (to drop `nil`s) or `map { ... }.select(:itself)` (to drop all falsy values).
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15323'
    url: https://bugs.ruby-lang.org/issues/15323
    comments:
  docs:
  - "[Enumerable#filter_map](https://ruby-doc.org/core-2.7.0/Enumerable.html#method-i-filter_map)"
  code:
  - "  ```ruby"
  - "  (1..10).filter_map { |i| i**2 if i.even? } # => [4, 16, 36, 64, 100]"
  - ''
  - "  # imagine method constantize() returning false if string can't be converted to"
  - "  # a proper constant name"
  - "  constant_names = %w[foo 123 _ bar baz/test].filter_map { |str| constantize(str) } # => ['Foo', 'Bar']"
  - ''
  - "  # Without block, returns Enumerator:"
  - "  %w[foo bar baz test].filter_map"
  - "                      .with_index { |str, i| str.capitalize if i.even? }"
  - '  # => ["Foo", "Baz"]'
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Enumerable#tally`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Enumerables and collections
  summary: Counts unique objects in the enumerable and returns hash of `{object => count}`.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11076'
    url: https://bugs.ruby-lang.org/issues/11076
    comments:
  docs:
  - "[Enumerable#tally](https://ruby-doc.org/core-2.7.0/Enumerable.html#method-i-tally)"
  code:
  - "  ```ruby"
  - "  %w[Ruby Python Ruby Perl Python Ruby].tally"
  - '  # => {"Ruby"=>3, "Python"=>2, "Perl"=>1}'
  - "  ```"
  notes: "  ...but was not accepted yet."
  followup: ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Enumerator.produce`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Enumerables and collections
  summary: Produces infinite enumerator by calling provided block and passing its result to subsequent block call.
  reason: "`.produce` allows to convert any `while`-alike or `loop`-alike loops into enumerators, making possible to work with them in a Ruby-idiomatic `Enumerable` style."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14781'
    url: https://bugs.ruby-lang.org/issues/14781
    comments:
  docs:
  - "[Enumerator.produce]()"
  code:
  - "  ```ruby"
  - "  require 'date'"
  - "  # Before: while cycle to search next tuesday:"
  - "  d = Date.today"
  - "  while !d.tuesday"
  - "    d += 1"
  - "  end"
  - "  # After: enumerator:"
  - "  Enumerator.produce(Date.today, &:succ) # => enumerator of infinitely increasing dates"
  - "            .find(&:tuesday?)"
  - ''
  - "  require 'strscan'"
  - "  PATTERN = %r{\\d+|[-/+*]}"
  - "  scanner = StringScanner.new('7+38/6')"
  - "  # Before: while cycle to implement simple lexer:"
  - "  result ="
  - "  result << scanner.scan(PATTERN) while !scanner.eos?"
  - "  # After: achieving the same with enumerator (which can be passed to other methods to process):"
  - "  Enumerator.produce { scanner.scan(PATTERN) }.slice_after { scanner.eos? }.first"
  - '  # => ["7", "+", "38", "/", "6"]'
  - ''
  - "  # Raising StopIteration allows to stop the iteration:"
  - "  ancestors = Enumerator.produce(node) { |prev| prev.parent or raise StopIteration }"
  - "  # => enumerator"
  - "  enclosing_section = ancestors.find { |n| n.type == :section } # => :section node or nil"
  - ''
  - "  # If the initial value is passed, it is an argument to first block call, and yielded as a first"
  - "  # value of enumerator"
  - '  Enumerator.produce(1) { |prev| p "PREVIOUS: #{prev}"; prev + 1 }.take(3)'
  - '  # "PREVIOUS: 1"'
  - '  # "PREVIOUS: 2"'
  - "  #  => [1, 2, 3]"
  - ''
  - "  # If the initial value is not passed, first block call receives `nil`, and the block's first result"
  - "  # is yielded as a first value of enumerator"
  - '  Enumerator.produce { |prev| p "PREVIOUS: #{prev.inspect}"; (prev || 0) + 1 }.take(3)'
  - '  # "PREVIOUS: nil"'
  - '  # "PREVIOUS: 1"'
  - '  # "PREVIOUS: 2"'
  - "  #  => [1, 2, 3]"
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Enumerator::Lazy#eager`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Enumerables and collections
  summary: Converts lazy enumerator back to eager one.
  reason: When working with large data sequences, lazy enumerators are useful tools to not produce intermediate array on each step. But some data consuming methods expect to receive enumerators that would really return data from methods like `take_while` and not just add them to pipeline.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15901'
    url: https://bugs.ruby-lang.org/issues/15901
    comments:
  docs:
  - "[Enumerator::Lazy#eager](https://ruby-doc.org/core-2.7.0/Enumerator/Lazy.html#method-i-eager)"
  code:
  - "  ```ruby"
  - "  # Imagine we read very large data file:"
  - "  lines ="
  - "    File.open('data.csv')"
  - "        .each_line"
  - "        .lazy"
  - '        .map { |ln| ln.sub(/\#.+$/, '''').strip } # remove "comments"'
  - "        .reject(&:empty?)  # drop empty lines"
  - "  p lines"
  - "  # => #<Enumerator::Lazy: ....>"
  - ''
  - '  # Now, we want to consume just "headers" from this CSV, and pass the rest of enumerator'
  - "  # into the other methods."
  - ''
  - "  # This code:"
  - "  headers = lines.take_while { |ln| ln.start_with?('$$$') }"
  - "  # ...will just produce another lazy enumerator, with `take_while` chained to pipeline."
  - ''
  - "  # Now, this:"
  - "  lines = lines.eager # makes the enumerator eager, but (unlike `#force`) doesn't consume it yet"
  - "  p lines"
  - "  # => #<Enumerator: #<Enumerator::Lazy: ...>:each>"
  - ''
  - "  # consumes only several first lines and returns array of headers"
  - "  headers = lines.take_while { |ln| ln.start_with?('$$$') }"
  - "  # => [array, of, header, lines]"
  - ''
  - "  # now we can pass `lines` to methods that expect take_while/take and other similar methods to"
  - "  # consume enumerator partially and return arrays"
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Enumerator::Yielder#to_proc`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Enumerables and collections
  reason: When constructing the enumerator, value yielding is frequently delegated to other methods, which accept blocks. Before the change, it was inconvenient to delegate.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15618'
    url: https://bugs.ruby-lang.org/issues/15618
    comments:
  docs:
  - "[Enumerator::Yielder#to_proc](https://ruby-doc.org/core-2.7.0/Enumerator/Yielder.html#method-i-to_proc)"
  code:
  - "  ```ruby"
  - "  # Construct a enumerator which will pass all lines from all files from some folder:"
  - ''
  - "  # Before the change:"
  - "  all_lines = Enumerator.new { |y| # y is Yielder object here"
  - '    Dir.glob("*.rb") { |file|'
  - "      File.open(file) { |f| f.each_line { |ln| y << ln } }"
  - "    }"
  - "  }"
  - ''
  - "  # After the change:"
  - "  all_lines = Enumerator.new { |y| # y is Yielder object here"
  - '    Dir.glob("*.rb") { |file|'
  - "      File.open(file) { |f| f.each_line(&y) }"
  - "    }"
  - "  }"
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Array#intersection`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Enumerables and collections
  summary: Like `Array#union` and `#difference`, [added](2.6.html#arrayunion-and-arraydifference) in 2.6 as a explicitly-named and accepting multiple arguments alternatives for `#|` and `#-`, the new method is alternative for `#&`.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16155'
    url: https://bugs.ruby-lang.org/issues/16155
    comments:
  docs:
  - "[Array#intersection](https://ruby-doc.org/core-2.7.0/Array.html#method-i-intersection)"
  code:
  - "  ```ruby"
  - '  [''Ruby'', ''Python'', ''Perl''].intersection([''Ruby'', ''Diamond'', ''Perl''], [''Ruby'', ''Nikole'', ''Kate'']) # => ["Ruby"]'
  - ''
  - '  [''Ruby'', ''Python'', ''Perl''].intersection # => ["Ruby", "Python", "Perl"]'
  - "  ```"
  followup: ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`ObjectSpace::WeakMap#[]=` now accepts non-GC-able objects"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Enumerables and collections
  reason: '`ObjectSpace::WeakMap` (the `Hash` variety that doesn''t hold its contents from being garbage-collected) is mostly thought, as the name implies, as an "internal" thing. But turns out it can have some legitimate usages in a regular code, for example, implementing flexible caching (cache which "auto-cleans" on garbage collection). But before this change, keys for `WeekMap` wasn''t allowed to be non-GC-able (for example, numbers and symbols), which prohibits some interesting usages.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16035'
    url: https://bugs.ruby-lang.org/issues/16035
    comments:
  docs:
  - "[WeekMap#[]=](https://ruby-doc.org/core-2.7.0/ObjectSpace/WeakMap.html#method-i-5B-5D-3D)"
  code:
  - "  ```ruby"
  - "  map = ObjectSpace::WeakMap.new"
  - "  map[1] = Object.new"
  - "  # Ruby 2.6: ArgumentError (cannot define finalizer for Integer)"
  - "  # Ruby 2.7: Writes the map successfully"
  - "  map[1]"
  - "  # => #<Object:0x0000561ea70ec3d0>"
  - "  GC.start"
  - "  map[1]"
  - "  # => nil  -- value successfully collected, even if key was not GC-able"
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Fiber#raise`"
  path:
  - Ruby 2.7
  - Core classes and modules
  summary: Raises exception inside the resumed Fiber.
  reason: Ability to raise an exception inside Fiber makes control passing abilities more feature-complete.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #10344'
    url: https://bugs.ruby-lang.org/issues/10344
    comments:
  docs:
  - "[Fiber#raise](https://ruby-doc.org/core-2.7.0/Fiber.html#method-i-raise)"
  code:
  - "  ```ruby"
  - "  f = Fiber.new {"
  - "    Enumerator.produce { Fiber.yield } # Infinite yielding enumerator, breaks on StopIteration"
  - "              .to_a.join(', ')"
  - "  }"
  - "  f.resume"
  - "  f.resume 1"
  - "  f.resume 2"
  - "  f.resume 3"
  - '  f.raise StopIteration # => "1, 2, 3"'
  - "  ```"
  notes: ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#===` for `String`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - "`Range`"
  summary: In 2.6, `Range#===` was changed to use `#cover?` underneath, but not for `String`. This was fixed.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #15449'
    url: https://bugs.ruby-lang.org/issues/15449
    comments:
  docs:
  - "[Range#===](https://ruby-doc.org/core-2.7.0/Range.html#method-i-3D-3D-3D)"
  code:
  - "  ```ruby"
  - "  case '2.6.5'"
  - "  when '2.4'..'2.7'"
  - "    'matches'"
  - "  else"
  - "    'nope :('"
  - "  end"
  - '  # => "nope :(" in 2.6, "matches" in 2.7'
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#minmax` implementation change"
  path:
  - Ruby 2.7
  - Core classes and modules
  - "`Range`"
  summary: "`Range#minmax` switched to returning `Range#end` instead of iterating through Range to get maximum value."
  reason: "  ```"
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15807'
    url: https://bugs.ruby-lang.org/issues/15807
    comments:
  docs:
  - "[Range#minmax](https://ruby-doc.org/core-2.7.0/Range.html#method-i-minmax)"
  code:
  - "  ```ruby"
  - "  (1..).minmax # => RangeError (cannot get the maximum of endless range)"
  - "  (1..Float::INFINITY).minmax # => [1, Infinity]"
  - '  ("a".."aa").minmax # => ["a", "aa"]'
  - "  ```"
  - ''
  notes: ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`IO#set_encoding_by_bom`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Filesystem and IO
  summary: Auto-sets encoding to UTF-8 if byte-order mark is present in the stream.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15210'
    url: https://bugs.ruby-lang.org/issues/15210
    comments:
  docs:
  - "[IO#set_encoding_by_bom](https://ruby-doc.org/core-2.7.0/IO.html#method-i-set_encoding_by_bom)"
  code:
  - "  ```ruby"
  - '  File.write("tmp/bom.txt", "\u{FEFF}мама")'
  - '  ios = File.open("tmp/bom.txt", "rb")'
  - "  ios.binmode? # => true"
  - "  ios.external_encoding # => #<Encoding:ASCII-8BIT>"
  - "  ios.set_encoding_by_bom # => #<Encoding:UTF-8>"
  - "  ios.external_encoding # => #<Encoding:UTF-8>"
  - '  ios.read # => "мама"'
  - ''
  - '  File.write("tmp/nobom.txt", "мама")'
  - '  ios = File.open("tmp/nobom.txt", "rb")'
  - "  ios.set_encoding_by_bom # => nil"
  - "  ios.external_encoding # => #<Encoding:ASCII-8BIT>"
  - '  ios.read # => "\xD0\xBC\xD0\xB0\xD0\xBC\xD0\xB0"'
  - ''
  - "  # The method raises in non-binary-mode streams, or if encoding already set:"
  - '  File.open("tmp/bom.txt", "r").set_encoding_by_bom'
  - "  # ArgumentError (ASCII incompatible encoding needs binmode)"
  - '  File.open("tmp/bom.txt", "rb", encoding: ''Windows-1251'').set_encoding_by_bom'
  - "  # ArgumentError (encoding is set to Windows-1251 already)"
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Dir.glob` and `Dir.[]` not allow `\\0`-separated patterns"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Filesystem and IO
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14643'
    url: https://bugs.ruby-lang.org/issues/14643
    comments:
  docs:
  - "[Dir.glob](https://ruby-doc.org/core-2.7.0/Dir.html#method-c-glob)"
  code:
  - "  ```ruby"
  - '  Dir.glob("*.rb\0*.md")'
  - "  # 2.6:"
  - "  #   warning: use glob patterns list instead of nul-separated patterns"
  - '  #   => ["2.5.md", "History.md", "README.md" ...'
  - "  # 2.7"
  - "  #   ArgumentError (nul-separated glob pattern is deprecated)"
  - ''
  - "  # Proper alternative, works in 2.7 and earlier versions:"
  - '  Dir.glob(["*.rb", "*.md"])'
  - '  # => ["2.5.md", "History.md", "README.md" ...'
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: '`File.extname` returns a `"."` string at a name ending with a dot.'
  path:
  - Ruby 2.7
  - Core classes and modules
  - Filesystem and IO
  reason: It is argued that `File.basename(str, '.*') + File.extname(str)` should always reconstruct the full name, but it was not the case for names like `image.`
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #15267'
    url: https://bugs.ruby-lang.org/issues/15267
    comments:
  docs:
  - "[File.extname](https://bugs.ruby-lang.org/issues/15267)"
  code:
  - "  ```ruby"
  - '  filename = "image."'
  - '  [File.basename(filename, ".*"), File.extname(filename)]'
  - '  # 2.6: => ["image", ""]   -- the dot is lost'
  - '  # 2.7: => ["image", "."]'
  - "  ```"
  - ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`FrozenError`: receiver argument"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Exceptions
  summary: In 2.6 several exception class constructors [were enhanced](2.6.html#new-arguments-receiver-and-key) so the user code could create them providing context, now `FrozenError` also got this functionality.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15751'
    url: https://bugs.ruby-lang.org/issues/15751
    comments:
  docs:
  - "[FrozenError#new](https://ruby-doc.org/core-2.7.0/FrozenError.html#method-c-new)"
  code:
  - "  ```ruby"
  - "  class AlwaysFrozenHash < Hash"
  - "    # ..."
  - "    def update!(*)"
  - '      raise FrozenError.new("I am frozen!", receiver: self)'
  - "    end"
  - "  end"
  - "  ```"
  notes: ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`$LOAD_PATH.resolve_feature_path`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Interpreter internals
  summary: "`resolve_feature_path` was [introduced](2.6.html#rubyvmresolve_feature_path) in Ruby 2.6 as `RubyVM` method, now it is singleton method of `$LOAD_PATH` global variable."
  reason: It was argued that `RubyVM` should contain code specific for particular Ruby implementation (e.g. it can be different between CRuby/JRuby/TruffleRuby/etc.), while `resolve_feature_path` is a generic feature that should behave consistently between Ruby implementations.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15903'
    url: https://bugs.ruby-lang.org/issues/15903
    comments:
  docs:
  - _As it turns, documenting global's singleton method is not easy. So it is just mentioned at_ [doc/globals.rdoc](https://ruby-doc.org/core-2.7.0/doc/globals_rdoc.html)
  code:
  - "  ```ruby"
  - "  $LOAD_PATH.resolve_feature_path('net/http')"
  - '  # => [:rb, "/home/zverok/.rvm/rubies/ruby-head/lib/ruby/2.7.0/net/http.rb"]'
  - "  ```"
  notes: ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`resolve_feature_path` behavior for loaded features fixed"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Interpreter internals
  summary: In 2.6, `resolve_feature_path` returned `false` instead of the path for already loaded libraries. That was fixed.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15230'
    url: https://bugs.ruby-lang.org/issues/15230
    comments:
  docs:
  - "— _(see above)_"
  code:
  - "  ```ruby"
  - "  # Ruby 2.6:"
  - "  RubyVM.resolve_feature_path('net/http')"
  - '  # => [:rb, "<...>/lib/ruby/2.6.0/net/http.rb"]'
  - "  require 'net/http'"
  - "  RubyVM.resolve_feature_path('net/http')"
  - "  # => [:rb, false]"
  - ''
  - "  # Ruby 2.7:"
  - "  $LOAD_PATH.resolve_feature_path('net/http')"
  - '  # => [:rb, "<...>/lib/ruby/2.7.0/net/http.rb"]'
  - "  require 'net/http'"
  - "  $LOAD_PATH.resolve_feature_path('net/http')"
  - '  # => [:rb, "<...>/lib/ruby/2.7.0/net/http.rb"]'
  - "  ```"
  followup: ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`GC.compact`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Interpreter internals
  summary: Ruby 2.7 ships with an improved GC, which allows to manually defragment memory.
  reason: 'After some time of application running, creating objects and garbage collecting them, the memory becomes "fragmented": there are a large holes of unused memory between actual living objects. The new methods meant to be called between, say, spanning of the new processes/workers, potentially making current process using less memory.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15626'
    url: https://bugs.ruby-lang.org/issues/15626
    comments:
  docs:
  - "[GC.compact](https://ruby-doc.org/core-2.7.0/GC.html#method-c-compact)"
  notes: ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Warning::[]` and `::[]=`"
  path:
  - Ruby 2.7
  - Core classes and modules
  - Interpreter internals
  summary: Allows to emit/suppress separate categories of warnings.
  reason: 2.7 introduced a lot of new deprecations (especially around keyword arguments, there can easily be thousands), and one "really experimental" feature (pattern matching), which emits warning about its experimental status on every use. To make working with older code, or experimenting with new features, less tiresome, the ability to turn warnings on and off per category was introduced.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16345'
    url: https://bugs.ruby-lang.org/issues/16345
    comments: deprecated warnings
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16420'
    url: https://bugs.ruby-lang.org/issues/16420
    comments: experimental warnings
  docs:
  - "[Warning::[]](https://ruby-doc.org/core-2.7.0/Warning.html#method-c-5B-5D), [Warning::[]=](https://ruby-doc.org/core-2.7.0/Warning.html#method-c-5B-5D-3D)"
  code:
  - "  ```ruby"
  - "  {a: 1} in {a:}"
  - "  # warning: Pattern matching is experimental, and the behavior may change in future versions of Ruby!"
  - "  Warning[:experimental] = false"
  - "  {a: 1} in {a:}"
  - "  # ...no warning issued..."
  - ''
  - "  def old_method(hash, **kwargs)"
  - "  end"
  - ''
  - "  old_method(foo: 'bar')"
  - "  # warning: Passing the keyword argument as the last hash parameter is deprecated"
  - "  Warning[:deprecated] = false"
  - "  old_method(foo: 'bar')"
  - "  # ...no warning..."
  - ''
  - "  # The current settings can be inspected:"
  - "  Warning[:deprecated] # => false"
  - "  # ...and changed back:"
  - "  Warning[:deprecated] = true"
  - "  old_method(foo: 'bar')"
  - "  # warning: Passing the keyword argument as the last hash parameter is deprecated"
  - "  ```"
  notes: '  * Another way to turn on and off separate categories of warnings is passing `-W:(no-)<category>` flag to ruby interpreter, e.g. `-W:no-experimental` means "no warnings when using experimental features".'
  followup: ''
  release: 2.7
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: Keyword arguments are now fully separated from positional arguments
  path:
  - Ruby 3.0
  - Language changes
  summary: 'The separation which [started in 2.7](2.7.html#keyword-argument-related-changes) with deprecations, is now fully finished. It means  keyword arguments are not a "syntax sugar" on top of hashes, and they never converted into each other implicitly:'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14183'
    url: https://bugs.ruby-lang.org/issues/14183
    comments:
  code:
  - "  ```ruby"
  - "  def old_style(name, options = {})"
  - "  end"
  - ''
  - "  def new_style(name, **options)"
  - "  end"
  - ''
  - "  new_style('John', {age: 10})"
  - "  # Ruby 2.6: works"
  - "  # Ruby 2.7: warns: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call"
  - "  # Ruby 3.0: ArgumentError (wrong number of arguments (given 2, expected 1))"
  - "  new_style('John', age: 10)"
  - "  # => works"
  - "  h = {age: 10}"
  - "  new_style('John', **h)"
  - "  # => works, ** is mandatory"
  - ''
  - "  # The last hash argument still allowed to be passed without {}:"
  - "  old_style('John', age: 10)"
  - "  # => works"
  - "  ```"
  notes: ''
  release: 3.0
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: 'Procs with "rest" arguments and keywords: change of autosplatting behavior'
  path:
  - Ruby 3.0
  - Language changes
  - Keyword arguments are now fully separated from positional arguments
  summary: Just a leftover from the separation of keyword arguments.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16166'
    url: https://bugs.ruby-lang.org/issues/16166
    comments:
  code:
  - "  ```ruby"
  - '  block = proc { |*args, **kwargs| puts "args=#{args}, kwargs=#{kwargs}"}'
  - "  block.call(1, 2, a: true)"
  - "  # Ruby 2.7: args=[1, 2], kwargs={:a=>true} -- as expected"
  - "  # Ruby 3.0: args=[1, 2], kwargs={:a=>true} -- same"
  - "  block.call(1, 2, {a: true})"
  - "  # Ruby 2.7:"
  - "  #  warning: Using the last argument as keyword parameters is deprecated"
  - "  #  args=[1, 2], kwargs={:a=>true} -- but extracted to keyword args nevertheless"
  - "  # Ruby 3.0:"
  - "  #  args=[1, 2, {:a=>true}], kwargs={} -- no attempt to extract hash into keywords, and no error/warning"
  - "  ```"
  - ''
  release: 3.0
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: Arguments forwarding (`...`) supports leading arguments
  path:
  - Ruby 3.0
  - Language changes
  reason: ''
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16378'
    url: https://bugs.ruby-lang.org/issues/16378
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16746'
    url: https://bugs.ruby-lang.org/issues/16746
    comments:
  docs:
  - "[doc/syntax/methods.rdoc](https://docs.ruby-lang.org/en/master/syntax/methods_rdoc.html#label-Argument+forwarding) _<small>(the link is to a `master` version, docs were merged post 3.0 release)</small>_"
  - "[doc/syntax/methods.rdoc](https://docs.ruby-lang.org/en/master/syntax/methods_rdoc.html) _<small>(the link is to a `master` version, docs were merged post 3.0 release)</small>_"
  code:
  - "  ```ruby"
  - "  def request(method, url, headers: {})"
  - '    puts "#{method.upcase} #{url} (headers=#{headers})"'
  - "  end"
  - ''
  - "  def get(...)"
  - "    request(:get, ...)"
  - "  end"
  - ''
  - "  get('https://example.com', headers: {content_type: 'json'})"
  - '  # GET https://example.com (headers={:content_type=>"json"})'
  - ''
  - "  # Leading arguments may be present both in the call and in the definition:"
  - "  def logged_get(message, ...)"
  - "    puts message"
  - "    get(...)"
  - "  end"
  - ''
  - "  logged_get('Logging', 'https://example.com', headers: {content_type: 'json'})"
  - "  ```"
  - ''
  - "  ```ruby"
  - '  def dbg = puts("DBG: #{caller.first}")'
  - ''
  - "  dbg"
  - "  # Prints: DBG: test.rb:3:in `<main>'"
  - ''
  - "  # The method definition supports all kinds of arguments:"
  - '  def dbg_args(a, b=1, c:, d: 6, &block) = puts("Args passed: #{[a, b, c, d, block.call]}")'
  - "  dbg_args(0, c: 5) { 7 }"
  - "  # Prints: Args passed: [0, 1, 5, 6, 7]"
  - ''
  - "  # For argument definition, () is mandatory"
  - "  def square x = x**2"
  - "  # syntax error, unexpected end-of-input -- because Ruby treats it as"
  - "  #   def square(x = x**2)"
  - "  # ...e.g. an argument with default value, referencing itself, and no method body"
  - ''
  - "  # This works"
  - "  def square(x) = x**2"
  - "  square(100) # => 10000"
  - ''
  - "  # To avoid confusion, defining method names like #foo= is prohibited"
  - "  class A"
  - '    # SyntaxError "setter method cannot be defined in an endless method definition":'
  - "    def attr=(val) = @attr = val"
  - ''
  - "    # Other suffixes are OK:"
  - "    def attr?() = !!@attr"
  - "    def attr!() = @attr = true"
  - "  end"
  - ''
  - "  # funnily enough, operator methods are OK, including #=="
  - "  class A"
  - "    def ==(other) = true"
  - "  end"
  - ''
  - "  p A.new == 5 # => true"
  - ''
  - "  # any singular expression can be method body"
  - ''
  - "  # This works:"
  - "  def read(name) = File.read(name)"
  - '                       .split("\n")'
  - "                       .map(&:strip)"
  - "                       .reject(&:empty?)"
  - "                       .uniq"
  - "                       .sort"
  - ''
  - "  # Or even this, though, what's the point?.."
  - "  def weird(name) = begin"
  - "                      data = File.read(name)"
  - "                      process(data)"
  - "                      true"
  - "                    rescue"
  - "                      false"
  - "                    end"
  - ''
  - "  # inside method body, method calls without parentheses cause a syntax error:"
  - '  def foo() = puts "bar"'
  - "  #                ^ syntax error, unexpected string literal, expecting `do' or '{' or '('"
  - ''
  - "  # This is due to parsing ambiguity and is aligned with some other places, like"
  - "  x = 1 + sin y"
  - "  #           ^ syntax error, unexpected tIDENTIFIER, expecting keyword_do or '{' or '('"
  - "  ```"
  notes: "  * Feature is marked as EXPERIMENTAL, but it does NOT produce a warning, it is deliberate, see discussion in [Misc #17399](https://bugs.ruby-lang.org/issues/17399)."
  followup: ''
  release: 3.0
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: One-line pattern matching with `=>`
  path:
  - Ruby 3.0
  - Language changes
  - Pattern matching
  reason: 'This is an interesting one. Two facts were discussed between 2.7 and 3.0: the fact that in most of the other languages one-line pattern matching has a different order (`<pattern> <operator> <data>`) than introduced in Ruby 2.7 (`<data> in <pattern>`); and the idea of "rightward assignment operator" `=>` for more natural chaining. And then, at some point, ideas converged most fruitfully.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17260'
    url: https://bugs.ruby-lang.org/issues/17260
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16670'
    url: https://bugs.ruby-lang.org/issues/16670
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15921'
    url: https://bugs.ruby-lang.org/issues/15921
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15799'
    url: https://bugs.ruby-lang.org/issues/15799
    comments:
  docs:
  - "[doc/syntax/pattern_matching.rdoc](https://docs.ruby-lang.org/en/3.0.0/syntax/pattern_matching_rdoc.html)"
  code:
  - "  ```ruby"
  - "  # match and unpack:"
  - "  {db: {user: 'John', role: 'admin'}} => {db: {user:, role:}}"
  - '  p [user, role] # => ["John", "admin"]'
  - ''
  - "  # pattern-matching as a rightward assignment for long experessions:"
  - "  File.read('test.txt')"
  - '      .split("\n")'
  - "      .map(&:strip)"
  - "      .reject(&:empty?)"
  - "      .first(10) => lines"
  - ''
  - "  p lines # first 10 non-empty lines of the file"
  - ''
  - "  # unpacking+assignment is extremely powerful:"
  - "  (1..10).to_a.shuffle => [*before, (2..4) => threshold, *after]"
  - "  # ...in input sequence, find first entry in range 2..4, put it into `threshold`,"
  - "  # and split parts of the sequence before/after it"
  - "  p [before, threshold, after]    # your results might be different due to shuffle :)"
  - "  # => [[7, 5, 8], 3, [1, 10, 6, 9, 4, 2]]"
  - ''
  - "  # The things can get really out of hand quickly:"
  - "  Time.now.hour => ..9 | 18.. => non_working_hour"
  - "  ```"
  notes: "    ```"
  followup: ''
  release: 3.0
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`in` as a `true`/`false` check"
  path:
  - Ruby 3.0
  - Language changes
  - Pattern matching
  summary: After the change described above, `in` was reintroduced to return `true`/`false` (whether the pattern matches) instead of raising `NoMatchingPatternError`.
  reason: The new meaning allows pattern matching to be more tightly integrated with other constructs in the control flow, like iteration and regular conditions.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17371'
    url: https://bugs.ruby-lang.org/issues/17371
    comments:
  docs:
  - "[doc/syntax/pattern_matching.rdoc](https://docs.ruby-lang.org/en/3.0.0/syntax/pattern_matching_rdoc.html)"
  code:
  - "  ```ruby"
  - "  user = {role: 'admin', login: 'matz'}"
  - "  if user in {role: 'admin', login:}"
  - '    puts "Granting admin scope: #{login}"'
  - "  end"
  - "  # otherwise just proceed with regular scope, no need to raise"
  - ''
  - "  users = ["
  - "    {name: 'John', role: 'user'},"
  - "    {name: 'Jane', registered_at: Time.new(2017, 5, 8) },"
  - "    {name: 'Barb', role: 'admin'},"
  - "    {name: 'Dave', role: 'user'}"
  - "  ]"
  - "  old_users_range = Time.new(2016)..Time.new(2019)"
  - "  # Choose for some notification only admins and old users"
  - "  users.select { |u| u in {role: 'admin'} | {registered_at: ^old_users_range} }"
  - '  #=> [{:name=>"Jane", :registered_at=>2017-05-08 00:00:00 +0300}, {:name=>"Barb", :role=>"admin"}]'
  - "  ```"
  notes: "  * Feature is marked as EXPERIMENTAL, will warn so on an attempt of usage, and may change in the future."
  followup: ''
  release: 3.0
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: Find pattern
  path:
  - Ruby 3.0
  - Language changes
  - Pattern matching
  summary: Pattern matching now supports "find patterns", with several splats in them.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16828'
    url: https://bugs.ruby-lang.org/issues/16828
    comments:
  docs:
  - "[doc/syntax/pattern_matching.rdoc](https://docs.ruby-lang.org/en/3.0.0/syntax/pattern_matching_rdoc.html)"
  code:
  - "  ```ruby"
  - "  users = ["
  - "    {name: 'John', role: 'user'},"
  - "    {name: 'Jane', role: 'manager'},"
  - "    {name: 'Barb', role: 'admin'},"
  - "    {name: 'Dave', role: 'manager'}"
  - "  ]"
  - ''
  - "  # Now, how do you find admin with just pattern matching?.."
  - ''
  - "  # Ruby 3.0:"
  - "  case users"
  - "  in [*, {name:, role: 'admin'}, *] # Note the pattern: find something in the middle, with unknown number of items before/after"
  - '    puts "Admin: #{name}"'
  - "  end"
  - "  # => Admin: Barb"
  - ''
  - "  # Without any limitations to choose the value, the first splat is non-greedy:"
  - "  case users"
  - "  in [*before, user, *after]"
  - '    puts "Before match: #{before}"'
  - '    puts "Match: #{user}"'
  - '    puts "After match: #{after}"'
  - "  end"
  - "  # Before match: []"
  - '  # Match: {:name=>"John", :role=>"user"}'
  - '  # After match: [{:name=>"Jane", :role=>"manager"}, {:name=>"Barb", :role=>"admin"}, {:name=>"Dave", :role=>"manager"}]'
  - ''
  - "  # Guard clause does not considered when choosing where to splat:"
  - "  case users"
  - "  in [*, user, *] if user[:role] == 'admin'"
  - '    puts "User: #{user}"'
  - "  end"
  - "  # => NoMatchingPatternError -- it first put John into `user`,"
  - "  # and only then checked the guard clause, which is not matching"
  - ''
  - '  # If the "find pattern" is used (there is more than one splat in the pattern),'
  - "  # there should be exactly TWO of them, and they may ONLY be the very first and"
  - "  # the very last element:"
  - "  case users"
  - "  in [first_user, *, {name:, role: 'admin'}, *]"
  - "    #                                        ^  syntax error, unexpected *"
  - '    puts "Admin: #{name}"'
  - "  end"
  - ''
  - "  # Singular splat is still allowe in any place:"
  - "  case users"
  - "  in [{name: first_user_name}, *, {name: last_user_name}]"
  - '    puts "First user: #{first_user_name}, last user: #{last_user_name}"'
  - "  end"
  - "  # => First user: John, last user: Dave"
  - "  ```"
  notes: ''
  release: 3.0
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: Changes in class variable behavior
  path:
  - Ruby 3.0
  - Language changes
  summary: When class `@@variable` is overwritten by the parent of the class, or by the module included, the error is raised. In addition, top-level class variable access also raises an error.
  reason: Class variables, with their "non-intuitive" access rules, are frequently considered a bad practice. They still can be very useful for tracking something across class hierarchy. But the fact that the entire hierarchy shares the same variable may lead to hard-to-debug bugs, so it was fixed to raise on the usage that seems unintentional.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #14541'
    url: https://bugs.ruby-lang.org/issues/14541
    comments:
  docs:
  - "—"
  code:
  - "  ```ruby"
  - "  # Intended usage: parent defines the variable available for all children"
  - "  class Good"
  - "    @@registry = [] # assume it is meant to store all the children"
  - ''
  - "    def self.registry"
  - "      @@registry"
  - "    end"
  - "  end"
  - ''
  - "  class GoodChild < Good"
  - "    def self.register!"
  - "      @@registry << self"
  - "      @@registry = @@registry.sort # reassigning the value -- but it is still the PARENT's variable"
  - "    end"
  - "  end"
  - ''
  - "  GoodChild.register!"
  - "  p Good.registry # => [GoodChild]"
  - ''
  - "  # Unintended usage: the variable is defined in the child, but then the parent changes it"
  - "  class Bad"
  - "    def self.corrupt_registry!"
  - "      @@registry = []"
  - "    end"
  - "  end"
  - ''
  - "  class BadChild < Bad"
  - "    @@registry = {} # This is some variable which meant to belong to THIS class"
  - ''
  - "    def self.registry"
  - "      @@registry"
  - "    end"
  - "  end"
  - ''
  - "  Bad.corrupt_registry! # Probably unexpected for BadChild's author, its ancestor have changed the variable"
  - "  BadChild.registry     # On the next attempt to _access_ the variable the error will be raised"
  - "  # 2.7: => []"
  - "  # 3.0: RuntimeError (class variable @@registry of BadChild is overtaken by Bad)"
  - ''
  - "  # The same error is raised if the included module suddenly changes class"
  - "  module OtherRegistry"
  - "    @@registry = {}"
  - "  end"
  - ''
  - "  Good.include OtherRegistry"
  - "  Good.registry      # On the next attempt to _access_ the variable the error will be raised"
  - "  # 2.7: => {}"
  - "  # 3.0: RuntimeError (class variable @@registry of Good is overtaken by OtherRegistry)"
  - "  ```"
  - ''
  release: 3.0
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Object#clone(freeze: true)`"
  path:
  - Ruby 3.0
  - Core classes and modules
  summary: "`freeze:` argument now works both ways (previously only `freeze: false` had an effect)."
  reason: 'Mostly for consistency. `Object#clone(freeze: false)` was [introduced in Ruby 2.4](2.4.html#objectclonefreeze-false) as an _only_ way of producing unfrozen object; `clone(freeze: true)` is basically an equivalent of `clone` + `freeze`.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16175'
    url: https://bugs.ruby-lang.org/issues/16175
    comments:
  docs:
  - "[Kernel#clone](https://docs.ruby-lang.org/en/3.0.0/Kernel.html#method-i-clone)"
  code:
  - "  ```ruby"
  - "  o = Object.new"
  - "  o.clone(freeze: true).frozen?"
  - "  # => false in Ruby 2.7"
  - "  # => true in Ruby 3.0"
  - ''
  - "  o = Object.new.freeze"
  - "  o.clone(freeze: false).frozen?"
  - "  # => false in Ruby 2.7 and 3.0"
  - "  ```"
  - ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Object#clone` passes `freeze:` argument to `#initialize_clone`"
  path:
  - Ruby 3.0
  - Core classes and modules
  summary: Specialized constructor `#initialize_clone`, which is called when object is cloned, now receives `freeze:` argument if it was passed to `#clone`.
  reason: For composite objects, it is hard to address freezing/unfreezing of nested data in `#initialize_clone` without this argument.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #14266'
    url: https://bugs.ruby-lang.org/issues/14266
    comments:
  docs:
  - "[Kernel#clone](https://docs.ruby-lang.org/en/3.0.0/Kernel.html#method-i-clone)"
  code:
  - "  ```ruby"
  - "  require 'set'"
  - "  set = Set[1, 2, 3].freeze"
  - "  set.frozen? # => true"
  - "  set.instance_variable_get('@hash').frozen? # => true, as expected"
  - ''
  - "  unfrozen = set.clone(freeze: false)"
  - "  unfrozen.frozen? # => false, as expected"
  - "  unfrozen.instance_variable_get('@hash').frozen?"
  - "  # 2.7: => true, still"
  - "  # 3.0: => false, as it should be -- becase Set have redefined #initialize_clone"
  - ''
  - "  unfrozen << 4"
  - "  # 2.7: FrozenError (can't modify frozen Hash: {1=>true, 2=>true, 3=>true})"
  - "  # 3.0: => #<Set: {1, 2, 3, 4}>"
  - "  ```"
  notes: ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Kernel#eval` changed processing of `__FILE__` and `__LINE__`"
  path:
  - Ruby 3.0
  - Core classes and modules
  summary: Now, when the second argument (`binding`) is passed to `eval`, `__FILE__` in evaluated code is `(eval)`, and `__LINE__` starts from `1` (just like without `binding`). Before 2.7 it was evaluated in context of `binding` (e.g. returned file from where `binding` came from), on 2.7 the warning was printed; now the behavior is considered final.
  reason: Binding might be passed to `eval` in order to provide the access to some context necessary for evaluation (this technique, for example, frequently used in templating engines); but it had an unintended consequence of making `__FILE__` and `__LINE__` to point not to actually evaluated code, which can be misleading, for example, on errors processing.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #4352'
    url: https://bugs.ruby-lang.org/issues/4352
    comments:
  code:
  - "  ```ruby"
  - "  # file a.rb"
  - "  class A"
  - "    def get_binding"
  - "      binding"
  - "    end"
  - "  end"
  - ''
  - "  # file b.rb"
  - "  require_relative 'a'"
  - "  eval('p [__FILE__, __LINE__]')                    # without binding"
  - "  eval('p [__FILE__, __LINE__]', A.new.get_binding) # with binding from another file"
  - "  # Ruby 2.6:"
  - '  #  ["(eval)", 1]'
  - '  #  ["a.rb", 3]'
  - ''
  - "  # Ruby 2.7:"
  - '  #  ["(eval)", 1]'
  - '  #  ["a.rb", 3]'
  - "  #   warning: __FILE__ in eval may not return location in binding; use Binding#source_location instead"
  - "  #   warning: __LINE__ in eval may not return location in binding; use Binding#source_location instead"
  - ''
  - "  # Ruby 3.0:"
  - '  #  ["(eval)", 1]'
  - '  #  ["(eval)", 1]'
  - "  ```"
  - ''
  affects:
  - "[Kernel#eval](https://docs.ruby-lang.org/en/3.0.0/Kernel.html#method-i-eval), [Binding#eval](https://docs.ruby-lang.org/en/3.0.0/Binding.html#method-i-eval)"
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Regexp` and `Range` objects are frozen"
  path:
  - Ruby 3.0
  - Core classes and modules
  reason: 'The change is related to Ractor introduction (see below): it makes a difference whether an object is frozen when sharing it between ractors. As both ranges and regexps have immutable core data, it was considered that making them frozen is the right thing to do.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #8948'
    url: https://bugs.ruby-lang.org/issues/8948
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16377'
    url: https://bugs.ruby-lang.org/issues/16377
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15504'
    url: https://bugs.ruby-lang.org/issues/15504
    comments:
  code:
  - "  ```ruby"
  - "  /foo/.frozen?   # => true"
  - "  (42...).frozen? # => true"
  - ''
  - "  # Regexps are frozen even when constructed with dynamic interpolation"
  - "  /.#{rand(10)}/.frozen? # => true"
  - ''
  - "  # ...but not when they are constructed with the constructor"
  - "  Regexp.new('foo').frozen?  # => false"
  - ''
  - "  # ...but ranges are always frozen"
  - "  Range.new('a', 'b').frozen? # => true"
  - ''
  - "  # Regularly, as the data can't be changed anyways, the frozenness wouldn't affect your code."
  - "  # It might, though, if the code does something smart like:"
  - "  regexp = /^\\w+\\s*\\w*$/"
  - "  regexp.instance_variable_set('@context', :name)"
  - "  # 2.7: ok"
  - "  # 3.0: FrozenError (can't modify frozen Regexp: /^\\w+\\s*\\w*$/)"
  - ''
  - "  # ...or"
  - "  RANGE = Time.new(2020, 3, 1)..Time.new(2020, 9, 1)"
  - "  def RANGE.to_s"
  - "    self.begin.strftime('%Y, %b %d') + ' - ' + self.end.strftime('%b %d')"
  - "  end"
  - "  # 2.7: OK"
  - "  # 3.0: FrozenError (can't modify frozen object: 2020-03-01 00:00:00 +0200..2020-09-01 00:00:00 +0300)"
  - ''
  - '  # Note also, that range freezing is not "deep":'
  - "  string_range = 'a'..'z'"
  - "  string_range.end.upcase!"
  - "  string_range"
  - "  # => 'a'..'Z'"
  - ''
  - "  # clone(freeze: false) still allows to unfreeze both:"
  - "  unfrozen = RANGE.clone(freeze: false)"
  - "  def unfrozen.to_s"
  - "    self.begin.strftime('%Y, %b %d') + ' - ' + self.end.strftime('%b %d')"
  - "  end"
  - "  puts unfrozen"
  - '  # Prints: "2020, Mar 01 - Sep 01"'
  - "  ```"
  notes: ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#include` and `#prepend` now affects modules including the receiver"
  path:
  - Ruby 3.0
  - Core classes and modules
  - "`Module`"
  summary: If class `C` includes module `M`, and after that we did `M.include M1`, before Ruby 3.0, `M1` would not have been included into `C`; and now it is.
  reason: The behavior was long-standing and led to a lot of confusion (especially considering that including something in the class _did_ affected its descendants).
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #9573'
    url: https://bugs.ruby-lang.org/issues/9573
    comments:
  docs:
  - "—"
  code:
  - "  ```ruby"
  - "  module MyEnumerableExtension"
  - "    def each2(&block)"
  - "      each_slice(2, &block)"
  - "    end"
  - "  end"
  - ''
  - "  Enumerable.include MyEnumerableExtension"
  - ''
  - "  (1..8).each2.to_a"
  - "  # Ruby 2.7: NoMethodError (undefined method `each2' for 1..8:Range) -- even though Range includes Enumerable"
  - "  # Ruby 3.0: [[1, 2], [3, 4], [5, 6], [7, 8]]"
  - "  ```"
  followup: ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: Improved method visibility declaration
  path:
  - Ruby 3.0
  - Core classes and modules
  - "`Module`"
  summary: "  * `Module#alias_method` now returns a name of the method defined."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17314'
    url: https://bugs.ruby-lang.org/issues/17314
    comments:
  docs:
  - ''
  - "  * [Module#private](https://docs.ruby-lang.org/en/3.0.0/Module.html#method-i-private), [Module#public](https://docs.ruby-lang.org/en/3.0.0/Module.html#method-i-public), [Module#protected](https://docs.ruby-lang.org/en/3.0.0/Module.html#method-i-protected), [Module#public_class_method](https://docs.ruby-lang.org/en/3.0.0/Module.html#method-i-public_class_emethod), [Module#private_class_method](https://docs.ruby-lang.org/en/3.0.0/Module.html#method-i-private_class_method) are accepting arrays;"
  - "  * [Module#attr](https://docs.ruby-lang.org/en/3.0.0/Module.html#method-i-attr), [Module#attr](https://docs.ruby-lang.org/en/3.0.0/Module.html#method-i-attr_reader), [Module#attr](https://docs.ruby-lang.org/en/3.0.0/Module.html#method-i-attr_writer), [Module#attr_accessor](https://docs.ruby-lang.org/en/3.0.0/Module.html#method-i-attr_accessor) are returning arrays of created method names;"
  - "  * [Module#alias_method](https://docs.ruby-lang.org/en/3.0.0/Module.html#method-i-alias_method) returns the name of created method;"
  code:
  - "  ```ruby"
  - "  class A"
  - "    def foo"
  - "    end"
  - ''
  - "    def bar"
  - "    end"
  - ''
  - "    # new behavior of private"
  - "    private %i[foo bar]"
  - "    # Ruby 2.7: [:foo, :bar] is not a symbol nor a string"
  - "    # Ruby 3.0: works"
  - ''
  - "    # old behavior still works"
  - "    private :foo, :bar"
  - ''
  - "    # new behavior of attr_XX"
  - "    p(attr_reader :a, :b)"
  - "    # Ruby 2.7: => nil"
  - "    # Ruby 3.0: => [:a, :b]"
  - ''
  - "    # new behavior of alias_method"
  - "    p(alias_method :baz, :foo)"
  - "    # Ruby 2.7: => A"
  - "    # Ruby 3.0: => :bar"
  - ''
  - "    # The consequence is this is now possible:"
  - "    private attr_reader :first, :second"
  - "    # attr_reader() returns array [:first, :second], which is then passed to private()"
  - ''
  - "    private alias_method :third, :second"
  - "    # alias_method() returns :third, which is then passed to private()"
  - "  end"
  - "  ```"
  notes: "  ```"
  followup: ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Warning#warn`: `category:` keyword argument."
  path:
  - Ruby 3.0
  - Core classes and modules
  summary: Ruby 2.7 introduced [warning categories](2.7.html#warning-and-), and allowed to selectively suppress them with `Warning[]=` method. Since Ruby 3.0, user code also may specify categories for its warnings, and intercept them by redefining `Warning.warn`.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17122'
    url: https://bugs.ruby-lang.org/issues/17122
    comments:
  docs:
  - "[Warning#warn](https://docs.ruby-lang.org/en/3.0.0/Warning.html#method-i-warn), [Kernel#warn](https://docs.ruby-lang.org/en/3.0.0/Kernel.html#method-i-warn)"
  code:
  - "  ```ruby"
  - "  # Using from user code:"
  - "  Warning[:deprecated] = true"
  - "  warn('my warning', category: :deprecated)"
  - '  # "my warning"'
  - "  Warning[:deprecated] = false"
  - "  warn('my warning', category: :deprecated)"
  - '  # ...nothing, obeys "don''t show deprecated" setting'
  - ''
  - "  # If the category is not supported:"
  - "  warn('my warning', category: :custom)"
  - "  # ArgumentError (invalid warning category used: custom)"
  - ''
  - "  # Intercepting:"
  - "  module Warning"
  - "    def self.warn(msg, category: nil)"
  - '      puts "Received message #{msg.strip} with category=#{category}"'
  - "    end"
  - "  end"
  - ''
  - "  Warning[:deprecated] = true"
  - "  lambda(&:foo?)"
  - "  # Received message 'warn.rb:23: warning: lambda without a literal block is deprecated; use the proc without lambda instead' with category=deprecated"
  - ''
  - "  eval('[1, 2, 3] => [x, *]') # we use eval, otherwise the warning was raised on PARSING stage, before any redefinitions"
  - "  # Received message '(eval):1: warning: One-line pattern matching is experimental, and the behavior may change in future versions of Ruby!' with category=experimental"
  - "  ```"
  - ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: Exception output order is changed -- again
  path:
  - Ruby 3.0
  - Core classes and modules
  summary: The "reverse" order of the backtrace (call stack printed starting from the outermost layer, and the innermost is at the bottom), which was introduced in [2.5](2.5.html#backtrace-and-error-message-in-reverse-order) as "experimental", tweaked to be active only for `STDERR` on [2.6](2.6.html#exception-output-tweaking), now it is reverted to the old (pre-2.5) behavior.
  reason: '"From the outer to the inner" order is the default for some other languages (like Python), but it seems most of the rubyists never got used to it.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #8661'
    url: https://bugs.ruby-lang.org/issues/8661
    comments: the whole history of the "backtrace reversing" initiative, with all the turns
  code:
  - "  ```ruby"
  - "  def inner"
  - "    raise 'test'"
  - "  end"
  - ''
  - "  def outer"
  - "    inner"
  - "  end"
  - ''
  - "  outer"
  - "  ```"
  - "  This prints on Ruby 2.5-2.7:"
  - "  ```"
  - "  Traceback (most recent call last):"
  - "    2: from test.rb:9:in `<main>'"
  - "    1: from test.rb:6:in `outer'"
  - "  test.rb:2:in `inner': test (RuntimeError)"
  - "  ```"
  - "  But on Ruby < 2.5, and on 3.0 again:"
  - "  ```"
  - "  test.rb:2:in `inner': test (RuntimeError)"
  - "    from test.rb:6:in `outer'"
  - "    from test.rb:9:in `<main>'"
  - "  ```"
  notes: ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: 'Interpolated String literals are no longer frozen when `# frozen-string-literal: true` is used'
  path:
  - Ruby 3.0
  - Core classes and modules
  - Strings and symbols
  reason: The idea of `frozen-string-literal` pragma is to avoid unnecessary allocations, when the same `"string"` repeated in the code called multiple times; but if the string is constructed dynamically with interpolation, there would be no point (it is hard to predict that allocations would be avoided, as the string can be different each time); it also breaks the "intuitive" feeling that the string is dynamic.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17104'
    url: https://bugs.ruby-lang.org/issues/17104
    comments:
  docs:
  - "[doc/syntax/comments.rdoc](https://docs.ruby-lang.org/en/3.0.0/syntax/comments_rdoc.html#label-frozen_string_literal+Directive)"
  code:
  - "  ```ruby"
  - "  # frozen-string-literal: true"
  - ''
  - "  def render(title, body)"
  - '    result = "## #{title}"'
  - '    result << "\n"'
  - "    result << body"
  - "  end"
  - ''
  - "  puts render('The Title', 'The body')"
  - "  # Ruby 2.7: in `render': can't modify frozen String (FrozenError)"
  - "  # Ruby 3.0:"
  - "  #   ## The Title"
  - "  #   The body"
  - "  ```"
  - ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`String`: always returning `String`"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Strings and symbols
  summary: On custom classes inherited from `String`, some methods previously were returning an instance of this class, and others returned `String`. Now they all do the latter.
  reason: 'While one might argue that `MyCoolString.new(" foo ").strip` should return an instance of `MyCoolString`, it actually creates a significant problem: String internals don''t know how to construct a new instance of the child class (imagine it has a constructor like `StringFromFile.new(content, filename:)`), and in Ruby versions before 3.0 they didn''t actually construct child classes with the constructor. It was a source of all kinds of subtle bugs.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #10845'
    url: https://bugs.ruby-lang.org/issues/10845
    comments:
  code:
  - "  ```ruby"
  - "  class Buffer < String"
  - "    attr_reader :capacity"
  - ''
  - "    def initialize(content, capacity:)"
  - "      super(content)"
  - "      @capacity = capacity"
  - "    end"
  - ''
  - "    # some impl."
  - "  end"
  - ''
  - "  stripped = Buffer.new(' foo ', capacity: 100).strip"
  - "  stripped.class"
  - "  # Ruby 2.7: Buffer"
  - "  # Ruby 3.0: String"
  - "  stripped.capacity"
  - '  # Ruby 2.7: nil -- one might ask "why it haven''t been copied from parent???"'
  - '  # Ruby 3.0: NoMethodError (undefined method `capacity'' for "foo":String)'
  - "  ```"
  notes: ''
  affects:
  - "`#*`, `#capitalize`, `#center`, `#chomp`, `#chop`, `#delete`, `#delete_prefix`, `#delete_suffix`, `#downcase`, `#dump`, `#each_char`, `#each_grapheme_cluster`, `#each_line`, `#gsub`, `#ljust`, `#lstrip`, `#partition`, `#reverse`, `#rjust`, `#rpartition`, `#rstrip`, `#scrub`, `#slice!`, `#slice` / `#[]`, `#split`, `#squeeze`, `#strip`, `#sub`, `#succ` / `#next`, `#swapcase`, `#tr`, `#tr_s`, `#upcase`"
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Symbol#name`"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Strings and symbols
  summary: The method returns a frozen string with the symbol's representation.
  reason: "  as a compromise, a new method was added."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16150'
    url: https://bugs.ruby-lang.org/issues/16150
    comments:
  docs:
  - "[Symbol#name](https://docs.ruby-lang.org/en/3.0.0/Symbol.html#method-i-name)"
  - ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Array`: always returning `Array`"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Collections
  summary: On custom classes inherited from `Array`, some methods previously were returning an instance of this class, and others returned `Array`. Now they all do the latter.
  reason: See above, where the same changes for [String](#string-always-returning-string) are explained.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #6087'
    url: https://bugs.ruby-lang.org/issues/6087
    comments:
  code:
  - "  ```ruby"
  - "  class Nodes < Array"
  - "    attr_reader :parent"
  - "    def initialize(nodes, parent)"
  - "      super(nodes)"
  - "      @parent = parent"
  - "    end"
  - ''
  - "    # some impl."
  - "  end"
  - ''
  - "  uniq = Nodes.new(['<tr>Name</tr>', '<tr>Position</tr>', '<tr>Name</tr>'], 'table').uniq"
  - "  uniq.class"
  - "  # Ruby 2.7: Nodes"
  - "  # Ruby 3.0: Array"
  - "  uniq.parent"
  - '  # Ruby 2.7: nil -- one might ask "why it haven''t been copied from parent???"'
  - '  # Ruby 3.0: NoMethodError (undefined method `uniq'' for ["<tr>Name</tr>", "<tr>Position</tr>"]:Array)'
  - "  ```"
  - ''
  affects:
  - "`#*`, `#drop`, `#drop_while`, `#flatten`, `#slice!`, `#slice` / `#[]`, `#take`, `#take_while`, `#uniq`"
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Array`: slicing with `Enumerator::ArithmeticSequence`"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Collections
  summary: '`Enumerator::ArithmeticSequence` was [introduced in 2.6](2.6.html#enumeratorarithmeticsequence) as an concept representing "sequence from `b` to `e` with step `s`". Since 3.0, `Array#[]` and `Array#slice` accept arithmetic sequence as a slicing argument.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16812'
    url: https://bugs.ruby-lang.org/issues/16812
    comments:
  docs:
  - "[Array#[]](https://docs.ruby-lang.org/en/3.0.0/Array.html#method-i-5B-5D)"
  code:
  - "  ```ruby"
  - "  text_data = ['---', 'Jane', '---', 'John', '---', 'Yatsuke', '---']"
  - "  text_data[(1..) % 2] # each second element"
  - '  # => ["Jane", "John", "Yatsuke"]'
  - ''
  - "  # Note that unlike slicing with Range, slicing with ArithmeticSequence might raise RangeError:"
  - "  text_data[0..100]"
  - '  # => ["---", "Jane", "---", "John", "---", "Yatsuke", "---"]'
  - "  text_data[(0..100) % 2]"
  - "  # RangeError (((0..100).%(2)) out of range)"
  - "  ```"
  notes: ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Hash#except`"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Collections
  reason: '`Hash#slice` ("only selected set of keys") was added in [Ruby 2.5](2.5.html#hashslice), but `Hash#except` was missing at this point. Added for completeness, and because it has lot of pragmatic usages.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15822'
    url: https://bugs.ruby-lang.org/issues/15822
    comments:
  docs:
  - "[Hash#except](https://docs.ruby-lang.org/en/3.0.0/Hash.html#method-i-except), [ENV.except](https://docs.ruby-lang.org/en/3.0.0/ENV.html#method-c-except)"
  code:
  - "  ```ruby"
  - "  h = {a: 1, b: 2}"
  - "  h.except(:b)"
  - "  # => {:a=>1}"
  - "  h.except(:c)        # unknown key is not an error"
  - "  # => {:a=>1, :b=>2}"
  - "  ```"
  notes: ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Hash#transform_keys`: argument for key renaming"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Collections
  summary: "`Hash#transform_keys(from: to)` allows to rename keys in a DRY way."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16274'
    url: https://bugs.ruby-lang.org/issues/16274
    comments:
  docs:
  - "[Hash#transform_keys](https://docs.ruby-lang.org/en/3.0.0/Hash.html#method-i-transform_keys)"
  code:
  - "  ```ruby"
  - "  h = {name: 'Ruby', years: 25}"
  - "  h.transform_keys(name: :title, years: :age)"
  - '  # => {:title=>"Ruby", :age=>25}'
  - "  h.transform_keys(name: :title, site: :url)"
  - '  # => {:title=>"Ruby", :years=>25} -- not mentioned keys are copied as is, unknown keys ignored'
  - "  h.transform_keys(years: :name, name: :title)"
  - '  # => {:title=>"Ruby", :name=>25} -- note that the first rename wouldn''t replace the :name key, because'
  - "  #                                   first all renames are deduced, and then applied"
  - '  h.transform_keys(name: :lang_name) { |k| :"meta_#{k}" }'
  - '  # => {:lang_name=>"Ruby", :meta_years=>25} -- block, if passed, is used to process keys the hash doesn''t mention'
  - ''
  - "  h.transform_keys!(name: :title, years: :age) # bang version works, too"
  - "  h"
  - '  # => {:title=>"Ruby", :age=>25}'
  - "  ```"
  - ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Hash#each` consistently yields a 2-element array to lambdas"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Collections
  summary: Just fixes an inconsistency introduced by optimization many versions ago.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #12706'
    url: https://bugs.ruby-lang.org/issues/12706
    comments:
  code:
  - "  ```ruby"
  - '  {a: 1}.each(&->(pair) { puts "pair=#{pair}" })'
  - '  # 2.7 and 3.0: pair=[:a, 1] -- so, it is "yield 2 items as one argument"'
  - '  {a: 1}.each(&->(pair, redundant) { puts "pair=#{pair}, redudnant=#{redundant}" })'
  - "  # 2.7: pair=a, redudnant=1 -- arguments accidentally behave like for regular proc (auto-unpacking)"
  - "  # 3.0: ArgumentError (wrong number of arguments (given 1, expected 2)) -- no unexpected auto-unpacking"
  - "  ```"
  - ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Symbol#to_proc` reported as lambda"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Procs/lambdas
  reason: It was noted that the result of `&:something` behaves like a lambda, but its introspection methods are misleadingly reported it as a regular proc. While no big offense, it can be inconvenient when learning, and produce subtle bugs in complicated metaprogramming.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16260'
    url: https://bugs.ruby-lang.org/issues/16260
    comments:
  docs:
  - "—"
  code:
  - "  ```ruby"
  - "  def test_it(&block)"
  - "    p [block.lambda?, block.parameters]"
  - "  end"
  - ''
  - "  # Regular proc"
  - "  test_it { |x| x.size }      # => [false, [[:opt, :x]]]"
  - "  # Regular lambda"
  - "  test_it(&->(x) { x.size })  # => [true, [[:req, :x]]]"
  - "  # Symbol proc"
  - "  test_it(&:size)"
  - "  # Ruby 2.7: [false, [[:rest]]]"
  - "  # Ruby 3.0: [true, [[:req], [:rest]]]"
  - "  ```"
  - "  The second one is more true, because it behaves like lambda: doesn't auto-unpack parameters, and"
  - "  requires the first one:"
  - "  ```ruby"
  - "  Warning[:deprecated] = true"
  - "  proc { |x, y| x + y }.call([1, 2])    # => 3, parameters unpacked"
  - '  proc { |x| x.inspect }.call           # => "nil", no error, parameter is optional'
  - "  lambda { |x, y| x + y }.call([1, 2])  # ArgumentError (wrong number of arguments (given 1, expected 2))"
  - "  lambda { |x| x.inspect }.call         # ArgumentError (wrong number of arguments (given 0, expected 1))"
  - "  :+.to_proc.call([1, 2])               # ArgumentError (wrong number of arguments (given 0, expected 1))"
  - "  :inspect.to_proc.call                 # ArgumentError (no receiver given)"
  - "  ```"
  - "  Note that the last two errors was raised even on Ruby 2.7, so the behavior is not changed, just introspection made consistent."
  - ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Kernel#lambda` warns if called without a literal block"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Procs/lambdas
  reason: One might expect that `lambda(&other_block)` will change block's "lambdiness". It is not true, and it was decided that this behavior shouldn't change. Instead, to avoid errors, this code now warns.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15973'
    url: https://bugs.ruby-lang.org/issues/15973
    comments:
  docs:
  - "—"
  code:
  - "  ```ruby"
  - "  block = proc { |x| p x }"
  - "  processed = lambda(&block)"
  - "  # On 3.0: warning: lambda without a literal block is deprecated; use the proc without lambda instead"
  - "  processed.lambda? # => false"
  - '  processed.call    # => "nil", it is really still not a lambda'
  - "  ```"
  - ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Proc#==` and `#eql?`"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Procs/lambdas
  summary: The method will return true for separate Proc instances if the procs were created from the same block.
  reason: Lazy Proc allocation optimization (not creating `Proc` object while just propagating `&block` further) introduced an inconvenience for some DSL libraries when what are "logically" two references to the same proc, would become two unrelated objects, which could lead to subtle bugs.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14267'
    url: https://bugs.ruby-lang.org/issues/14267
    comments:
  docs:
  - "[Proc#==](https://docs.ruby-lang.org/en/3.0.0/Proc.html#method-i-3D-3D)"
  code:
  - "  ```ruby"
  - "  class SomeDSL"
  - "    attr_reader :before_block, :after_block"
  - ''
  - "    def before(&block)"
  - "      @before_block = block"
  - "    end"
  - ''
  - "    def after(&block)"
  - "      @after_block = block"
  - "    end"
  - ''
  - "    def before_and_after(&block)"
  - "      before(&block)"
  - "      after(&block)"
  - "    end"
  - ''
  - "    def before_and_after_are_same?"
  - "      @before_block == @after_block"
  - "    end"
  - "  end"
  - ''
  - "  dsl = SomeDSL.new"
  - "  dsl.before_and_after { 'some code' }"
  - "  dsl.before_block.object_id == dsl.after_block.object_id"
  - "  # => true on Ruby 2.4: they were converted to Proc object in #before_and_after, and then this"
  - "  #    object was propagated to #before/#after"
  - "  # => false on Ruby 2.5-3.0: block was propagated without converting to object, and converts to"
  - "  #    two different objects in #before/#after while storing in variables"
  - "  p dsl.before_and_after_are_same?"
  - "  # => true on Ruby 2.4, because it is the same object"
  - "  # => false on Ruby 2.5-2.7"
  - "  # => true on 3.0: the objects ARE different, but == implemented the way that they are equal if"
  - "  #    they are produced from exactly the same block"
  - "  ```"
  - ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Random::DEFAULT` behavior change"
  path:
  - Ruby 3.0
  - Core classes and modules
  summary: "`Random::DEFAULT` was an instance of the `Random` class, used by `Random.rand`/`Kernel.rand`. The object was removed, and now `Random::DEFAULT` is just an alias for `Random` class itself (it has class-level methods same as instance-level methods), and `Random.rand` creates a new random generator implicitly _per ractor_, on the first call in that ractor."
  reason: With the introduction of the [Ractors](#ractors), global mutable objects can't be used, and `Random::DEFAULT` was such object (its state have changed with each `#rand` call); so now the default random generator is ractor-local, and is not exposed as a constant (it is decided that it would be too confusing to have a constant with the value different in each ractor).
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17322'
    url: https://bugs.ruby-lang.org/issues/17322
    comments: "`Random::DEFAULT` becomes the synonym of `Random`"
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17351'
    url: https://bugs.ruby-lang.org/issues/17351
    comments: deprecating the constant
  docs:
  - "[Random](https://docs.ruby-lang.org/en/3.0.0/Random.html)"
  code:
  - "  ```ruby"
  - "  Warning[:deprecated] = true"
  - "  Random::DEFAULT"
  - "  # Ruby 2.7: => #<Random:0x005587d09fba20>"
  - "  # Ruby 3.0:"
  - "  #   warning: constant Random::DEFAULT is deprecated"
  - "  #   => Random -- just the same class"
  - ''
  - "  Random.seed"
  - "  # Ruby 2.7: NoMethodError: undefined method `seed' for Random:Class"
  - "  # Ruby 3.0: => 77406376310392739943146667089721213130"
  - ''
  - "  # Seed is delegated to (now internal) per-Ractor random object, which is always the same in the same ractor"
  - "  10.times.map { Random.seed }.uniq"
  - "  # => [77406376310392739943146667089721213130]"
  - ''
  - "  # It is different in another ractor"
  - "  Ractor.new { p Random.seed }"
  - "  # => 95097031741178961937025250800360539515"
  - "  ```"
  notes: ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Dir.glob` and `Dir.[]` result sorting"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Filesystem and IO
  summary: 'By default the results are sorted, which can be turned off with `sorted: false`'
  reason: '`Dir.glob` historically returns the results in the same order the underlying OS API does it (which is undefined on Linux). While it can be argued as "natural" (do what the OS does), it is inconvenient for most of the cases; and most of other languages and tools switched to sorting in the last years.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #8709'
    url: https://bugs.ruby-lang.org/issues/8709
    comments:
  docs:
  - "[Dir.glob](https://docs.ruby-lang.org/en/3.0.0/Dir.html#method-c-glob)"
  notes: ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: Ractors
  path:
  - Ruby 3.0
  - Core classes and modules
  - Concurrency
  summary: A long-anticipated concurrency improvement landed in Ruby 3.0. **Ractors** (at some point known as _Guilds_) are fully-isolated (without sharing GVL on CRuby) alternative to threads. To achieve thread-safety without global locking, ractors, in general, can't access each other's (or main program/main ractor) data. To share data with each other, ractors rely on message passing/receiving mechanism, aka actor model (hence the name). The feature was in design and implementation for a long time, so we'll not try to discuss it here in details or link to some "main" discussion, just provide a simple example and links for further investigation.
  docs:
  - "[Ractor](https://docs.ruby-lang.org/en/3.0.0/Ractor.html) (class documentation), [doc/ractor.md](https://docs.ruby-lang.org/en/3.0.0/doc/ractor_md.html) (design documentation)."
  code:
  - '  The simplistic example of ractors in action (classic "server-client" ping-pong):'
  - "  ```ruby"
  - "  server = Ractor.new do"
  - '    puts "Server starts: #{self.inspect}"'
  - '    puts "Server sends: ping"'
  - "    Ractor.yield 'ping'                       # The server doesn't know the receiver and sends to whoever interested"
  - "    received = Ractor.receive                 # The server doesn't know the sender and receives from whoever sent"
  - '    puts "Server received: #{received}"'
  - "  end"
  - ''
  - "  client = Ractor.new(server) do |srv|        # The server ractor is passed to client, and available as srv"
  - '    puts "Client starts: #{self.inspect}"'
  - "    received = srv.take                       # The Client takes a message specifically from the server"
  - '    puts "Client received from " \'
  - '         "#{srv.inspect}: #{received}"'
  - '    puts "Client sends to " \'
  - '         "#{srv.inspect}: pong"'
  - "    srv.send 'pong'                           # The client sends a message specifically to the server"
  - "  end"
  - ''
  - "  [client, server].each(&:take)               # Wait till they both finish"
  - "  ```"
  - "  This will output:"
  - ''
  - "  ```"
  - "  Server starts: #<Ractor:#2 test.rb:1 running>"
  - "  Server sends: ping"
  - "  Client starts: #<Ractor:#3 test.rb:8 running>"
  - "  Client received from #<Ractor:#2 rac.rb:1 blocking>: ping"
  - "  Client sends to #<Ractor:#2 rac.rb:1 blocking>: pong"
  - "  Server received: pong"
  - "  ```"
  followup: ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: Non-blocking `Fiber` and scheduler
  path:
  - Ruby 3.0
  - Core classes and modules
  - Concurrency
  summary: The improvement of inter-thread concurrency for IO-heavy tasks is achieved with **non-blocking Fibers**. When several long I/O operations should be performed, they can be put in separate _non-blocking_ Fibers, and instead of blocking each other while waiting, they would be transferring the control to the fiber that can proceed, while others wait.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16786'
    url: https://bugs.ruby-lang.org/issues/16786
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16792'
    url: https://bugs.ruby-lang.org/issues/16792
    comments: Mutex belonging to Fiber
  docs:
  - "[Fiber](https://docs.ruby-lang.org/en/master/Fiber.html#class-Fiber-label-Non-blocking+Fibers) (class documentation), [Fiber::SchedulerInterface](https://docs.ruby-lang.org/en/master/Fiber/SchedulerInterface.html) (definition of the interface which the scheduler must implement, [doc/fiber.md](https://docs.ruby-lang.org/en/3.0.0/doc/fiber_md.html) (design documentation)."
  code:
  - "  ```ruby"
  - "  require 'net/http'"
  - ''
  - "  start = Time.now"
  - ''
  - "  Thread.new do # in this thread, we'll have non-blocking fibers"
  - "    Fiber.set_scheduler Scheduler.new # see Notes about the scheduler implementation"
  - ''
  - "    %w[2.6 2.7 3.0].each do |version|"
  - "      Fiber.schedule do # Runs block of code in a separate Fiber"
  - "        t = Time.now"
  - "        # Instead of blocking while the response will be ready, the Fiber will invoke scheduler"
  - "        # to add itself to the list of waiting fibers and transfer control to other fibers"
  - '        Net::HTTP.get(''rubyreferences.github.io'', "/rubychanges/#{version}.html")'
  - "        puts '%s: finished in %.3f' % [version, Time.now - t]"
  - "      end"
  - "    end"
  - "  end.join # At the END of the thread code, Scheduler will be called to dispatch all waiting fibers"
  - "           # in a non-blocking manner"
  - ''
  - "  puts 'Total: finished in %.3f' % (Time.now - start)"
  - "  # Prints:"
  - "  #  2.6: finished in 0.139"
  - "  #  2.7: finished in 0.141"
  - "  #  3.0: finished in 0.143"
  - "  #  Total: finished in 0.146"
  - "  ```"
  - '  Note that "total" is lower than sum of all fibers execution time: on `HTTP.get`, instead'
  - "  of blocking the whole thread, they were transferring control while waiting, and all three waits are"
  - "  performed in parallel."
  notes: The feature is somewhat unprecedented for Ruby in the fact that **no default Scheduler implementation** is provided. Implementing the Scheduler in a reliable way (probably using some additional non-blocking event loop library) is completely up to the user. Considering that the feature is implemented by [Samuel Williams](https://github.com/ioquatix) of the [Async](https://github.com/socketry/async) fame, the Async gem [utilizes](https://github.com/socketry/async/blob/master/lib/async/scheduler.rb) the new feature since the day of 3.0 release.
  followup: ''
  affects:
  - ''
  - "  * `Fiber`: [Fiber.set_scheduler](https://docs.ruby-lang.org/en/3.0.0/Fiber.html#method-c-set_scheduler), [Fiber.scheduler](https://docs.ruby-lang.org/en/3.0.0/Fiber.html#method-c-scheduler), [Fiber.new](https://docs.ruby-lang.org/en/3.0.0/Fiber.html#method-c-new) `(blocking: true/false)` parameter, [Fiber#blocking?](https://docs.ruby-lang.org/en/3.0.0/Fiber.html#method-i-blocking-3F), [Fiber.blocking?](https://docs.ruby-lang.org/en/3.0.0/Fiber.html#method-c-blocking-3F)"
  - "  * Methods invoking scheduler: `Kernel.sleep`, `IO#wait_readable`, `IO#wait_writable`, `IO#read`, `IO#write` and other related methods (e.g. `IO#puts`, `IO#gets`), `Thread#join`, `ConditionVariable#wait`, `Queue#pop`, `SizedQueue#push`;"
  - "  * `IO#nonblock?` now defaults to `true`;"
  - "  * `Mutex` belongs to `Fiber` rather than `Thread` (can be unlocked from other fiber than the one that locked it)."
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Thread.ignore_deadlock` accessor"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Concurrency
  summary: Disabling the default deadlock detection, allowing the use of signal handlers to break deadlock.
  reason: The change helps with rare condition when Ruby's internal deadlock detector is fooled by external signals.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #13768'
    url: https://bugs.ruby-lang.org/issues/13768
    comments:
  docs:
  - "[Thread.ignore_deadlock=](https://docs.ruby-lang.org/en/3.0.0/Thread.html#method-c-ignore_deadlock-3D), [Thread.ignore_deadlock](https://docs.ruby-lang.org/en/3.0.0/Thread.html#method-c-ignore_deadlock)"
  code:
  - "  ```ruby"
  - "  queue1 = Queue.new"
  - "  queue2 = Queue.new"
  - ''
  - "  trap(:SIGCHLD) { queue1.push 'from SIGCHLD to queue1' }"
  - ''
  - '  Thread.start { Process.spawn("/bin/sleep 1") }'
  - '  Thread.start { queue2.push("via Thread to queue2: #{queue1.pop}") }'
  - ''
  - "  Thread.ignore_deadlock = true # <== New feature"
  - ''
  - "  # Here the message would be received when the childprocess will finish, send message to queue1,"
  - "  # which then will be caught in the thread and sent to queue2."
  - "  puts queue2.pop"
  - '  # Prints: "via Thread to queue2: from SIGCHLD to queue1"'
  - "  #"
  - "  # But Without the marked line, it will be printed instead:"
  - "  #  in `pop': No live threads left. Deadlock? (fatal)"
  - "  #  ... description of sleeping threads ..."
  - "  ```"
  - ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Fiber#backtrace` & `#backtrace_locations`"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Concurrency
  summary: Like similar methods of the `Thread`, provides a locations of the currently executed Fiber code.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16815'
    url: https://bugs.ruby-lang.org/issues/16815
    comments:
  docs:
  - "[Fiber#backtrace](https://docs.ruby-lang.org/en/3.0.0/Fiber.html#method-i-backtrace), [Fiber#backtrace_locations](https://docs.ruby-lang.org/en/3.0.0/Fiber.html#method-i-backtrace_locations),"
  code:
  - "  ```ruby"
  - "  f = Fiber.new { Fiber.yield }"
  - "  # When fiber is not yet running, the backtrace is empty"
  - "  f.backtrace"
  - "  # => []"
  - ''
  - "  # When fiber was resumed, and then yielded control, you can ask about its location"
  - "  f.resume"
  - "  f.backtrace"
  - '  # => ["test.rb:1:in `yield''", "fbr.rb:1:in `block in <main>''"]'
  - ''
  - "  f.backtrace_locations"
  - '  # => ["fbr.rb:1:in `yield''", "fbr.rb:1:in `block in <main>''"]'
  - "  # Despite looking the same, backtrace_locations are actually instances of Thread::Backtrace::Location"
  - "  loc = f.backtrace_locations.first"
  - '  loc.label   # => "yield"'
  - '  loc.path    # => "test.rb"'
  - "  loc.line    # => 1"
  - ''
  - "  # Like Thread.backtrace_locations, the method accepts arguments:"
  - "  f.backtrace_locations(1) # start from 1"
  - '  # => ["fbr.rb:1:in `block in <main>''"]'
  - "  f.backtrace_locations(0, 1) # start from 0, take 1"
  - '  # => ["test.rb:1:in `yield''"]'
  - "  f.backtrace_locations(0...1) # ranges are acceptable, too"
  - '  # => ["test.rb:1:in `yield''"]'
  - ''
  - "  f.resume"
  - "  # When the fiber is finished, there is no location"
  - "  f.backtrace_locations"
  - "  # => nil"
  - "  ```"
  - ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Fiber#transfer` limitations changed"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Concurrency
  summary: "`#transfer` is the method that allows fiber to pass control to other fiber directly, allowing several fibers to control each other, creating arbitrary directed graph of control. Two styles of passing control (`Fiber.yield` / `Fiber#resume` vs `Fiber#transfer` to and from fiber) can't be freely mixed: the way in which fiber lost control should be the same it received the control back. In 2.7, this was implemented by a strict rule: once the fiber received control via `#transfer`, it can _never_ return back to `.yield`/`#resume` style. But in 3.0, better grained set of limitations was designed, so when the Fiber passed control via `#transfer` and then received it back (via `#transfer` in other fiber), it again can `.yield` and be `#resume`d."
  reason: The new design makes the "entry point" fiber of `#transfer` graph accessible from outside the graph.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #17221'
    url: https://bugs.ruby-lang.org/issues/17221
    comments:
  docs:
  - "[Fiber#transfer](https://docs.ruby-lang.org/en/3.0.0/Fiber.html#method-i-transfer)"
  code:
  - "  ```ruby"
  - "  require 'fiber'"
  - ''
  - "  manager = nil # For local var to be visible inside worker block"
  - ''
  - "  # This fiber would be started with transfer"
  - "  # It can't yield, and can't be resumed"
  - "  worker = Fiber.new { |work|"
  - '    puts "Worker: starts"'
  - '    puts "Worker: Performed #{work.inspect}, transferring back"'
  - "    # Fiber.yield     # this would raise FiberError: attempt to yield on a not resumed fiber"
  - "    # manager.resume  # this would raise FiberError: attempt to resume a resumed fiber (double resume)"
  - "    manager.transfer(work.capitalize)"
  - "  }"
  - ''
  - "  # This fiber would be started with resume"
  - "  # It can yield or transfer, and can be transferred"
  - "  # back or resumed"
  - "  manager = Fiber.new {"
  - '    puts "Manager: starts"'
  - '    puts "Manager: transferring ''something'' to worker"'
  - "    result = worker.transfer('something')"
  - '    puts "Manager: worker returned #{result.inspect}"'
  - "    # worker.resume    # this would raise FiberError: attempt to resume a transferring fiber"
  - "    Fiber.yield        # this is OK __since 3.0__, the fiber transferred back and from, now it can yield"
  - '    puts "Manager: finished"'
  - "  }"
  - ''
  - '  puts "Starting the manager"'
  - "  manager.resume"
  - '  puts "Resuming the manager"'
  - "  # manager.transfer  # this would raise FiberError: attempt to transfer to a yielding fiber"
  - "  manager.resume # This is possible __since 3.0__"
  - "  ```"
  - "  This prints:"
  - "  ```"
  - "  Starting the manager"
  - "  Manager: starts"
  - "  Manager: transferring 'something' to worker"
  - "  Worker: starts"
  - '  Worker: Performed "something", transferring back'
  - '  Manager: worker returned "Something"'
  - "  Resuming the manager"
  - "  Manager: finished"
  - "  ```"
  - "  Before Ruby 3.0, `manager` Fiber (once it ran the loop of `transfer`s with `worker`), had no way to return control generically, to whatever other Fiber wants to run."
  notes: ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`GC.auto_compact` accessor"
  path:
  - Ruby 3.0
  - Core classes and modules
  - Internals
  summary: Setter/getter for the option to run `GC.compact` (introduced in Ruby 2.7) on each major garbage collection. `false` by default.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17176'
    url: https://bugs.ruby-lang.org/issues/17176
    comments:
  docs:
  - "[GC.auto_compact](https://docs.ruby-lang.org/en/3.0.0/GC.html#method-c-auto_compact), [GC.auto_compact=](https://docs.ruby-lang.org/en/3.0.0/GC.html#method-c-auto_compact-3D)"
  notes: ''
  release: 3.0
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: Values in Hash literals and keyword arguments can be omitted
  path:
  - Ruby 3.1
  - Language changes
  summary: 'In hash literals and method calls, `x:` is now a shortcut for `x: x`—take hash value from the context, with the same name as a key.'
  reason: ''
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #14579'
    url: https://bugs.ruby-lang.org/issues/14579
    comments:
  docs:
  - "[doc/syntax/literals.rdoc#Hash Literals](https://docs.ruby-lang.org/en/3.1/syntax/literals_rdoc.html#label-Hash+Literals), [doc/methods.rdoc#Keyword Arguments](https://docs.ruby-lang.org/en/3.1/syntax/methods_rdoc.html#label-Keyword+Arguments), [Hash](https://docs.ruby-lang.org/en/3.1/Hash.html)"
  code:
  - "  ```ruby"
  - "  x, y = 100, 200"
  - "  # => [100, 200]"
  - "  # In hash literal"
  - "  h = {x:, y:}"
  - "  # => {:x=>100, :y=>200}"
  - ''
  - "  # In method call"
  - "  p(x:, y:)"
  - '  # prints: "{:x=>100, :y=>200}"'
  - ''
  - "  # Any context-available names work too, not only local variables:"
  - "  C = 'constant'"
  - '  # => "constant"'
  - "  def m()='method'"
  - "  # => :m"
  - "  {C:, m:}"
  - '  # => {:C=>"constant", :m=>"method"}'
  - ''
  - "  # Undefined names behave like in any other context:"
  - "  {z:}"
  - "  # => undefined local variable or method `z' (NameError)"
  - ''
  - "  # Dynamic symbols are not supported:"
  - "  name = 'x'"
  - '  {"#{name}":}'
  - "  #          ^"
  - "  # syntax error, unexpected '}' (SyntaxError)"
  - ''
  - "  # ...including symbols produced from literal strings:"
  - "  {'x':}"
  - "  #    ^"
  - "  # syntax error, unexpected '}' (SyntaxError)"
  - ''
  - "  TODO: self, if, etc"
  - "  ```"
  notes: "  Therefore, if you use value omission in method calls, **always use parenthesis**!"
  followup: ''
  release: 3.1
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: Inside "endless" method definitions, method calls without parenthesis are allowed
  path:
  - Ruby 3.1
  - Language changes
  summary: '`def some_method = other_method "bar"` is now allowed, previously it was required to write `other_method("bar")` in the method''s body.'
  reason: When endless methods were introduced in 3.0, this syntax (named "command syntax" internally) wasn't allowed; but it was not a deliberate decision, and rather a side-effect of a parser complexity. During development of 3.1, the workaround was found to make code more consistent and refactoring from multi-line to single-line methods easier.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17398'
    url: https://bugs.ruby-lang.org/issues/17398
    comments:
  docs:
  - "— ([doc/syntax/methods.rdoc](https://docs.ruby-lang.org/en/3.1/syntax/methods_rdoc.html) doesn't mention new or old behavior.)"
  code:
  - "  ```ruby"
  - '  def log(msg) = puts "#{Time.now}: #{msg}"'
  - "  # 3.0: syntax error, unexpected string literal, expecting `do' or '{' or '('"
  - "  # 3.1: successfully defined"
  - "  ```"
  - ''
  release: 3.1
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: Anonymous block argument
  path:
  - Ruby 3.1
  - Language changes
  summary: If method uses its block argument only to pass to another method, it can be marked by anonymous `&`.
  reason: The initial proposal for the feature is 6-year old and focused on avoiding intermediate blocks object allocation on block forwarding. It was considered redundant when block forwarding was optimized in Ruby 2.5; but then the core team decided it is actually a nice and unambiguous shortcut for methods that just pass the block further. As bloc argument is frequently called just `block`, the absence of the name doesn't affect readability.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11256'
    url: https://bugs.ruby-lang.org/issues/11256
    comments:
  docs:
  - "[doc/syntax/methods.rdoc#Block Argument](https://docs.ruby-lang.org/en/3.1/syntax/methods_rdoc.html#label-Block+Argument)"
  code:
  - "  ```ruby"
  - "  def logged_open(filename, &)"
  - '    puts "Opening #{filename}..."'
  - "    File.open(filename, &)"
  - "  end"
  - ''
  - "  logged_open('README.md') { puts _1.read(100) }"
  - "  # Prints:"
  - "  #  Opening README.md"
  - "  #  ...first 100 chars of README.md..."
  - ''
  - "  # Attempt to use `&` inside a method without block parameter is an error:"
  - "  def filter(data)= data.select(&)"
  - "  # => no anonymous block parameter (SyntaxError)"
  - ''
  - "  # ...and with named block parameter too"
  - "  def filter(data, &block)= data.filter(&)"
  - "  # => no anonymous block parameter (SyntaxError)"
  - ''
  - "  # If you temporary want to catch a block in the method, `Kernel#proc` will help:"
  - "  def filter(data, &)"
  - "    block = proc(&)"
  - "    p block, block.call(5)"
  - "    data.filter(&)"
  - "  end"
  - "  # => :filter"
  - "  filter(1..10, &:odd?)"
  - "  # Prints:"
  - "  #  #<Proc:0x00007fe9842fa308(&:odd?) (lambda)>"
  - "  #  true"
  - "  # => [1, 3, 5, 7, 9]"
  - "  ```"
  - ''
  release: 3.1
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: Expressions and non-local variables allowed in pin operator `^`
  path:
  - Ruby 3.1
  - Language changes
  - Pattern-matching
  summary: On the initial implementation of the pattern matching, the only patterns that could've been used in matching expression were constants, literals and pinned local variables. Since 3.1, any kind of statement can be a pattern, with extended functionality of the `^` pin operator.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17411'
    url: https://bugs.ruby-lang.org/issues/17411
    comments: pinning expressions
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17724'
    url: https://bugs.ruby-lang.org/issues/17724
    comments: pinning class/global variables
  docs:
  - "[doc/syntax/pattern_matching.rdoc#Variable pinning](https://docs.ruby-lang.org/en/3.1/syntax/pattern_matching_rdoc.html#label-Variable+pinning)"
  code:
  - "  ```ruby"
  - "  # In Ruby 3.0, this was possible:"
  - "  {version: 12} in {version: 10..15} # range literal as a pattern"
  - "  # => true"
  - ''
  - "  # But this was not, despite being intuitively similar:"
  - "  {timestamp: Time.now} in {timestamp: (Time.new(2021)..Time.new(2022))}"
  - "  # syntax error"
  - ''
  - "  # In 3.1, this is possible with pinning:"
  - "  {timestamp: Time.now} in {timestamp: ^(Time.new(2021)..Time.new(2022))}"
  - "  # => true"
  - ''
  - "  # Any complex expression is possible"
  - '  # ...consider years.txt has lines like "2021-2025", some ranges of years.'
  - "  Time.now.year in ^(File.read('years.txt').lines.first.then { _1.split('-') }.then { _1.to_i.._2.to_i })"
  - ''
  - "  # parenthesis are mandatory, this wouldn't work:"
  - "  Time.now.year in ^rand(2021..2023)"
  - "  # syntax error"
  - "  ```"
  - ''
  release: 3.1
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: Parentheses can be omitted in one-line pattern matching.
  path:
  - Ruby 3.1
  - Language changes
  - Pattern-matching
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16182'
    url: https://bugs.ruby-lang.org/issues/16182
    comments:
  docs:
  - "[doc/syntax/pattern_matching.rdoc#Patterns](https://docs.ruby-lang.org/en/3.1/syntax/pattern_matching_rdoc.html#label-Patterns)"
  code:
  - "  ```ruby"
  - "  [0, 1] => _, x"
  - "  # 3.0:"
  - "  #   syntax error, unexpected ',', expecting `end'"
  - "  #   [0, 1] => _, x"
  - "  #              ^"
  - "  # 3.1: success:"
  - "  x #=> 1"
  - ''
  - "  {y: 2} => y:"
  - "  # 3.0"
  - "  #   syntax error, unexpected label)"
  - "  #   {y: 2} => y:"
  - "  #             ^~"
  - "  # 3.1: success:"
  - "  y #=> 2"
  - ''
  - "  # Works with in: syntax, too:"
  - "  if {language: 'Ruby', version: '3.1'} in version: ('3.0'..)"
  - '    puts "Pattern-matching is cool"'
  - "  end"
  - "  # 3.0: syntax error"
  - '  # 3.1: Prints "Pattern-matching is cool"'
  - "  ```"
  - ''
  release: 3.1
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: Multiple assignment evaluation order change
  path:
  - Ruby 3.1
  - Language changes
  reason: 'Multiple assignment evaluation order was unexpected: the right part of the expression was calculated before the left. While rarely crucial, this still could cause subtle bugs.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #4443'
    url: https://bugs.ruby-lang.org/issues/4443
    comments:
  docs:
  - "—"
  code:
  - "  ```ruby"
  - "  def left1"
  - '    puts "left1"'
  - "    []"
  - "  end"
  - ''
  - "  def left2"
  - '    puts "left2"'
  - "    []"
  - "  end"
  - ''
  - "  def right1"
  - '    puts "right1"'
  - "    1"
  - "  end"
  - ''
  - "  def right2"
  - '    puts "right2"'
  - "    2"
  - "  end"
  - ''
  - "  left1[0] = right1"
  - "  # Both Ruby 3.0 and 3.1: prints left1, right1 -- the left side calculated first"
  - ''
  - "  left1[0], left2[0] = right1, right2"
  - "  # 3.0: prints right1, right2, left1, left2 -- right side calculated first"
  - "  # 3.1: prints left1, left2, right1, right2 -- consistent with singular assignment"
  - "  ```"
  - ''
  release: 3.1
  section: Language Changes
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Class#subclasses`"
  path:
  - Ruby 3.1
  - Core classes and modules
  - "`Class` and `Module`"
  summary: Returns all _direct_ subclasses of the class.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #18273'
    url: https://bugs.ruby-lang.org/issues/18273
    comments:
  docs:
  - "[Class#subclasses](https://docs.ruby-lang.org/en/3.1/Class.html#method-i-subclasses)"
  code:
  - "  ```ruby"
  - "  class A"
  - "  end"
  - ''
  - "  class B < A"
  - "  end"
  - ''
  - "  class C < B"
  - "  end"
  - ''
  - "  A.subclasses #=> [B] -- only direct descendants, no grand-children"
  - ''
  - "  class << A"
  - "  end"
  - ''
  - "  A.subclasses #=> [B] -- singleton class is not included either"
  - ''
  - "  # Dynamic subclasses are included:"
  - "  c = Class.new(A)"
  - "  A.subclasses"
  - "  # => [#<Class:0x00007f3e45907858>, B]"
  - ''
  - "  # Note that `.subclasses` doesn't hold references to the descendants, and therefore doesn't prohibit"
  - "  # them from being garbage-collected"
  - "  c = nil"
  - "  GC.start"
  - "  A.subclasses"
  - "  # => [B] -- dynamic class is gone"
  - "  ```"
  notes: ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Refinement` class"
  path:
  - Ruby 3.1
  - Core classes and modules
  - "`Class` and `Module`"
  summary: 'The class of the context (`self`) available inside the `refine SomeClass do ... end`, and a new private method: `Refinement#import_methods`'
  reason: The `include`/`extend` in refinements never worked (refined class wouldn't have the modules included) but were allowed. `import_methods` were introduced as a compromise replacement, limited in functionality (see **Notes**).
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #17429'
    url: https://bugs.ruby-lang.org/issues/17429
    comments:
  docs:
  - "[Refinement](https://docs.ruby-lang.org/en/3.1/Refinement.html)"
  code:
  - "  ```ruby"
  - "  module AsJSON"
  - "    def as_json_data"
  - "      JSON.parse(to_json, symbolize_names: true)"
  - "    end"
  - "  end"
  - ''
  - "  Warning[:deprecated] = true # To see the warning below"
  - ''
  - "  module JSONizer"
  - "    refine Array do"
  - "      include AsJSON"
  - "      # warning: Refinement#include is deprecated and will be removed in Ruby 3.2"
  - ''
  - "      import_methods AsJSON"
  - "    end"
  - ''
  - "    refine Hash do"
  - "      import_methods AsJSON"
  - "    end"
  - "  end"
  - ''
  - "  using JSONizer"
  - ''
  - "  [:bar, /baz/, Time.now].as_json_data"
  - '  # => ["bar", "(?-mix:baz)", "2021-12-25 20:47:29 +0200"]'
  - "  {'value' => 1/3r}.as_json_data"
  - '  # => {:value=>"1/3"}'
  - "  ```"
  notes: ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Module#prepend` behavior change"
  path:
  - Ruby 3.1
  - Core classes and modules
  - "`Class` and `Module`"
  summary: Now, when module is prepended to the class, it always becomes first in the ancestor chain; even if it was already included.
  reason: It was noted that `prepend` is a mechanism of method redefinition that is relied upon to be performed strictly _before_ the module of the class affected; but if the class had the module already ws included (especially in complex systems and indirectly), this becomes unreliable.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Bug #17423'
    url: https://bugs.ruby-lang.org/issues/17423
    comments:
  docs:
  - "[Module#prepend](https://docs.ruby-lang.org/en/3.1/Module.html#method-i-prepend) _(not that it actually documents new—or old—behavior)_"
  code:
  - "  ```ruby"
  - "  module M"
  - "    def foo"
  - '      ["In M", *(super rescue nil)]'
  - "    end"
  - "  end"
  - ''
  - "  class A"
  - "    def foo"
  - '      ["in A", *(super rescue nil)]'
  - "    end"
  - "  end"
  - ''
  - "  A.include M"
  - "  A.prepend M"
  - ''
  - "  A.ancestors"
  - "  # 3.0: => [A, M, Object, Kernel, BasicObject]"
  - "  # 3.1: => [M, A, M, Object, Kernel, BasicObject]"
  - "  A.new.foo"
  - '  # 3.0: => ["in A", "In M"] -- only method from included module is executed'
  - '  # 3.1: => ["In M", "in A", "In M"] -- both included AND prepended methods are executed'
  - ''
  - "  # Note that relation is not symmetric: if the `prepend` happened first, `include` wouldn't affect"
  - "  # ancestors chain at all:"
  - "  class B"
  - "    def foo"
  - '      ["in B", *(super rescue nil)]'
  - "    end"
  - "  end"
  - ''
  - "  B.prepend M"
  - "  B.include M"
  - ''
  - "  B.ancestors"
  - "  # => [M, B, Object, Kernel, BasicObject] -- both in 3.0 and 3.1"
  - "  B.new.foo"
  - '  # => ["In M", "in B"]'
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Module#private`, `#public`, `#protected`, and `#module_function` return their arguments"
  path:
  - Ruby 3.1
  - Core classes and modules
  - "`Class` and `Module`"
  reason: Allows to chain method decoration DSLs, like `memoize private :method_name`. Follows [similar in spirit](3.0.html#improved-method-visibility-declaration) changes of `attr_reader`/`attr_writer` behavior in Ruby 3.0
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12495'
    url: https://bugs.ruby-lang.org/issues/12495
    comments:
  docs:
  - "[Module#private](https://docs.ruby-lang.org/en/3.1/Module.html#method-i-private),   [Module#public](https://docs.ruby-lang.org/en/3.1/Module.html#method-i-public), [Module#protected](https://docs.ruby-lang.org/en/3.1/Module.html#method-i-protected), [Module#module_function](https://docs.ruby-lang.org/en/3.1/Module.html#method-i-module_function)"
  code:
  - "  ```ruby"
  - "  p private # global private making all the method below private"
  - "  # => nil"
  - ''
  - "  p private def m; end"
  - "  # => :m"
  - ''
  - "  def m1; end"
  - "  def m2; end"
  - "  p private :m1, :m2"
  - "  # => :m1, :m2"
  - ''
  - "  # Usage:"
  - "  require 'memoist'"
  - "  extend Memoist"
  - ''
  - "  # This works: because memoize returns :m, and private receives it"
  - "  private memoize def m"
  - "    # ..."
  - "  end"
  - "  # In 3.0 this didn't work, but in 3.1, this does:"
  - "  memoize private def m"
  - "    # ..."
  - "  end"
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Method`/`UnboundMethod`: `#public?`, `#private?`, `#protected?`"
  path:
  - Ruby 3.1
  - Core classes and modules
  reason: For exploration, documenting, and metaprogramming (like, defining a wrapper method that would have the same visibility as original method).
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #11689'
    url: https://bugs.ruby-lang.org/issues/11689
    comments:
  docs:
  - "[Method#private?](https://docs.ruby-lang.org/en/3.1/Method.html#method-i-private-3F), [UnboundMethod#private?](https://docs.ruby-lang.org/en/3.1/UnboundMethod.html#method-i-private-3F)"
  code:
  - "  ```ruby"
  - "  class A"
  - "    def m1"
  - "    end"
  - ''
  - "    private def m2"
  - "    end"
  - "  end"
  - ''
  - "  m1 = A.instance_method(:m1)"
  - "  # => #<UnboundMethod: A#m1() >"
  - "  m1.private?"
  - "  # => false"
  - "  m1.public?"
  - "  # => true"
  - ''
  - "  m2 = A.new.method(:m2)"
  - "  # => #<Method: A#m2()>"
  - "  m2.private?"
  - "  # => true"
  - "  ```"
  notes: ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Kernel#load`: module as a second argument"
  path:
  - Ruby 3.1
  - Core classes and modules
  summary: "`load(filename, module)` now evaluates `filename`'s code in the context of the `module`."
  reason: The long-requested feature (the request is created almost 10 years ago!) might be useful for implementing simple helper libraries with a few unscoped methods/classes, and then scoping them while loading.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #6210'
    url: https://bugs.ruby-lang.org/issues/6210
    comments:
  docs:
  - "[Kernel#load](https://docs.ruby-lang.org/en/3.1/Kernel.html#method-i-load)"
  code:
  - "  ```ruby"
  - "  # Assuming the following file test-load.rb"
  - "  ENV={a: 1}"
  - ''
  - "  def puts(*)"
  - "    raise NotImplementedError"
  - "  end"
  - ''
  - "  class String"
  - '    def debug = p("Hello from test string")'
  - "  end"
  - ''
  - '  print "Additional module loaded"'
  - ''
  - "  # This would replace `ENV`, `puts` and extend core `String`, and pollute global scope with methods"
  - "  load 'test-load.rb'"
  - '  # prints "Additional module loaded"'
  - "  ENV"
  - "  # => {:a=>1}"
  - "  'test'.debug"
  - '  # prints "Hello from test string"'
  - "  puts 'bar'"
  - "  # NotImplementedError"
  - ''
  - "  # This would not affect `ENV`, `puts`, and `String`, but the only use of the call would be for side-effects"
  - "  load 'test-load.rb', true"
  - '  # prints "Additional module loaded"'
  - "  ENV"
  - "  # => ...system ENV..."
  - "  'test'.debug"
  - '  # undefined method `debug'' for "test":String'
  - "  puts 'bar'"
  - "  # ...prints as usual"
  - ''
  - "  # 3.1+"
  - "  # This would add `ENV`, `puts` and `String` to `Context`, and will make methods available as `foo`"
  - "  module M; end"
  - "  load 'test-load.rb', M"
  - '  # prints "Additional module loaded"'
  - "  ENV"
  - "  # => ...system ENV..."
  - "  M::ENV"
  - "  # => {:a=>1}"
  - "  M::String.new.debug"
  - '  # prints "Hello from test string"'
  - "  M.instance_method(:puts)"
  - "  # => #<UnboundMethod: M#puts() test-load.rb:3> -- can be used by including M into some other module/class"
  - ''
  - "  # Note that `load` wouldn't load into class:"
  - "  class C; end"
  - "  load 'test-load.rb', C # the call is successful, but C treated as just truthy value (wrap=true)"
  - "  C::ENV"
  - "  # uninitialized constant C::ENV (NameError)"
  - "  ```"
  notes: ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: Integer.try_convert
  path:
  - Ruby 3.1
  - Core classes and modules
  summary: Safe explicit conversion methods, which calls `#to_int` if the argument has it, and returns `nil` otherwise.
  reason: The similar methods exist on a few other core classes, like String and Array. They are useful for implementing polymorphic methods (like `#[]` behaving differently for integer, string and range), as a safe way of type-checking/type-coercion.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15211'
    url: https://bugs.ruby-lang.org/issues/15211
    comments:
  docs:
  - "[Integer.try_convert](https://docs.ruby-lang.org/en/3.1/Integer.html#method-c-try_convert)"
  code:
  - "  ```ruby"
  - "  Integer.try_convert(1) #=> 1"
  - "  Integer.try_convert(1.3) #=> 1"
  - "  Integer.try_convert(3/2r) #=> 1"
  - "  require 'bigdecimal'"
  - "  Integer.try_convert(BigDecimal('100000000000000000000000000000000000000000000000000000000000000'))"
  - "  #=> 100000000000000000000000000000000000000000000000000000000000000"
  - ''
  - "  # If the object doesn't have #to_int, returns `nil`"
  - "  Integer.try_convert('1') #=> nil"
  - ''
  - "  class MyNumber"
  - "    def to_int"
  - "      1.3"
  - "    end"
  - "  end"
  - ''
  - "  # If #to_int doesn't return Integer, the error is raised (even if the result is convertable)"
  - "  Integer.try_convert(MyNumber.new)"
  - "  #=> `try_convert': can't convert MyNumber to Integer (MyNumber#to_int gives Float) (TypeError)"
  - ''
  - "  # Usage in some array-alike slicing API:"
  - "  def slice(index)"
  - "    idx = Integer.try_convert(index) or"
  - '      raise ArgumentError, "Expected argument convertible to Integer, got #{index}"'
  - "    # Now `idx` is safe to use even for low-level APIs like memory addressing, it is definitely"
  - "    # Integer, even if some Float was passed initially."
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`String#unpack` and `#unpack1`: `offset:` argument"
  path:
  - Ruby 3.1
  - Core classes and modules
  summary: The new argument allows to unpack data starting from the specified offset.
  reason: 'Handy for working with binary data of complicated shape, flow like: read one byte, decide what type/size is next data, then read this number of bytes _starting after the type tag_, then read next chunk _starting after the data already read_. Before the parameter introduction, this type of processing required string slicing, which is cumbersome and might''ve been inefficient.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #18254'
    url: https://bugs.ruby-lang.org/issues/18254
    comments:
  docs:
  - "[String#unpack](https://docs.ruby-lang.org/en/3.1/String.html#method-i-unpack), [String#unpack1](https://docs.ruby-lang.org/en/3.1/String.html#method-i-unpack1)"
  code:
  - "  ```ruby"
  - '  # imagine it is "type tag 1 + data in four 32-bit integers"'
  - "  data = [1, 1991, 1995, 1998, 2003].pack('CL*')"
  - '  # => "\x01\xC7\a\x00\x00\xCB\a\x00\x00\xCE\a\x00\x00\xD3\a\x00\x00"'
  - "  tag = data.unpack1('c')"
  - "  # => 1"
  - "  data.unpack('L*', offset: 1)"
  - "  # => [1991, 1995, 1998, 2003]"
  - ''
  - "  # Negative offsets or out-of-bounds ones don't work"
  - "  data.unpack('L*', offset: -1)"
  - "  # in `unpack': offset can't be negative (ArgumentError)"
  - "  data.unpack('L*', offset: 20)"
  - "  # in `unpack':  offset outside of string (ArgumentError)"
  - ''
  - "  # 0 works, being the same as no offset"
  - "  data.unpack('c', offset: 0)"
  - "  # => [1]"
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`MatchData#match` and `#match_length`"
  path:
  - Ruby 3.1
  - Core classes and modules
  summary: "`#match(idx)` is the same as `MatchData#[]`, but only works for singular numeric or symbolic index. `#match_length(idx)` returns the length of the `idx`s match."
  reason: It was argued that in the performance-critical code sometimes there is a need to just know the length of the substring matched, and doing it via `match[index].length` leads to creation of an intermediate string soon to be dropped, while `#match_length` doesn't do that. `#match` is added mostly for completeness (it would be weird to not have it when `#match_length` method exists).
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #18172'
    url: https://bugs.ruby-lang.org/issues/18172
    comments:
  docs:
  - "[MatchData#match](https://docs.ruby-lang.org/en/3.1/MatchData.html#method-i-match), [MatchData#match_length](https://docs.ruby-lang.org/en/3.1/MatchData.html#method-i-match_length)"
  code:
  - "  ```ruby"
  - '  m = "Ruby 3.1 is released December 25, 2021".match(/Ruby (?<version>\d\.\d) .* (?<year>\d{4})/)'
  - '  # => #<MatchData "Ruby 3.1 is released December 25, 2021" version:"3.1" year:"2021">'
  - "  m.match(1)"
  - '  # => "3.1"'
  - "  m.match(:version)"
  - '  # => "3.1"'
  - "  m.match('version')"
  - '  # => "3.1"'
  - "  m.match_length(:version)"
  - "  # => 3"
  - "  m.match(2)"
  - '  # => "2021"'
  - "  m.match_length(2)"
  - "  # => 4"
  - "  m.match(3)"
  - "  # in `match': index 3 out of matches (IndexError)"
  - "  m.match_length(3)"
  - "  # in `match_length': index 3 out of matches (IndexError)"
  - ''
  - "  # ...unlike #[]"
  - "  m[3]"
  - "  # => nil"
  - ''
  - "  # Realistic usage:"
  - '  text = "My credit card number is 5221-1234-5678-9000 (not really)"'
  - "  text.gsub!(/(\\d{4})-(\\d{4})-(\\d{4})-(\\d{4})/) {"
  - "    m = Regexp.last_match"
  - '    "#{m.match(1)}-#{''*'' * m.match_length(2)}-#{''*'' * m.match_length(3)}-#{m.match(4)}"'
  - "   }"
  - '   # => "My credit card number is 5221-****-****-9000 (not really)"'
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`in:` parameter for constructing time"
  path:
  - Ruby 3.1
  - Core classes and modules
  - "`Time`"
  summary: The new parameter is accepting offsets or timezone objects, and (finally!) allows to easily construct time in desired timezone.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17485'
    url: https://bugs.ruby-lang.org/issues/17485
    comments:
  docs:
  - "[Time.new](https://docs.ruby-lang.org/en/3.1/Time.html#method-c-new), [Time.at](https://docs.ruby-lang.org/en/3.1/Time.html#method-c-at), [Time.now](https://docs.ruby-lang.org/en/3.1/Time.html#method-c-now)"
  code:
  - "  ```ruby"
  - "  Time.new(2021, 12, 24, in: '+09:00')"
  - "  # => 2021-12-24 00:00:00 +0900"
  - "  Time.new(2021, 12, 24, in: 'UTC')"
  - "  #  => 2021-12-24 00:00:00 UTC"
  - ''
  - '  # This was previously possible only with "pass all params" signature'
  - "  # Ruby 3.0: tz was only a positional argument:"
  - "  Time.new(2021, 12, 24, 0, 0, 0, '+09:00')"
  - "  # => 2021-12-24 00:00:00 +0900"
  - ''
  - "  # This was previously not possible to do in one call: ::now with timezone"
  - "  Time.now(in: '+09:00')"
  - "  # => 2021-12-21 18:33:51.583436226 +0900"
  - "  Time.now"
  - "  # => 2021-12-21 11:34:00.258235705 +0200 -- my local timezone, for comparison"
  - ''
  - "  # This was not possible either: ::at with timezone"
  - "  timestamp = Time.now.to_i"
  - "  # => 1640079354"
  - "  Time.at(timestamp, in: '+09:00')"
  - "  # => 2021-12-21 18:35:54 +0900"
  - ''
  - "  # Timezone objects are supported, too"
  - "  require 'tzinfo'"
  - "  zone = TZInfo::Timezone.get('America/New_York')"
  - "  Time.now(in: zone)"
  - "  # => 2021-12-21 04:37:25.522169768 -0500"
  - "  Time.now(in: zone).zone"
  - "  # => #<TZInfo::DataTimezone: America/New_York>"
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`#strftime` supports `-00:00` offset"
  path:
  - Ruby 3.1
  - Core classes and modules
  - "`Time`"
  summary: '`%-z` allows to format "negative zero" offset for Time.'
  reason: 'RFC 3339 [defines a nuance](https://datatracker.ietf.org/doc/html/rfc3339#section-4.3) of offset formatting: offset `"+00:00"` in some service response declares that UTC is the preferred timezone for some context; while `"-00:00"` declares that preferred timezone is unknown, that''s why data is in UTC.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17544'
    url: https://bugs.ruby-lang.org/issues/17544
    comments:
  docs:
  - "[Time#strftime](https://docs.ruby-lang.org/en/3.1/Time.html#method-i-strftime)"
  code:
  - "  ```ruby"
  - "  t = Time.now.utc"
  - "  # => 2021-12-26 18:47:52.979940556 UTC -- yeah, I am still working on a changelog a day after the release :("
  - "  t.strftime('%H:%M%z')"
  - '  # => "18:47+0000"'
  - "  t.strftime('%H:%M%-z')"
  - '  # => "18:47-0000"'
  - "  t.strftime('%H:%M%-:z')"
  - '  # => "18:47-00:00"'
  - "  t.strftime('%H:%M%-::z')"
  - '  # => "18:47-00:00:00"'
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: Warning on passing keywords to a non-keyword-initialized struct
  path:
  - Ruby 3.1
  - Core classes and modules
  - "`Struct`"
  reason: After keyword-inited stucts have been introduced, it is easy to forget the actual protocol of some struct, and try to initialized it with keyword arguments—which, if the struct is not keyword-inited, would raise no error, but produce an unexpected result.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16806'
    url: https://bugs.ruby-lang.org/issues/16806
    comments:
  code:
  - "  ```ruby"
  - "  Person = Struct.new(:name, :age)"
  - "  # Proper initialization:"
  - "  Person.new('Jane', 32)"
  - '  #=> #<struct Person name="Jane", age=32>'
  - ''
  - "  # I forgot it is not initialized by keywords, expected to initialize both fields,"
  - "  # but it would actually be treated as Person.new({name: 'Jane', age: 32}, nil)"
  - "  Person.new(name: 'Jane', age: 32)"
  - "  # warning: Passing only keyword arguments to Struct#initialize will behave differently from Ruby 3.2. Please use a Hash literal like .new({k: v}) instead of .new(k: v)."
  - '  #=> #<struct Person name={:name=>"Jane", :age=>32}, age=nil>'
  - ''
  - "  # If the struct is really initialized by a hash, use {} to signify you know what you do"
  - "  Locale = Struct.new(:translations)"
  - "  Locale.new({user: 'користувач', application: 'застосунок'})"
  - '  # => #<struct Locale translations={:user=>"користувач", :application=>"застосунок"}>'
  - "  # ...no warning produced"
  - ''
  - "  # The warning is produced only if the hash is the ONLY argument"
  - "  Locale = Struct.new(:lang, :translations)"
  - "  Locale.new(:ua, user: 'користувач', application: 'застосунок')"
  - '  #=> #<struct Locale lang=:ua, translations={:user=>"користувач", :application=>"застосунок"}>'
  - "  # ...no braces necessary, no warning"
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`StructClass#keyword_init?`"
  path:
  - Ruby 3.1
  - Core classes and modules
  - "`Struct`"
  summary: The method allows to check whether the `Struct`-produced class is initialized by keywords.
  reason: Helpful for meta-programming and generic processing of data, like serializing/deserializing.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #18008'
    url: https://bugs.ruby-lang.org/issues/18008
    comments:
  docs:
  - "[Strict.keyword_init?](https://docs.ruby-lang.org/en/3.1/Struct.html#method-c-keyword_init-3F)"
  code:
  - "  ```ruby"
  - "  Struct.new(:name, :age).keyword_init?                       #=> nil"
  - "  Struct.new(:name, :age, keyword_init: true).keyword_init?   #=> true"
  - "  Struct.new(:name, :age, keyword_init: false).keyword_init?  #=> false"
  - ''
  - "  # Potential usage:"
  - "  def deserialize(struct_class, **data)"
  - "    if struct_class.keyword_init?"
  - "      struct_class.new(**data)"
  - "    else"
  - "      struct_class.new(*data.values)"
  - "    end"
  - "  end"
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Enumerable#compact` and `Enumerator::Lazy#compact`"
  path:
  - Ruby 3.1
  - Core classes and modules
  - Collections and sequences
  reason: "`#compact` was previously defined only on a particular classes like `Array` and `Hash`, but being a synonym for `reject(&:nil?)`, it is reasonable to have in generic `Enumerable`. Especially useful in lazy enumeration to produce still-lazy sequences with `compact` applied."
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17312'
    url: https://bugs.ruby-lang.org/issues/17312
    comments:
  docs:
  - "[Enumerable#compact](https://docs.ruby-lang.org/en/3.1/Enumerable.html#method-i-compact), [Enumerator::Lazy#compact](https://docs.ruby-lang.org/en/3.1/Enumerator/Lazy.html#method-i-compact)"
  code:
  - "  ```ruby"
  - "  # quickly imitate some slow or infinite stream producing data with nils possible:"
  - "  stream = Enumerator.produce { [nil, 1, 'test'].sample }.lazy"
  - ''
  - "  stream.compact.first(5)"
  - "  # 3.0: NoMethodError (undefined method `compact' for #<Enumerator::Lazy: #<Enumerator: #<Enumerator::Producer:0x000055e8ffd38388>:each>>)"
  - '  # 3.1: => ["test", 1, 1, "test", "test"]'
  - ''
  - "  # In 3.0, this already worked, which made absence of .compact even more confusing:"
  - "  stream.reject(&:nil?).first(5)"
  - '  # => ["test", "test", 1, "test", 1]'
  - ''
  - "  # Usage in regular enumerable objects:"
  - "  require 'set'"
  - "  Set[1, nil, 2].compact"
  - "  # 3.0: NoMethodError (undefined method `compact' for #<Set: {1, nil, 2}>)"
  - "  # 3.1: => [1, 2] -- not ideal (it would be better to see Set[1, 2]), but better"
  - "  ```"
  notes: ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Enumerable#tally` now accepts an optional hash to count"
  path:
  - Ruby 3.1
  - Core classes and modules
  - Collections and sequences
  summary: The hash is updated with the new `tally` numbers, allowing to accumulate stats from several enumerables efficiently and succinctly.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17744'
    url: https://bugs.ruby-lang.org/issues/17744
    comments:
  docs:
  - "[Enumerable#tally](https://docs.ruby-lang.org/en/3.1/Enumerable.html#method-i-tally)"
  code:
  - "  ```ruby"
  - "  week1_shifts = ['John', 'Jane', 'Hassim', 'John', 'Olexa', 'Olexa', 'Jane']"
  - "  week2_shifts = ['Jane', 'Jane', 'Miranda', 'John', 'Hassim', 'Olexa', 'John']"
  - ''
  - "  stats = {}"
  - "  week1_shifts.tally(stats)"
  - '  #=> {"John"=>2, "Jane"=>2, "Hassim"=>1, "Olexa"=>2}'
  - "  week2_shifts.tally(stats) # add it to the previous stats"
  - '  #=> {"John"=>4, "Jane"=>4, "Hassim"=>2, "Olexa"=>3, "Miranda"=>1}'
  - ''
  - "  # Only hashes or objects implicitly convertible into hash are allowed:"
  - "  require 'ostruct'"
  - "  week1_shifts.tally(OpenStruct.new) # maybe having #[]= is enough?.."
  - "  # in `tally': can't convert OpenStruct to Hash (OpenStruct#to_hash gives NilClass) (TypeError)"
  - ''
  - "  # Hash descendants can be used as argument"
  - "  gem 'hashie'"
  - "  require 'hashie'"
  - "  stats = Hashie::Mash.new # Subclass of Hash which allows `.key` access"
  - "  res = week1_shifts.tally(stats)"
  - '  # => {"John"=>2, "Jane"=>2, "Hassim"=>1, "Olexa"=>2}'
  - "  res.class"
  - "  # => Hashie::Mash"
  - "  res.John"
  - "  # => 2"
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Enumerable#each_cons` and `#each_slice` return a receiver"
  path:
  - Ruby 3.1
  - Core classes and modules
  - Collections and sequences
  reason: Before 3.1, both methods returned `nil`, making it inconvenient to use in chained computations. This was also inconsistent with `#each`, which returns a receiver.
  discussion:
  - !ruby/object:Change::GitHubPullRequest
    label: GH-#
    url: https://github.com/ruby/ruby/pull/
  docs:
  - "[Enumerable#each_cons](https://docs.ruby-lang.org/en/3.1/Enumerable.html#method-i-each_cons), [Enumerable#each_slice](https://docs.ruby-lang.org/en/3.1/Enumerable.html#method-i-each_slice)"
  code:
  - "  ```ruby"
  - "  Item = Struct.new(:value, :next)"
  - ''
  - "  list = ('a'..'e').map { Item.new(_1) }"
  - "                   .each_cons(2) { |item, next_item| item.next = next_item }"
  - "  # => ["
  - '  #   #<struct Item value="a", next=#<struct Item value="b", ...>,'
  - "  #   ..."
  - "  #   ..."
  - ''
  - "  # Before Ruby 3.1, one would need to write:"
  - "  list = ('a'..'e').map { Item.new(_1) }"
  - "  # this would return nil, so can't be chained"
  - "  list.each_cons(2) { |item, next_item| item.next = next_item }"
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Array#intersect?`"
  path:
  - Ruby 3.1
  - Core classes and modules
  - Collections and sequences
  summary: Method checks if two arrays intersect, e.g. have at least one item in common.
  reason: Despite the fact that `Thread::Queue` is a specialized collection for safe data exchange in a multi-threaded context, it is considered to frequently have some initial set of values to process (like list of workers), new method call-sequence simplifies that.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15198'
    url: https://bugs.ruby-lang.org/issues/15198
    comments:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17327'
    url: https://bugs.ruby-lang.org/issues/17327
    comments:
  docs:
  - "[Array#intersect?](https://docs.ruby-lang.org/en/3.1/Array.html#method-i-intersect-3F)"
  - "[Thread::Queue.new](https://docs.ruby-lang.org/en/3.1/Thread/Queue.html#method-c-new)"
  code:
  - "  ```ruby"
  - "  [1, 2, 3, 4].intersect?([1, 11, 111]) #=> true"
  - "  [1, 2, 3, 4].intersect?([11, 111]) #=> false"
  - ''
  - "  # As with other set-alike method, items comparison are performed with #eql? which is in some cases"
  - "  # stricter than #=="
  - "  [1] == [1.0]"
  - "  # => true"
  - "  [1].intersect?([1.0])"
  - "  # => false"
  - "  ```"
  - ''
  - "  ```ruby"
  - "  queue = Thread::Queue.new(['task1', 'task2', 'task3'])"
  - "  # => #<Thread::Queue:0x00007f434de1b800>"
  - ''
  - "  producer = Thread.new do"
  - "    while !queue.empty?"
  - "      task = queue.pop"
  - '      puts "procesing #{task}"'
  - "    end"
  - "  end"
  - ''
  - "  producer.join"
  - "  # procesing task1"
  - "  # procesing task2"
  - "  # procesing task3"
  - ''
  - "  # Any class responding to #to_a, and any Enumerable can be used as a constructor:"
  - "  queue = Thread::Queue.new(File.open('tasks.csv').each_line)"
  - "  # => #<Thread::Queue:0x00007f434de18998>"
  - "  ```"
  - ''
  notes: ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`IO::Buffer`"
  path:
  - Ruby 3.1
  - Core classes and modules
  summary: A new class representing low-level I/O abstraction. Internally, uses OS mechanisms to directly use memory-mapping of files and internal Ruby String representation.
  reason: The feature was requested for implementing non-blocking `#io_read` and `#io_write` for FiberScheduler, but probably will find other usages once matured.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #18020'
    url: https://bugs.ruby-lang.org/issues/18020
    comments:
  docs:
  - "[IO::Buffer](https://docs.ruby-lang.org/en/3.1/IO/Buffer.html)"
  code:
  - _This is a big new class, see class' docs for detailed examples of usage, they are quite succinct._
  notes: ''
  followup: ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`File.dirname`: optional `level` to go up the directory tree"
  path:
  - Ruby 3.1
  - Core classes and modules
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #12194'
    url: https://bugs.ruby-lang.org/issues/12194
    comments:
  docs:
  - "[File.dirname](https://docs.ruby-lang.org/en/3.1/File.html#method-c-dirname)"
  code:
  - "  ```ruby"
  - '  path = "/home/zverok/projects/ruby/README.md"'
  - "  File.dirname(path)"
  - '  # => "/home/zverok/projects/ruby"'
  - "  File.dirname(path, 1) # same as above"
  - '  # => "/home/zverok/projects/ruby"'
  - "  File.dirname(path, 2)"
  - '  # => "/home/zverok/projects"'
  - "  File.dirname(path, 3)"
  - '  # => "/home/zverok"'
  - "  File.dirname(path, 100)"
  - '  # => "/"'
  - "  File.dirname(path, 0) # no-op"
  - '  # => "/home/zverok/projects/ruby/README.md"'
  - "  File.dirname(path, -1)"
  - "  # in `dirname': negative level: -1 (ArgumentError)"
  - "  ```"
  notes: ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Marshal.load` accepts a `freeze:` option"
  path:
  - Ruby 3.1
  - Core classes and modules
  summary: 'If the `freeze: true` is passed, `#load` will return deeply frozen object graph.'
  reason: Besides obvious immutability merits, constructing frozen graph may lead to lower memory consumption, because frozen strings are deduplicated.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #18148'
    url: https://bugs.ruby-lang.org/issues/18148
    comments:
  docs:
  - "[Marshal.load](https://docs.ruby-lang.org/en/3.1/Marshal.html#method-c-load)"
  code:
  - "  ```ruby"
  - "  serialized = Marshal.dump(['value1', 'value2', 'value1', 'value2'])"
  - ''
  - "  deserialized = Marshal.load(serialized)"
  - "  deserialized.map(&:frozen?)"
  - "  # => [false, false, false, false]"
  - "  deserialized.map(&:object_id)"
  - "  # => [1023900, 1023920, 1023940, 1023960] -- 4 different objects"
  - ''
  - "  deserialized = Marshal.load(serialized, freeze: true)"
  - "  deserialized.map(&:frozen?)"
  - "  # => [true, true, true, true]"
  - "  deserialized.map(&:object_id)"
  - "  # => [1039360, 1039380, 1039360, 1039380] -- only 2 different objects, object_ids repeating"
  - ''
  - "  # The only type of objects not frozen are class/module:"
  - "  MyType = Struct.new(:a, :b)"
  - "  serialized = Marshal.dump(MyType)"
  - "  deserialized = Marshal.load(serialized, freeze: true)"
  - "  deserialized.frozen? # => false"
  - '  # That''s because Marshal.load doesn''t "create" those objects, just finds the correspondence:'
  - "  Object.send(:remove_const, :MyType)"
  - "  Marshal.load(serialized)"
  - "  # undefined class/module MyType (ArgumentError)"
  - "  # ...therefore, making that corresponding module frozen would be unexpected"
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Thread#native_thread_id`"
  path:
  - Ruby 3.1
  - Core classes and modules
  - Concurrency
  summary: Returns OS-specific thread ID.
  reason: The method might be useful for low-level debugging, and for system calls requiring "real" thread id.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17853'
    url: https://bugs.ruby-lang.org/issues/17853
    comments:
  docs:
  - "[Thread#native_thread_id](https://docs.ruby-lang.org/en/3.1/Thread.html#method-i-native_thread_id)"
  code:
  - "  ```ruby"
  - "  # On my Ubuntu:"
  - ''
  - "  Thread.current.native_thread_id"
  - "  # => 2735439"
  - "  t = Thread.new { sleep(1) }"
  - "  t.native_thread_id"
  - "  # => 2746533"
  - "  sleep(5) # -- allow t to finish (non-deterministic though!)"
  - "  t.native_thread_id"
  - "  # => nil"
  - "  ```"
  notes: ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Process._fork`"
  path:
  - Ruby 3.1
  - Core classes and modules
  - Concurrency
  summary: The new method is the process forking implementation which is guaranteed to be used by both `Process.fork`, `Kernel#fork`, and `IO.popen`.
  reason: The method is meant to be overridable by libraries that need to add some hook/additional processing (like freeing DB connections) on forking. Previously, this was inconvenient due to the fact that `Process.fork` and `Kernel#fork` were different methods, not relying on each other.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17795'
    url: https://bugs.ruby-lang.org/issues/17795
    comments:
  docs:
  - "[Process.\\_fork](https://docs.ruby-lang.org/en/3.1/Process.html#method-c-_fork)"
  code:
  - "  ```ruby"
  - "  module ForkMonitor"
  - "    def _fork(...)"
  - '      puts "Before fork : in #{Process.pid}"'
  - '      super.tap { puts "After fork  : in #{Process.pid}" }'
  - "    end"
  - "  end"
  - ''
  - "  Process.singleton_class.prepend(ForkMonitor)"
  - ''
  - '  puts "Main process: in #{Process.pid}"'
  - '  pid = fork { puts "Forked body : in #{Process.pid}" }'
  - '  puts "Wating for       #{pid}"'
  - "  Process.waitpid(pid) if pid"
  - "  ```"
  - "  This prints:"
  - "  ```"
  - "  Main process: in 2052974"
  - "  Before fork : in 2052974"
  - "  After fork  : in 2052974"
  - "  Wating for       2052975"
  - "  After fork  : in 2052975  -- note that AFTER code is performed both for parent and child"
  - "  Forked body : in 2052975"
  - "  ```"
  notes: ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: 'Fiber Scheduler: New hooks'
  path:
  - Ruby 3.1
  - Core classes and modules
  - Concurrency
  summary: Continuing work on non-blocking Fiber and Fiber Scheduler concept [introduced in 3.0](3.0.html#non-blocking-fiber-and-scheduler), new optional hooks were introduced to support non-blocking DNS resolution (`#address_resolve`), IO (`#io_read`/`#io_write`)
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17370'
    url: https://bugs.ruby-lang.org/issues/17370
    comments: "`address_resolve`"
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17470'
    url: https://bugs.ruby-lang.org/issues/17470
    comments: "`timeout_after`"
  - !ruby/object:Change::RubyIssue
    label: 'Feature #18020'
    url: https://bugs.ruby-lang.org/issues/18020
    comments: "`io_read` and `io_write`"
  docs:
  - "[Fiber::SchedulerInterface#address_resolve](https://docs.ruby-lang.org/en/3.1/Fiber/SchedulerInterface.html#method-i-address_resolve), [Fiber::SchedulerInterface#timeout_after](https://docs.ruby-lang.org/en/3.1/Fiber/SchedulerInterface.html#method-i-timeout_after), [Fiber::SchedulerInterface#io_read](https://docs.ruby-lang.org/en/3.1/Fiber/SchedulerInterface.html#method-i-io_read), [Fiber::SchedulerInterface#io_write](https://docs.ruby-lang.org/en/3.1/Fiber/SchedulerInterface.html#method-i-io_write)"
  code:
  - See code examples in [3.0 changelog](3.0.html#non-blocking-fiber-and-scheduler) for general demo of using Fiber Scheduler. As no simple implementation is available, it is complicated to show an example of new hooks in play.
  notes: ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: Ractors can access module instance variables
  path:
  - Ruby 3.1
  - Core classes and modules
  - Concurrency
  summary: 'Ractors, [introduced in 3.0](3.0.html#ractors) to solve a problem of GVM (global virtual matchine lock), have a strict notion of "shareability". Non-main Ractors can''t directly access any names defined outside of them except for classes/modules and frozen constants. One improvement was made to this model: allow to access module-wide instance variables.'
  reason: 'Calling `SomeClass.some_method` from inside Ractor is generally OK, unless the method changes the class''/module''s internal variables (for example `SomeObject.new` maintains a global cache of all objects constructed)—in this case you''ll see an `IsolationError`. So far, it corresponds to expectations of Ractor''s data sharing model. But this expectation is broken if some of the module''s methods uses immutable data stored in instance variable: intuitively it doesn''t break isolation, but still didn''t work. Now this limitation is relaxed.'
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17592'
    url: https://bugs.ruby-lang.org/issues/17592
    comments:
  docs:
  - "[Ractor#Shareable and unshareable objects](https://docs.ruby-lang.org/en/3.1/Ractor.html#class-Ractor-label-Shareable+and+unshareable+objects) (docs aren't updated yet)"
  code:
  - "  ```ruby"
  - "  class APIClient < Struct.new(:version, :use_https, keyword_init: true)"
  - "    def self.setup!(**defaults)"
  - "      @defaults = defaults.freeze"
  - "    end"
  - ''
  - "    def self.make"
  - "      new(**@defaults)"
  - "    end"
  - "  end"
  - ''
  - "  APIClient.setup!(version: 1, use_https: true) # sets immutable instance variable @defaults"
  - ''
  - "  Ractor.new {"
  - "    p APIClient.make # uses that variable, should be safe"
  - "    # 3.0: in `make': can not access instance variables of classes/modules from non-main Ractors (Ractor::IsolationError)"
  - "    # 3.1: => #<struct APIClient version=1, use_https=true>"
  - "  }.take"
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`Thread::Backtrace.limit`"
  path:
  - Ruby 3.1
  - Core classes and modules
  - Internals
  summary: Returns value set by `--backtrace-limit` command-line option (which is used in Exception#full_message to format backtrace).
  reason: The ability to read the parameter might be useful for custom error formatters.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #17479'
    url: https://bugs.ruby-lang.org/issues/17479
    comments:
  docs:
  - "[Thread::Backtrace.limit](https://docs.ruby-lang.org/en/3.1/Thread/Backtrace.html#method-c-limit)"
  code:
  - "(in shell)"
  - "  ```"
  - '  $ ruby -r net/http -e "p Thread::Backtrace.limit; Net::HTTP.get(URI(''http://wrong.address''))"'
  - "  −1"
  - "  .../lib/ruby/3.1.0/socket.rb:227:in `getaddrinfo': Failed to open TCP connection to wrong.address:80 (getaddrinfo: Name or service not known) (SocketError)"
  - "      from .../lib/ruby/3.1.0/socket.rb:227:in `foreach'"
  - "      from .../lib/ruby/3.1.0/socket.rb:632:in `tcp'"
  - "      from .../lib/ruby/3.1.0/net/http.rb:998:in `connect'"
  - "      from .../lib/ruby/3.1.0/net/http.rb:976:in `do_start'"
  - "      from .../lib/ruby/3.1.0/net/http.rb:965:in `start'"
  - "      from .../lib/ruby/3.1.0/net/http.rb:627:in `start'"
  - "      from .../lib/ruby/3.1.0/net/http.rb:503:in `get_response'"
  - "      from .../lib/ruby/3.1.0/net/http.rb:474:in `get'"
  - "  .../lib/ruby/3.1.0/socket.rb:227:in `getaddrinfo': getaddrinfo: Name or service not known (SocketError)"
  - "      from .../lib/ruby/3.1.0/socket.rb:227:in `foreach'"
  - "      from .../lib/ruby/3.1.0/socket.rb:632:in `tcp'"
  - "      from .../lib/ruby/3.1.0/net/http.rb:998:in `connect'"
  - "      from .../lib/ruby/3.1.0/net/http.rb:976:in `do_start'"
  - "      from .../lib/ruby/3.1.0/net/http.rb:965:in `start'"
  - "      from .../lib/ruby/3.1.0/net/http.rb:627:in `start'"
  - "      from .../lib/ruby/3.1.0/net/http.rb:503:in `get_response'"
  - "      from .../lib/ruby/3.1.0/net/http.rb:474:in `get'"
  - "      from -e:1:in `<main>'"
  - ''
  - '  $ ruby --backtrace-limit 2 -r net/http -e "p Thread::Backtrace.limit; Net::HTTP.get(URI(''http://wrong.address''))"'
  - "  2"
  - "  .../lib/ruby/3.1.0/socket.rb:227:in `getaddrinfo': Failed to open TCP connection to wrong.address:80 (getaddrinfo: Name or service not known) (SocketError)"
  - "      from .../lib/ruby/3.1.0/socket.rb:227:in `foreach'"
  - "      from .../lib/ruby/3.1.0/socket.rb:632:in `tcp'"
  - "       ... 7 levels..."
  - "  .../lib/ruby/3.1.0/socket.rb:227:in `getaddrinfo': getaddrinfo: Name or service not known (SocketError)"
  - "      from .../lib/ruby/3.1.0/socket.rb:227:in `foreach'"
  - "      from .../lib/ruby/3.1.0/socket.rb:632:in `tcp'"
  - "       ... 7 levels..."
  - ''
  - '  $ ruby --backtrace-limit 0 -r net/http -e "p Thread::Backtrace.limit; Net::HTTP.get(URI(''http://wrong.address''))"'
  - "  0"
  - "  .../lib/ruby/3.1.0/socket.rb:227:in `getaddrinfo': Failed to open TCP connection to wrong.address:80 (getaddrinfo: Name or service not known) (SocketError)"
  - "       ... 9 levels..."
  - "  .../lib/ruby/3.1.0/socket.rb:227:in `getaddrinfo': getaddrinfo: Name or service not known (SocketError)"
  - "       ... 9 levels..."
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`GC`: measuring total time"
  path:
  - Ruby 3.1
  - Core classes and modules
  - Internals
  summary: New methods added to measure time spent in garbage collection.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #10917'
    url: https://bugs.ruby-lang.org/issues/10917
    comments:
  docs:
  - "[GC.measure_total_time](https://docs.ruby-lang.org/en/3.1/GC.html#method-c-measure_total_time), [GC.measure_total_time=](https://docs.ruby-lang.org/en/3.1/GC.html#method-c-measure_total_time-3D), [GC.stat](https://docs.ruby-lang.org/en/3.1/GC.html#method-c-stat), [GC.total_time](https://docs.ruby-lang.org/en/3.1/GC.html#method-c-total_time)"
  code:
  - "  ```ruby"
  - "  GC.total_time  # => 10903796 -- nanoseconds at script start"
  - "  GC.stat[:time] # => 10 -- milliseconds at script start"
  - ''
  - "  30_000.times.map { Object.new }"
  - ''
  - "  GC.start"
  - ''
  - "  # After some GCing"
  - "  GC.total_time  # => 20483486 -- nanoseconds"
  - "  GC.stat[:time] # => 20 -- milliseconds"
  - ''
  - "  GC.measure_total_time= false"
  - ''
  - "  30_000.times.map { Object.new }"
  - ''
  - "  GC.start"
  - ''
  - "  # Measuring was disabled, same values as above"
  - "  GC.total_time  # => 20483486"
  - "  GC.stat[:time] # => 20"
  - "  ```"
  notes: ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`TracePoint.allow_reentry`"
  path:
  - Ruby 3.1
  - Core classes and modules
  - Internals
  summary: Normally, during handling of `TracePoint` event, all other active `TracePoint` handlers wouldn't be called. Since Ruby 3.1, the handler can wrap some of its code into `TracePoint.allow_reentry { ... }` and inside that block, other handlers (including the current one) _will_ be invoked.
  reason: The issue was raised by author of the [byebug](https://github.com/deivid-rodriguez/byebug) debugger. Debugging sessions are implemented with `TracePoint` API, and when the program is inside a debugging session, it is actually inside one of the handlers. Thus, all other libraries relying on `TracePoint` API would not work during the session—and one of them is [zeitwerk](https://github.com/fxn/zeitwerk), Rails code reloader.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #15912'
    url: https://bugs.ruby-lang.org/issues/15912
    comments:
  docs:
  - "[TracePoint.allow_reentry](https://docs.ruby-lang.org/en/3.1/TracePoint.html#method-c-allow_reentry)"
  code:
  - "  ```ruby"
  - "  # Without reentry"
  - "  # ---------------"
  - ''
  - "  line_handler = TracePoint.new(:line) do |tp| # invoked for each statement"
  - "    next if tp.path != __FILE__ # only work in this file"
  - '    puts "Line handler"'
  - '    binding.eval("class C; end")'
  - "  end.enable"
  - ''
  - "  class_handler = TracePoint.new(:class) do |tp| # invoked for each class definition"
  - '    puts "Class handler"'
  - "  end.enable"
  - ''
  - "  class B"
  - "  end"
  - ''
  - '  # This script will print "Class handler" only once: when inside :line'
  - "  # handler, all other handlers are ignored, and `class C; end` is NOT invoking the class_handler"
  - ''
  - ''
  - "  # With reentry"
  - "  # ------------"
  - ''
  - "  line_handler = TracePoint.new(:line) do |tp| # invoked for each statement"
  - "    next if tp.path != __FILE__ # only work in this file"
  - "    next if (__LINE__..__LINE__+3).cover?(tp.lineno) # don't be invoked from itself"
  - '    puts "Line handler"'
  - '    TracePoint.allow_reentry { binding.eval("class C; end") }'
  - "  end.enable"
  - ''
  - "  class_handler = TracePoint.new(:class) do |tp| # invoked for each class definition"
  - '    puts "Class handler"'
  - "  end.enable"
  - ''
  - "  class B"
  - "  end"
  - ''
  - '  # This will print "Class handler" twice: inside allow_reentry block in :line'
  - "  # handler, other handlers are enabled."
  - "  ```"
  notes: ''
  release: 3.1
  section: Core Classes and Modules
- !ruby/object:Change
  level: 2
  scope: ''
  title: "`$LOAD_PATH.resolve_feature_path` does not raise"
  path:
  - Ruby 3.1
  - Core classes and modules
  - Internals
  summary: Since being added [in 2.6](2.6.html#rubyvmresolve_feature_path) (then named `RubyVM.resolve_feature_path`), the method have raised when the requested name wouldn't be found. It was fixed in 3.1 to just return `nil`.
  reason: It was argued that raising `LoadError` makes method looks like it has a side effect instead of just being a query method, and makes it inconvenient to use.
  discussion:
  - !ruby/object:Change::RubyIssue
    label: 'Feature #16043'
    url: https://bugs.ruby-lang.org/issues/16043
    comments:
  docs:
  - "[doc/globals.rdoc](https://docs.ruby-lang.org/en/3.1/globals_rdoc.html)"
  code:
  - "  ```ruby"
  - "  $LOAD_PATH.resolve_feature_path('garbage111')"
  - "  # 3.0: LoadError (cannot load such file -- garbage111)"
  - "  # 3.1: => nil"
  - "  ```"
  - ''
  release: 3.1
  section: Core Classes and Modules
